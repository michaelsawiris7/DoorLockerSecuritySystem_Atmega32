
MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000130a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011e  00800060  0000130a  0000139e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080017e  0080017e  000014bc  2**0
                  ALLOC
  3 .stab         0000330c  00000000  00000000  000014bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010e0  00000000  00000000  000047c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 50 08 	jmp	0x10a0	; 0x10a0 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 27 08 	jmp	0x104e	; 0x104e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e0       	ldi	r30, 0x0A	; 10
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 38       	cpi	r26, 0x8A	; 138
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 84 07 	call	0xf08	; 0xf08 <main>
      8a:	0c 94 83 09 	jmp	0x1306	; 0x1306 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DDR>:
#include <avr/io.h>
//**************************************************************************************************************************************
//**************************************************************************************************************************************
void  DDR(uint8 Port,uint8 Pin,uint8 State)
{
	switch(Port)
      92:	81 30       	cpi	r24, 0x01	; 1
      94:	51 f1       	breq	.+84     	; 0xea <DDR+0x58>
      96:	81 30       	cpi	r24, 0x01	; 1
      98:	28 f0       	brcs	.+10     	; 0xa4 <DDR+0x12>
      9a:	82 30       	cpi	r24, 0x02	; 2
      9c:	b9 f1       	breq	.+110    	; 0x10c <DDR+0x7a>
      9e:	83 30       	cpi	r24, 0x03	; 3
      a0:	99 f0       	breq	.+38     	; 0xc8 <DDR+0x36>
      a2:	08 95       	ret
	{
			case PA:
				if (Pin==total)
      a4:	68 30       	cpi	r22, 0x08	; 8
      a6:	09 f4       	brne	.+2      	; 0xaa <DDR+0x18>
      a8:	46 c0       	rjmp	.+140    	; 0x136 <DDR+0xa4>

					}
				}
				else
				{
					if(State == OUTPUT)
      aa:	41 30       	cpi	r20, 0x01	; 1
      ac:	09 f4       	brne	.+2      	; 0xb0 <DDR+0x1e>
      ae:	5b c0       	rjmp	.+182    	; 0x166 <DDR+0xd4>
					{
						SET_BIT(DDRA,Pin);
					}
					else
					{
						CLEAR_BIT(DDRA,Pin);
      b0:	2a b3       	in	r18, 0x1a	; 26
      b2:	81 e0       	ldi	r24, 0x01	; 1
      b4:	90 e0       	ldi	r25, 0x00	; 0
      b6:	02 c0       	rjmp	.+4      	; 0xbc <DDR+0x2a>
      b8:	88 0f       	add	r24, r24
      ba:	99 1f       	adc	r25, r25
      bc:	6a 95       	dec	r22
      be:	e2 f7       	brpl	.-8      	; 0xb8 <DDR+0x26>
      c0:	80 95       	com	r24
      c2:	82 23       	and	r24, r18
      c4:	8a bb       	out	0x1a, r24	; 26
      c6:	08 95       	ret
					}
				}
				break;
		//###############################################################################################################################
			case PD:
				if (Pin==total)
      c8:	68 30       	cpi	r22, 0x08	; 8
      ca:	89 f1       	breq	.+98     	; 0x12e <DDR+0x9c>
						DDRD=0x00;

					}				}
				else
				{
					if(State == OUTPUT)
      cc:	41 30       	cpi	r20, 0x01	; 1
      ce:	09 f4       	brne	.+2      	; 0xd2 <DDR+0x40>
      d0:	6b c0       	rjmp	.+214    	; 0x1a8 <DDR+0x116>
					{
						SET_BIT(DDRD,Pin);
					}
					else
					{
						CLEAR_BIT(DDRD,Pin);
      d2:	21 b3       	in	r18, 0x11	; 17
      d4:	81 e0       	ldi	r24, 0x01	; 1
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	02 c0       	rjmp	.+4      	; 0xde <DDR+0x4c>
      da:	88 0f       	add	r24, r24
      dc:	99 1f       	adc	r25, r25
      de:	6a 95       	dec	r22
      e0:	e2 f7       	brpl	.-8      	; 0xda <DDR+0x48>
      e2:	80 95       	com	r24
      e4:	82 23       	and	r24, r18
      e6:	81 bb       	out	0x11, r24	; 17
      e8:	08 95       	ret
					}
				}
				break;
		//###############################################################################################################################
			case PB:
				if (Pin==total)
      ea:	68 30       	cpi	r22, 0x08	; 8
      ec:	61 f1       	breq	.+88     	; 0x146 <DDR+0xb4>

					}
				}
				else
				{
					if(State == OUTPUT)
      ee:	41 30       	cpi	r20, 0x01	; 1
      f0:	09 f4       	brne	.+2      	; 0xf4 <DDR+0x62>
      f2:	44 c0       	rjmp	.+136    	; 0x17c <DDR+0xea>
					{
						SET_BIT(DDRB,Pin);
					}
					else
					{
						CLEAR_BIT(DDRB,Pin);
      f4:	27 b3       	in	r18, 0x17	; 23
      f6:	81 e0       	ldi	r24, 0x01	; 1
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	02 c0       	rjmp	.+4      	; 0x100 <DDR+0x6e>
      fc:	88 0f       	add	r24, r24
      fe:	99 1f       	adc	r25, r25
     100:	6a 95       	dec	r22
     102:	e2 f7       	brpl	.-8      	; 0xfc <DDR+0x6a>
     104:	80 95       	com	r24
     106:	82 23       	and	r24, r18
     108:	87 bb       	out	0x17, r24	; 23
     10a:	08 95       	ret
				}
				break;
		//###############################################################################################################################

			case PC:
				if (Pin==total)
     10c:	68 30       	cpi	r22, 0x08	; 8
     10e:	b9 f0       	breq	.+46     	; 0x13e <DDR+0xac>

					}
				}
				else
				{
					if(State == OUTPUT)
     110:	41 30       	cpi	r20, 0x01	; 1
     112:	09 f4       	brne	.+2      	; 0x116 <DDR+0x84>
     114:	3e c0       	rjmp	.+124    	; 0x192 <DDR+0x100>
					{
						SET_BIT(DDRC,Pin);
					}
					else
					{
						CLEAR_BIT(DDRC,Pin);
     116:	24 b3       	in	r18, 0x14	; 20
     118:	81 e0       	ldi	r24, 0x01	; 1
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	02 c0       	rjmp	.+4      	; 0x122 <DDR+0x90>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	6a 95       	dec	r22
     124:	e2 f7       	brpl	.-8      	; 0x11e <DDR+0x8c>
     126:	80 95       	com	r24
     128:	82 23       	and	r24, r18
     12a:	84 bb       	out	0x14, r24	; 20
     12c:	08 95       	ret
				break;
		//###############################################################################################################################
			case PD:
				if (Pin==total)
				{
					if(State==OUTPUT)
     12e:	41 30       	cpi	r20, 0x01	; 1
     130:	89 f0       	breq	.+34     	; 0x154 <DDR+0xc2>
					{
						DDRD=0xFF;
					}
					else
					{
						DDRD=0x00;
     132:	11 ba       	out	0x11, r1	; 17
     134:	08 95       	ret
	switch(Port)
	{
			case PA:
				if (Pin==total)
				{
					if(State==OUTPUT)
     136:	41 30       	cpi	r20, 0x01	; 1
     138:	51 f0       	breq	.+20     	; 0x14e <DDR+0xbc>
					{
						DDRA=0xFF;
					}
					else
					{
						DDRA=0x00;
     13a:	1a ba       	out	0x1a, r1	; 26
     13c:	08 95       	ret
		//###############################################################################################################################

			case PC:
				if (Pin==total)
				{
					if(State==OUTPUT)
     13e:	41 30       	cpi	r20, 0x01	; 1
     140:	79 f0       	breq	.+30     	; 0x160 <DDR+0xce>
					{
						DDRC=0xFF;
					}
					else
					{
						DDRC=0x00;
     142:	14 ba       	out	0x14, r1	; 20
     144:	08 95       	ret
				break;
		//###############################################################################################################################
			case PB:
				if (Pin==total)
				{
					if(State==OUTPUT)
     146:	41 30       	cpi	r20, 0x01	; 1
     148:	41 f0       	breq	.+16     	; 0x15a <DDR+0xc8>
					{
						DDRB=0xFF;
					}
					else
					{
						DDRB=0x00;
     14a:	17 ba       	out	0x17, r1	; 23
     14c:	08 95       	ret
			case PA:
				if (Pin==total)
				{
					if(State==OUTPUT)
					{
						DDRA=0xFF;
     14e:	8f ef       	ldi	r24, 0xFF	; 255
     150:	8a bb       	out	0x1a, r24	; 26
     152:	08 95       	ret
			case PD:
				if (Pin==total)
				{
					if(State==OUTPUT)
					{
						DDRD=0xFF;
     154:	8f ef       	ldi	r24, 0xFF	; 255
     156:	81 bb       	out	0x11, r24	; 17
     158:	08 95       	ret
			case PB:
				if (Pin==total)
				{
					if(State==OUTPUT)
					{
						DDRB=0xFF;
     15a:	8f ef       	ldi	r24, 0xFF	; 255
     15c:	87 bb       	out	0x17, r24	; 23
     15e:	08 95       	ret
			case PC:
				if (Pin==total)
				{
					if(State==OUTPUT)
					{
						DDRC=0xFF;
     160:	8f ef       	ldi	r24, 0xFF	; 255
     162:	84 bb       	out	0x14, r24	; 20
     164:	08 95       	ret
				}
				else
				{
					if(State == OUTPUT)
					{
						SET_BIT(DDRA,Pin);
     166:	2a b3       	in	r18, 0x1a	; 26
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	02 c0       	rjmp	.+4      	; 0x172 <DDR+0xe0>
     16e:	88 0f       	add	r24, r24
     170:	99 1f       	adc	r25, r25
     172:	6a 95       	dec	r22
     174:	e2 f7       	brpl	.-8      	; 0x16e <DDR+0xdc>
     176:	28 2b       	or	r18, r24
     178:	2a bb       	out	0x1a, r18	; 26
     17a:	08 95       	ret
				}
				else
				{
					if(State == OUTPUT)
					{
						SET_BIT(DDRB,Pin);
     17c:	27 b3       	in	r18, 0x17	; 23
     17e:	81 e0       	ldi	r24, 0x01	; 1
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	02 c0       	rjmp	.+4      	; 0x188 <DDR+0xf6>
     184:	88 0f       	add	r24, r24
     186:	99 1f       	adc	r25, r25
     188:	6a 95       	dec	r22
     18a:	e2 f7       	brpl	.-8      	; 0x184 <DDR+0xf2>
     18c:	28 2b       	or	r18, r24
     18e:	27 bb       	out	0x17, r18	; 23
     190:	08 95       	ret
				}
				else
				{
					if(State == OUTPUT)
					{
						SET_BIT(DDRC,Pin);
     192:	24 b3       	in	r18, 0x14	; 20
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	02 c0       	rjmp	.+4      	; 0x19e <DDR+0x10c>
     19a:	88 0f       	add	r24, r24
     19c:	99 1f       	adc	r25, r25
     19e:	6a 95       	dec	r22
     1a0:	e2 f7       	brpl	.-8      	; 0x19a <DDR+0x108>
     1a2:	28 2b       	or	r18, r24
     1a4:	24 bb       	out	0x14, r18	; 20
     1a6:	08 95       	ret
					}				}
				else
				{
					if(State == OUTPUT)
					{
						SET_BIT(DDRD,Pin);
     1a8:	21 b3       	in	r18, 0x11	; 17
     1aa:	81 e0       	ldi	r24, 0x01	; 1
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DDR+0x122>
     1b0:	88 0f       	add	r24, r24
     1b2:	99 1f       	adc	r25, r25
     1b4:	6a 95       	dec	r22
     1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DDR+0x11e>
     1b8:	28 2b       	or	r18, r24
     1ba:	21 bb       	out	0x11, r18	; 17
     1bc:	08 95       	ret

000001be <PORT>:
}
//**************************************************************************************************************************************
//**************************************************************************************************************************************
void  PORT (uint8 Port,uint8 Pin,uint8 data)
{
	switch(Port)
     1be:	81 30       	cpi	r24, 0x01	; 1
     1c0:	51 f1       	breq	.+84     	; 0x216 <PORT+0x58>
     1c2:	81 30       	cpi	r24, 0x01	; 1
     1c4:	28 f0       	brcs	.+10     	; 0x1d0 <PORT+0x12>
     1c6:	82 30       	cpi	r24, 0x02	; 2
     1c8:	b9 f1       	breq	.+110    	; 0x238 <PORT+0x7a>
     1ca:	83 30       	cpi	r24, 0x03	; 3
     1cc:	99 f0       	breq	.+38     	; 0x1f4 <PORT+0x36>
     1ce:	08 95       	ret
	{
			case PA:
				if (Pin==total)
     1d0:	68 30       	cpi	r22, 0x08	; 8
     1d2:	09 f4       	brne	.+2      	; 0x1d6 <PORT+0x18>
     1d4:	46 c0       	rjmp	.+140    	; 0x262 <PORT+0xa4>

					}
				}
				else
				{
					if(data == LOGIC_HIGH)
     1d6:	41 30       	cpi	r20, 0x01	; 1
     1d8:	09 f4       	brne	.+2      	; 0x1dc <PORT+0x1e>
     1da:	5b c0       	rjmp	.+182    	; 0x292 <PORT+0xd4>
					{
						SET_BIT(PORTA,Pin);
					}
					else
					{
						CLEAR_BIT(PORTA,Pin);
     1dc:	2b b3       	in	r18, 0x1b	; 27
     1de:	81 e0       	ldi	r24, 0x01	; 1
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <PORT+0x2a>
     1e4:	88 0f       	add	r24, r24
     1e6:	99 1f       	adc	r25, r25
     1e8:	6a 95       	dec	r22
     1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <PORT+0x26>
     1ec:	80 95       	com	r24
     1ee:	82 23       	and	r24, r18
     1f0:	8b bb       	out	0x1b, r24	; 27
     1f2:	08 95       	ret
					}
				}
				break;
//###############################################################################################################################
			case PD:
				if (Pin==total)
     1f4:	68 30       	cpi	r22, 0x08	; 8
     1f6:	89 f1       	breq	.+98     	; 0x25a <PORT+0x9c>

							}
				}
				else
				{
					if(data == LOGIC_HIGH)
     1f8:	41 30       	cpi	r20, 0x01	; 1
     1fa:	09 f4       	brne	.+2      	; 0x1fe <PORT+0x40>
     1fc:	6b c0       	rjmp	.+214    	; 0x2d4 <PORT+0x116>
					{
						SET_BIT(PORTD,Pin);
					}
					else
					{
						CLEAR_BIT(PORTD,Pin);
     1fe:	22 b3       	in	r18, 0x12	; 18
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	02 c0       	rjmp	.+4      	; 0x20a <PORT+0x4c>
     206:	88 0f       	add	r24, r24
     208:	99 1f       	adc	r25, r25
     20a:	6a 95       	dec	r22
     20c:	e2 f7       	brpl	.-8      	; 0x206 <PORT+0x48>
     20e:	80 95       	com	r24
     210:	82 23       	and	r24, r18
     212:	82 bb       	out	0x12, r24	; 18
     214:	08 95       	ret
					}
				}
				break;
//###############################################################################################################################
			case PB:
				if (Pin==total)
     216:	68 30       	cpi	r22, 0x08	; 8
     218:	61 f1       	breq	.+88     	; 0x272 <PORT+0xb4>

							}
				}
				else
				{
					if(data == LOGIC_HIGH)
     21a:	41 30       	cpi	r20, 0x01	; 1
     21c:	09 f4       	brne	.+2      	; 0x220 <PORT+0x62>
     21e:	44 c0       	rjmp	.+136    	; 0x2a8 <PORT+0xea>
					{
						SET_BIT(PORTB,Pin);
					}
					else
					{
						CLEAR_BIT(PORTB,Pin);
     220:	28 b3       	in	r18, 0x18	; 24
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	02 c0       	rjmp	.+4      	; 0x22c <PORT+0x6e>
     228:	88 0f       	add	r24, r24
     22a:	99 1f       	adc	r25, r25
     22c:	6a 95       	dec	r22
     22e:	e2 f7       	brpl	.-8      	; 0x228 <PORT+0x6a>
     230:	80 95       	com	r24
     232:	82 23       	and	r24, r18
     234:	88 bb       	out	0x18, r24	; 24
     236:	08 95       	ret
					}
				}
				break;
//###############################################################################################################################
			case PC:
				if (Pin==total)
     238:	68 30       	cpi	r22, 0x08	; 8
     23a:	b9 f0       	breq	.+46     	; 0x26a <PORT+0xac>

							}
				}
				else
				{
					if(data == LOGIC_HIGH)
     23c:	41 30       	cpi	r20, 0x01	; 1
     23e:	09 f4       	brne	.+2      	; 0x242 <PORT+0x84>
     240:	3e c0       	rjmp	.+124    	; 0x2be <PORT+0x100>
					{
						SET_BIT(PORTC,Pin);
					}
					else
					{
						CLEAR_BIT(PORTC,Pin);
     242:	25 b3       	in	r18, 0x15	; 21
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	02 c0       	rjmp	.+4      	; 0x24e <PORT+0x90>
     24a:	88 0f       	add	r24, r24
     24c:	99 1f       	adc	r25, r25
     24e:	6a 95       	dec	r22
     250:	e2 f7       	brpl	.-8      	; 0x24a <PORT+0x8c>
     252:	80 95       	com	r24
     254:	82 23       	and	r24, r18
     256:	85 bb       	out	0x15, r24	; 21
     258:	08 95       	ret
//###############################################################################################################################
			case PD:
				if (Pin==total)
				{

					if(data==ON)
     25a:	41 30       	cpi	r20, 0x01	; 1
     25c:	89 f0       	breq	.+34     	; 0x280 <PORT+0xc2>
							{
								PORTD=0xFF;
							}
							else
							{
								PORTD=0x00;
     25e:	12 ba       	out	0x12, r1	; 18
     260:	08 95       	ret
	{
			case PA:
				if (Pin==total)
				{

					if(data==ON)
     262:	41 30       	cpi	r20, 0x01	; 1
     264:	51 f0       	breq	.+20     	; 0x27a <PORT+0xbc>
					{
						PORTA=0xFF;
					}
					else
					{
						PORTA=0x00;
     266:	1b ba       	out	0x1b, r1	; 27
     268:	08 95       	ret
//###############################################################################################################################
			case PC:
				if (Pin==total)
				{

					if(data==ON)
     26a:	41 30       	cpi	r20, 0x01	; 1
     26c:	79 f0       	breq	.+30     	; 0x28c <PORT+0xce>
							{
								PORTC=0xFF;
							}
							else
							{
								PORTC=0x00;
     26e:	15 ba       	out	0x15, r1	; 21
     270:	08 95       	ret
//###############################################################################################################################
			case PB:
				if (Pin==total)
				{

					if(data==ON)
     272:	41 30       	cpi	r20, 0x01	; 1
     274:	41 f0       	breq	.+16     	; 0x286 <PORT+0xc8>
							{
								PORTB=0xFF;
							}
							else
							{
								PORTB=0x00;
     276:	18 ba       	out	0x18, r1	; 24
     278:	08 95       	ret
				if (Pin==total)
				{

					if(data==ON)
					{
						PORTA=0xFF;
     27a:	8f ef       	ldi	r24, 0xFF	; 255
     27c:	8b bb       	out	0x1b, r24	; 27
     27e:	08 95       	ret
				if (Pin==total)
				{

					if(data==ON)
							{
								PORTD=0xFF;
     280:	8f ef       	ldi	r24, 0xFF	; 255
     282:	82 bb       	out	0x12, r24	; 18
     284:	08 95       	ret
				if (Pin==total)
				{

					if(data==ON)
							{
								PORTB=0xFF;
     286:	8f ef       	ldi	r24, 0xFF	; 255
     288:	88 bb       	out	0x18, r24	; 24
     28a:	08 95       	ret
				if (Pin==total)
				{

					if(data==ON)
							{
								PORTC=0xFF;
     28c:	8f ef       	ldi	r24, 0xFF	; 255
     28e:	85 bb       	out	0x15, r24	; 21
     290:	08 95       	ret
				}
				else
				{
					if(data == LOGIC_HIGH)
					{
						SET_BIT(PORTA,Pin);
     292:	2b b3       	in	r18, 0x1b	; 27
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	02 c0       	rjmp	.+4      	; 0x29e <PORT+0xe0>
     29a:	88 0f       	add	r24, r24
     29c:	99 1f       	adc	r25, r25
     29e:	6a 95       	dec	r22
     2a0:	e2 f7       	brpl	.-8      	; 0x29a <PORT+0xdc>
     2a2:	28 2b       	or	r18, r24
     2a4:	2b bb       	out	0x1b, r18	; 27
     2a6:	08 95       	ret
				}
				else
				{
					if(data == LOGIC_HIGH)
					{
						SET_BIT(PORTB,Pin);
     2a8:	28 b3       	in	r18, 0x18	; 24
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <PORT+0xf6>
     2b0:	88 0f       	add	r24, r24
     2b2:	99 1f       	adc	r25, r25
     2b4:	6a 95       	dec	r22
     2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <PORT+0xf2>
     2b8:	28 2b       	or	r18, r24
     2ba:	28 bb       	out	0x18, r18	; 24
     2bc:	08 95       	ret
				}
				else
				{
					if(data == LOGIC_HIGH)
					{
						SET_BIT(PORTC,Pin);
     2be:	25 b3       	in	r18, 0x15	; 21
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	02 c0       	rjmp	.+4      	; 0x2ca <PORT+0x10c>
     2c6:	88 0f       	add	r24, r24
     2c8:	99 1f       	adc	r25, r25
     2ca:	6a 95       	dec	r22
     2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <PORT+0x108>
     2ce:	28 2b       	or	r18, r24
     2d0:	25 bb       	out	0x15, r18	; 21
     2d2:	08 95       	ret
				}
				else
				{
					if(data == LOGIC_HIGH)
					{
						SET_BIT(PORTD,Pin);
     2d4:	22 b3       	in	r18, 0x12	; 18
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	02 c0       	rjmp	.+4      	; 0x2e0 <PORT+0x122>
     2dc:	88 0f       	add	r24, r24
     2de:	99 1f       	adc	r25, r25
     2e0:	6a 95       	dec	r22
     2e2:	e2 f7       	brpl	.-8      	; 0x2dc <PORT+0x11e>
     2e4:	28 2b       	or	r18, r24
     2e6:	22 bb       	out	0x12, r18	; 18
     2e8:	08 95       	ret

000002ea <PIN>:
	}
}
//**************************************************************************************************************************************
//**************************************************************************************************************************************
uint8 PIN  (uint8 Port,uint8 Pin)
{
     2ea:	df 93       	push	r29
     2ec:	cf 93       	push	r28
     2ee:	0f 92       	push	r0
     2f0:	cd b7       	in	r28, 0x3d	; 61
     2f2:	de b7       	in	r29, 0x3e	; 62
	volatile uint8 RET;
	switch(Port)
     2f4:	81 30       	cpi	r24, 0x01	; 1
     2f6:	41 f1       	breq	.+80     	; 0x348 <PIN+0x5e>
     2f8:	81 30       	cpi	r24, 0x01	; 1
     2fa:	48 f0       	brcs	.+18     	; 0x30e <PIN+0x24>
     2fc:	82 30       	cpi	r24, 0x02	; 2
     2fe:	41 f1       	breq	.+80     	; 0x350 <PIN+0x66>
     300:	83 30       	cpi	r24, 0x03	; 3
     302:	49 f0       	breq	.+18     	; 0x316 <PIN+0x2c>
		{
			RET=GET_BIT(PIND,Pin);
		}
		break;
	}
	return RET;
     304:	89 81       	ldd	r24, Y+1	; 0x01
}
     306:	0f 90       	pop	r0
     308:	cf 91       	pop	r28
     30a:	df 91       	pop	r29
     30c:	08 95       	ret
{
	volatile uint8 RET;
	switch(Port)
	{
	case PA:
		if(Pin==total)
     30e:	68 30       	cpi	r22, 0x08	; 8
     310:	49 f1       	breq	.+82     	; 0x364 <PIN+0x7a>
		{
			RET=PINA;
		}
		else
		{
			RET=GET_BIT(PINA,Pin);
     312:	29 b3       	in	r18, 0x19	; 25
     314:	03 c0       	rjmp	.+6      	; 0x31c <PIN+0x32>
		{
			RET=GET_BIT(PINC,Pin);
		}
		break;
	case PD:
		if(Pin==total)
     316:	68 30       	cpi	r22, 0x08	; 8
     318:	41 f1       	breq	.+80     	; 0x36a <PIN+0x80>
		{
			RET=PIND;
		}
		else
		{
			RET=GET_BIT(PIND,Pin);
     31a:	20 b3       	in	r18, 0x10	; 16
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	06 2e       	mov	r0, r22
     322:	02 c0       	rjmp	.+4      	; 0x328 <PIN+0x3e>
     324:	88 0f       	add	r24, r24
     326:	99 1f       	adc	r25, r25
     328:	0a 94       	dec	r0
     32a:	e2 f7       	brpl	.-8      	; 0x324 <PIN+0x3a>
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	82 23       	and	r24, r18
     330:	93 23       	and	r25, r19
     332:	02 c0       	rjmp	.+4      	; 0x338 <PIN+0x4e>
     334:	95 95       	asr	r25
     336:	87 95       	ror	r24
     338:	6a 95       	dec	r22
     33a:	e2 f7       	brpl	.-8      	; 0x334 <PIN+0x4a>
     33c:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
	}
	return RET;
     33e:	89 81       	ldd	r24, Y+1	; 0x01
}
     340:	0f 90       	pop	r0
     342:	cf 91       	pop	r28
     344:	df 91       	pop	r29
     346:	08 95       	ret
		{
			RET=GET_BIT(PINA,Pin);
		}
		break;
	case PB:
		if(Pin==total)
     348:	68 30       	cpi	r22, 0x08	; 8
     34a:	49 f0       	breq	.+18     	; 0x35e <PIN+0x74>
		{
			RET=PINB;
		}
		else
		{
			RET=GET_BIT(PINB,Pin);  //PINB&(1<<pi);
     34c:	26 b3       	in	r18, 0x16	; 22
     34e:	e6 cf       	rjmp	.-52     	; 0x31c <PIN+0x32>
		}
		break;
	case PC:
		if(Pin==total)
     350:	68 30       	cpi	r22, 0x08	; 8
     352:	11 f0       	breq	.+4      	; 0x358 <PIN+0x6e>
		{
			RET=PINC;
		}
		else
		{
			RET=GET_BIT(PINC,Pin);
     354:	23 b3       	in	r18, 0x13	; 19
     356:	e2 cf       	rjmp	.-60     	; 0x31c <PIN+0x32>
		}
		break;
	case PC:
		if(Pin==total)
		{
			RET=PINC;
     358:	83 b3       	in	r24, 0x13	; 19
     35a:	89 83       	std	Y+1, r24	; 0x01
     35c:	d3 cf       	rjmp	.-90     	; 0x304 <PIN+0x1a>
		}
		break;
	case PB:
		if(Pin==total)
		{
			RET=PINB;
     35e:	86 b3       	in	r24, 0x16	; 22
     360:	89 83       	std	Y+1, r24	; 0x01
     362:	d0 cf       	rjmp	.-96     	; 0x304 <PIN+0x1a>
	switch(Port)
	{
	case PA:
		if(Pin==total)
		{
			RET=PINA;
     364:	89 b3       	in	r24, 0x19	; 25
     366:	89 83       	std	Y+1, r24	; 0x01
     368:	cd cf       	rjmp	.-102    	; 0x304 <PIN+0x1a>
		}
		break;
	case PD:
		if(Pin==total)
		{
			RET=PIND;
     36a:	80 b3       	in	r24, 0x10	; 16
     36c:	89 83       	std	Y+1, r24	; 0x01
     36e:	ca cf       	rjmp	.-108    	; 0x304 <PIN+0x1a>

00000370 <KEYPAD>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD(void)
{
     370:	ff 92       	push	r15
     372:	0f 93       	push	r16
     374:	1f 93       	push	r17
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
	uint8 col,row;
	DDR(KEYPAD_ROW_PORT, KEYPAD_FIRST_ROW_PIN, INPUT);
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	60 e0       	ldi	r22, 0x00	; 0
     37e:	40 e0       	ldi	r20, 0x00	; 0
     380:	0e 94 49 00 	call	0x92	; 0x92 <DDR>
	DDR(KEYPAD_ROW_PORT, KEYPAD_FIRST_ROW_PIN+1, INPUT);
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	61 e0       	ldi	r22, 0x01	; 1
     388:	40 e0       	ldi	r20, 0x00	; 0
     38a:	0e 94 49 00 	call	0x92	; 0x92 <DDR>
	DDR(KEYPAD_ROW_PORT, KEYPAD_FIRST_ROW_PIN+2, INPUT);
     38e:	81 e0       	ldi	r24, 0x01	; 1
     390:	62 e0       	ldi	r22, 0x02	; 2
     392:	40 e0       	ldi	r20, 0x00	; 0
     394:	0e 94 49 00 	call	0x92	; 0x92 <DDR>
	DDR(KEYPAD_ROW_PORT, KEYPAD_FIRST_ROW_PIN+3, INPUT);
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	63 e0       	ldi	r22, 0x03	; 3
     39c:	40 e0       	ldi	r20, 0x00	; 0
     39e:	0e 94 49 00 	call	0x92	; 0x92 <DDR>

	DDR(KEYPAD_COL_PORT, KEYPAD_FIRST_COL_PIN, INPUT);
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	64 e0       	ldi	r22, 0x04	; 4
     3a6:	40 e0       	ldi	r20, 0x00	; 0
     3a8:	0e 94 49 00 	call	0x92	; 0x92 <DDR>
	DDR(KEYPAD_COL_PORT, KEYPAD_FIRST_COL_PIN+1, INPUT);
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	65 e0       	ldi	r22, 0x05	; 5
     3b0:	40 e0       	ldi	r20, 0x00	; 0
     3b2:	0e 94 49 00 	call	0x92	; 0x92 <DDR>
	DDR(KEYPAD_COL_PORT, KEYPAD_FIRST_COL_PIN+2, INPUT);
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	66 e0       	ldi	r22, 0x06	; 6
     3ba:	40 e0       	ldi	r20, 0x00	; 0
     3bc:	0e 94 49 00 	call	0x92	; 0x92 <DDR>
	DDR(KEYPAD_COL_PORT, KEYPAD_FIRST_COL_PIN+3, INPUT);
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	67 e0       	ldi	r22, 0x07	; 7
     3c4:	40 e0       	ldi	r20, 0x00	; 0
     3c6:	0e 94 49 00 	call	0x92	; 0x92 <DDR>
     3ca:	00 e0       	ldi	r16, 0x00	; 0
     3cc:	ff 24       	eor	r15, r15
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3ce:	c0 e1       	ldi	r28, 0x10	; 16
     3d0:	d7 e2       	ldi	r29, 0x27	; 39
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			DDR(KEYPAD_ROW_PORT,KEYPAD_FIRST_ROW_PIN+row,OUTPUT);
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	60 2f       	mov	r22, r16
     3d6:	41 e0       	ldi	r20, 0x01	; 1
     3d8:	0e 94 49 00 	call	0x92	; 0x92 <DDR>

			/* Set/Clear the row output pin */
			PORT(KEYPAD_ROW_PORT, KEYPAD_FIRST_ROW_PIN+row, KEYPAD_BUTTON_PRESSED);
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	60 2f       	mov	r22, r16
     3e0:	40 e0       	ldi	r20, 0x00	; 0
     3e2:	0e 94 df 00 	call	0x1be	; 0x1be <PORT>
     3e6:	10 e0       	ldi	r17, 0x00	; 0

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
			{
				/* Check if the switch is pressed in this column */
				if(PIN(KEYPAD_COL_PORT,KEYPAD_FIRST_COL_PIN+col) == KEYPAD_BUTTON_PRESSED)
     3e8:	61 2f       	mov	r22, r17
     3ea:	6c 5f       	subi	r22, 0xFC	; 252
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	0e 94 75 01 	call	0x2ea	; 0x2ea <PIN>
     3f2:	88 23       	and	r24, r24
     3f4:	91 f0       	breq	.+36     	; 0x41a <KEYPAD+0xaa>
			DDR(KEYPAD_ROW_PORT,KEYPAD_FIRST_ROW_PIN+row,OUTPUT);

			/* Set/Clear the row output pin */
			PORT(KEYPAD_ROW_PORT, KEYPAD_FIRST_ROW_PIN+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
     3f6:	1f 5f       	subi	r17, 0xFF	; 255
     3f8:	14 30       	cpi	r17, 0x04	; 4
     3fa:	b1 f7       	brne	.-20     	; 0x3e8 <KEYPAD+0x78>
				{

							  return  K_P_4X4((row*KEYPAD_NUM_COLS)+col+1);
				}
			}
			DDR(KEYPAD_ROW_PORT,(KEYPAD_FIRST_ROW_PIN)+row,INPUT);
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	60 2f       	mov	r22, r16
     400:	40 e0       	ldi	r20, 0x00	; 0
     402:	0e 94 49 00 	call	0x92	; 0x92 <DDR>
     406:	ce 01       	movw	r24, r28
     408:	01 97       	sbiw	r24, 0x01	; 1
     40a:	f1 f7       	brne	.-4      	; 0x408 <KEYPAD+0x98>
	DDR(KEYPAD_COL_PORT, KEYPAD_FIRST_COL_PIN+2, INPUT);
	DDR(KEYPAD_COL_PORT, KEYPAD_FIRST_COL_PIN+3, INPUT);

	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
     40c:	0f 5f       	subi	r16, 0xFF	; 255
     40e:	04 30       	cpi	r16, 0x04	; 4
     410:	08 f4       	brcc	.+2      	; 0x414 <KEYPAD+0xa4>
     412:	4b c0       	rjmp	.+150    	; 0x4aa <KEYPAD+0x13a>
     414:	00 e0       	ldi	r16, 0x00	; 0
     416:	ff 24       	eor	r15, r15
     418:	dc cf       	rjmp	.-72     	; 0x3d2 <KEYPAD+0x62>
			{
				/* Check if the switch is pressed in this column */
				if(PIN(KEYPAD_COL_PORT,KEYPAD_FIRST_COL_PIN+col) == KEYPAD_BUTTON_PRESSED)
				{

							  return  K_P_4X4((row*KEYPAD_NUM_COLS)+col+1);
     41a:	1f 5f       	subi	r17, 0xFF	; 255
     41c:	8f 2d       	mov	r24, r15
     41e:	88 0f       	add	r24, r24
     420:	88 0f       	add	r24, r24
     422:	81 0f       	add	r24, r17
}

static uint8 K_P_4X4(uint8 button_number)
{
	uint8 keypad_button = 0;
	switch(button_number)
     424:	88 30       	cpi	r24, 0x08	; 8
     426:	79 f1       	breq	.+94     	; 0x486 <KEYPAD+0x116>
     428:	89 30       	cpi	r24, 0x09	; 9
     42a:	78 f0       	brcs	.+30     	; 0x44a <KEYPAD+0xda>
     42c:	8c 30       	cpi	r24, 0x0C	; 12
     42e:	69 f1       	breq	.+90     	; 0x48a <KEYPAD+0x11a>
     430:	8d 30       	cpi	r24, 0x0D	; 13
     432:	a8 f4       	brcc	.+42     	; 0x45e <KEYPAD+0xee>
     434:	8a 30       	cpi	r24, 0x0A	; 10
     436:	29 f1       	breq	.+74     	; 0x482 <KEYPAD+0x112>
     438:	8b 30       	cpi	r24, 0x0B	; 11
     43a:	08 f1       	brcs	.+66     	; 0x47e <KEYPAD+0x10e>
     43c:	83 e0       	ldi	r24, 0x03	; 3
			}
			DDR(KEYPAD_ROW_PORT,(KEYPAD_FIRST_ROW_PIN)+row,INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}
}
     43e:	df 91       	pop	r29
     440:	cf 91       	pop	r28
     442:	1f 91       	pop	r17
     444:	0f 91       	pop	r16
     446:	ff 90       	pop	r15
     448:	08 95       	ret

static uint8 K_P_4X4(uint8 button_number)
{
	uint8 keypad_button = 0;
	switch(button_number)
     44a:	84 30       	cpi	r24, 0x04	; 4
     44c:	01 f1       	breq	.+64     	; 0x48e <KEYPAD+0x11e>
     44e:	85 30       	cpi	r24, 0x05	; 5
     450:	70 f0       	brcs	.+28     	; 0x46e <KEYPAD+0xfe>
     452:	86 30       	cpi	r24, 0x06	; 6
     454:	41 f1       	breq	.+80     	; 0x4a6 <KEYPAD+0x136>
     456:	87 30       	cpi	r24, 0x07	; 7
     458:	20 f1       	brcs	.+72     	; 0x4a2 <KEYPAD+0x132>
     45a:	86 e0       	ldi	r24, 0x06	; 6
     45c:	f0 cf       	rjmp	.-32     	; 0x43e <KEYPAD+0xce>
     45e:	8f 30       	cpi	r24, 0x0F	; 15
     460:	f1 f0       	breq	.+60     	; 0x49e <KEYPAD+0x12e>
     462:	80 31       	cpi	r24, 0x10	; 16
     464:	d1 f0       	breq	.+52     	; 0x49a <KEYPAD+0x12a>
     466:	8e 30       	cpi	r24, 0x0E	; 14
     468:	51 f7       	brne	.-44     	; 0x43e <KEYPAD+0xce>
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	e8 cf       	rjmp	.-48     	; 0x43e <KEYPAD+0xce>
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	91 f0       	breq	.+36     	; 0x496 <KEYPAD+0x126>
     472:	83 30       	cpi	r24, 0x03	; 3
     474:	70 f4       	brcc	.+28     	; 0x492 <KEYPAD+0x122>
     476:	81 30       	cpi	r24, 0x01	; 1
     478:	11 f7       	brne	.-60     	; 0x43e <KEYPAD+0xce>
     47a:	87 e0       	ldi	r24, 0x07	; 7
     47c:	e0 cf       	rjmp	.-64     	; 0x43e <KEYPAD+0xce>
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	de cf       	rjmp	.-68     	; 0x43e <KEYPAD+0xce>
     482:	82 e0       	ldi	r24, 0x02	; 2
     484:	dc cf       	rjmp	.-72     	; 0x43e <KEYPAD+0xce>
     486:	8a e2       	ldi	r24, 0x2A	; 42
     488:	da cf       	rjmp	.-76     	; 0x43e <KEYPAD+0xce>
     48a:	8d e2       	ldi	r24, 0x2D	; 45
     48c:	d8 cf       	rjmp	.-80     	; 0x43e <KEYPAD+0xce>
     48e:	85 e2       	ldi	r24, 0x25	; 37
     490:	d6 cf       	rjmp	.-84     	; 0x43e <KEYPAD+0xce>
     492:	89 e0       	ldi	r24, 0x09	; 9
     494:	d4 cf       	rjmp	.-88     	; 0x43e <KEYPAD+0xce>
     496:	88 e0       	ldi	r24, 0x08	; 8
     498:	d2 cf       	rjmp	.-92     	; 0x43e <KEYPAD+0xce>
     49a:	8b e2       	ldi	r24, 0x2B	; 43
     49c:	d0 cf       	rjmp	.-96     	; 0x43e <KEYPAD+0xce>
     49e:	8d e3       	ldi	r24, 0x3D	; 61
     4a0:	ce cf       	rjmp	.-100    	; 0x43e <KEYPAD+0xce>
     4a2:	84 e0       	ldi	r24, 0x04	; 4
     4a4:	cc cf       	rjmp	.-104    	; 0x43e <KEYPAD+0xce>
     4a6:	85 e0       	ldi	r24, 0x05	; 5
     4a8:	ca cf       	rjmp	.-108    	; 0x43e <KEYPAD+0xce>
	DDR(KEYPAD_ROW_PORT, KEYPAD_FIRST_ROW_PIN+3, INPUT);

	DDR(KEYPAD_COL_PORT, KEYPAD_FIRST_COL_PIN, INPUT);
	DDR(KEYPAD_COL_PORT, KEYPAD_FIRST_COL_PIN+1, INPUT);
	DDR(KEYPAD_COL_PORT, KEYPAD_FIRST_COL_PIN+2, INPUT);
	DDR(KEYPAD_COL_PORT, KEYPAD_FIRST_COL_PIN+3, INPUT);
     4aa:	f0 2e       	mov	r15, r16
     4ac:	92 cf       	rjmp	.-220    	; 0x3d2 <KEYPAD+0x62>

000004ae <LCD_CHAR>:
#endif
}
//===================================================================
// SEND CHARACHTER
void LCD_CHAR(uint8 charachter)
{
     4ae:	df 92       	push	r13
     4b0:	ef 92       	push	r14
     4b2:	ff 92       	push	r15
     4b4:	0f 93       	push	r16
     4b6:	1f 93       	push	r17
     4b8:	d8 2e       	mov	r13, r24

		PORT(RS_PORT,RS_PIN,ON);
     4ba:	82 e0       	ldi	r24, 0x02	; 2
     4bc:	66 e0       	ldi	r22, 0x06	; 6
     4be:	41 e0       	ldi	r20, 0x01	; 1
     4c0:	0e 94 df 00 	call	0x1be	; 0x1be <PORT>
     4c4:	e0 ed       	ldi	r30, 0xD0	; 208
     4c6:	ee 2e       	mov	r14, r30
     4c8:	e7 e0       	ldi	r30, 0x07	; 7
     4ca:	fe 2e       	mov	r15, r30
     4cc:	c7 01       	movw	r24, r14
     4ce:	01 97       	sbiw	r24, 0x01	; 1
     4d0:	f1 f7       	brne	.-4      	; 0x4ce <LCD_CHAR+0x20>
		_delay_ms(1);
		PORT(EN_PORT,EN_PIN,ON);
     4d2:	82 e0       	ldi	r24, 0x02	; 2
     4d4:	67 e0       	ldi	r22, 0x07	; 7
     4d6:	41 e0       	ldi	r20, 0x01	; 1
     4d8:	0e 94 df 00 	call	0x1be	; 0x1be <PORT>
     4dc:	c7 01       	movw	r24, r14
     4de:	01 97       	sbiw	r24, 0x01	; 1
     4e0:	f1 f7       	brne	.-4      	; 0x4de <LCD_CHAR+0x30>
		_delay_ms(1);

#if (LCD_TYPE==FOUR_BITS_MODE)
		PORT(D4_PORT,D4_PIN,GET_BIT(charachter,4) );
     4e2:	0d 2d       	mov	r16, r13
     4e4:	10 e0       	ldi	r17, 0x00	; 0
     4e6:	a8 01       	movw	r20, r16
     4e8:	40 71       	andi	r20, 0x10	; 16
     4ea:	50 70       	andi	r21, 0x00	; 0
     4ec:	55 95       	asr	r21
     4ee:	47 95       	ror	r20
     4f0:	55 95       	asr	r21
     4f2:	47 95       	ror	r20
     4f4:	55 95       	asr	r21
     4f6:	47 95       	ror	r20
     4f8:	55 95       	asr	r21
     4fa:	47 95       	ror	r20
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	64 e0       	ldi	r22, 0x04	; 4
     500:	0e 94 df 00 	call	0x1be	; 0x1be <PORT>
		PORT(D5_PORT,D5_PIN,GET_BIT(charachter,5) );
     504:	a8 01       	movw	r20, r16
     506:	40 72       	andi	r20, 0x20	; 32
     508:	50 70       	andi	r21, 0x00	; 0
     50a:	55 95       	asr	r21
     50c:	47 95       	ror	r20
     50e:	55 95       	asr	r21
     510:	47 95       	ror	r20
     512:	55 95       	asr	r21
     514:	47 95       	ror	r20
     516:	55 95       	asr	r21
     518:	47 95       	ror	r20
     51a:	55 95       	asr	r21
     51c:	47 95       	ror	r20
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	65 e0       	ldi	r22, 0x05	; 5
     522:	0e 94 df 00 	call	0x1be	; 0x1be <PORT>
		PORT(D6_PORT,D6_PIN,GET_BIT(charachter,6) );
     526:	a8 01       	movw	r20, r16
     528:	40 74       	andi	r20, 0x40	; 64
     52a:	50 70       	andi	r21, 0x00	; 0
     52c:	04 2e       	mov	r0, r20
     52e:	45 2f       	mov	r20, r21
     530:	00 0c       	add	r0, r0
     532:	44 1f       	adc	r20, r20
     534:	55 0b       	sbc	r21, r21
     536:	00 0c       	add	r0, r0
     538:	44 1f       	adc	r20, r20
     53a:	55 1f       	adc	r21, r21
     53c:	80 e0       	ldi	r24, 0x00	; 0
     53e:	66 e0       	ldi	r22, 0x06	; 6
     540:	0e 94 df 00 	call	0x1be	; 0x1be <PORT>
		PORT(D7_PORT,D7_PIN,GET_BIT(charachter,7) );
     544:	4d 2d       	mov	r20, r13
     546:	44 1f       	adc	r20, r20
     548:	44 27       	eor	r20, r20
     54a:	44 1f       	adc	r20, r20
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	67 e0       	ldi	r22, 0x07	; 7
     550:	0e 94 df 00 	call	0x1be	; 0x1be <PORT>
     554:	c7 01       	movw	r24, r14
     556:	01 97       	sbiw	r24, 0x01	; 1
     558:	f1 f7       	brne	.-4      	; 0x556 <LCD_CHAR+0xa8>

		_delay_ms(1);
		PORT(EN_PORT,EN_PIN,OFF);
     55a:	82 e0       	ldi	r24, 0x02	; 2
     55c:	67 e0       	ldi	r22, 0x07	; 7
     55e:	40 e0       	ldi	r20, 0x00	; 0
     560:	0e 94 df 00 	call	0x1be	; 0x1be <PORT>
     564:	c7 01       	movw	r24, r14
     566:	01 97       	sbiw	r24, 0x01	; 1
     568:	f1 f7       	brne	.-4      	; 0x566 <LCD_CHAR+0xb8>
		_delay_ms(1);
		PORT(EN_PORT,EN_PIN,ON);
     56a:	82 e0       	ldi	r24, 0x02	; 2
     56c:	67 e0       	ldi	r22, 0x07	; 7
     56e:	41 e0       	ldi	r20, 0x01	; 1
     570:	0e 94 df 00 	call	0x1be	; 0x1be <PORT>
     574:	c7 01       	movw	r24, r14
     576:	01 97       	sbiw	r24, 0x01	; 1
     578:	f1 f7       	brne	.-4      	; 0x576 <LCD_CHAR+0xc8>

		_delay_ms(1);


		PORT(D4_PORT,D4_PIN,GET_BIT(charachter,0) );
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	d8 22       	and	r13, r24
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	64 e0       	ldi	r22, 0x04	; 4
     582:	4d 2d       	mov	r20, r13
     584:	0e 94 df 00 	call	0x1be	; 0x1be <PORT>
		PORT(D5_PORT,D5_PIN,GET_BIT(charachter,1) );
     588:	a8 01       	movw	r20, r16
     58a:	42 70       	andi	r20, 0x02	; 2
     58c:	50 70       	andi	r21, 0x00	; 0
     58e:	55 95       	asr	r21
     590:	47 95       	ror	r20
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	65 e0       	ldi	r22, 0x05	; 5
     596:	0e 94 df 00 	call	0x1be	; 0x1be <PORT>
		PORT(D6_PORT,D6_PIN,GET_BIT(charachter,2) );
     59a:	a8 01       	movw	r20, r16
     59c:	44 70       	andi	r20, 0x04	; 4
     59e:	50 70       	andi	r21, 0x00	; 0
     5a0:	55 95       	asr	r21
     5a2:	47 95       	ror	r20
     5a4:	55 95       	asr	r21
     5a6:	47 95       	ror	r20
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	66 e0       	ldi	r22, 0x06	; 6
     5ac:	0e 94 df 00 	call	0x1be	; 0x1be <PORT>
		PORT(D7_PORT,D7_PIN,GET_BIT(charachter,3) );
     5b0:	08 70       	andi	r16, 0x08	; 8
     5b2:	10 70       	andi	r17, 0x00	; 0
     5b4:	15 95       	asr	r17
     5b6:	07 95       	ror	r16
     5b8:	15 95       	asr	r17
     5ba:	07 95       	ror	r16
     5bc:	15 95       	asr	r17
     5be:	07 95       	ror	r16
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	67 e0       	ldi	r22, 0x07	; 7
     5c4:	40 2f       	mov	r20, r16
     5c6:	0e 94 df 00 	call	0x1be	; 0x1be <PORT>
     5ca:	c7 01       	movw	r24, r14
     5cc:	01 97       	sbiw	r24, 0x01	; 1
     5ce:	f1 f7       	brne	.-4      	; 0x5cc <LCD_CHAR+0x11e>

		_delay_ms(1);
		PORT(EN_PORT,EN_PIN,OFF);
     5d0:	82 e0       	ldi	r24, 0x02	; 2
     5d2:	67 e0       	ldi	r22, 0x07	; 7
     5d4:	40 e0       	ldi	r20, 0x00	; 0
     5d6:	0e 94 df 00 	call	0x1be	; 0x1be <PORT>
     5da:	c7 01       	movw	r24, r14
     5dc:	01 97       	sbiw	r24, 0x01	; 1
     5de:	f1 f7       	brne	.-4      	; 0x5dc <LCD_CHAR+0x12e>
			_delay_ms(1);
			PORT(EN_PORT,EN_PIN,OFF);
			_delay_ms(1);

#endif
}
     5e0:	1f 91       	pop	r17
     5e2:	0f 91       	pop	r16
     5e4:	ff 90       	pop	r15
     5e6:	ef 90       	pop	r14
     5e8:	df 90       	pop	r13
     5ea:	08 95       	ret

000005ec <LCD_STR>:

//===================================================================
// SEND STRING
void LCD_STR(const char *ptr)
{
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	ec 01       	movw	r28, r24
	while((*ptr) != '\0')
     5f2:	88 81       	ld	r24, Y
     5f4:	88 23       	and	r24, r24
     5f6:	31 f0       	breq	.+12     	; 0x604 <LCD_STR+0x18>
	{
		LCD_CHAR(*ptr);
     5f8:	0e 94 57 02 	call	0x4ae	; 0x4ae <LCD_CHAR>
		ptr++;
     5fc:	21 96       	adiw	r28, 0x01	; 1

//===================================================================
// SEND STRING
void LCD_STR(const char *ptr)
{
	while((*ptr) != '\0')
     5fe:	88 81       	ld	r24, Y
     600:	88 23       	and	r24, r24
     602:	d1 f7       	brne	.-12     	; 0x5f8 <LCD_STR+0xc>
	{
		LCD_CHAR(*ptr);
		ptr++;
	}
}
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	08 95       	ret

0000060a <LCD_INT>:
{
	LCD_COMMAND(LCD_CLEAR_COMMAND);
}

void LCD_INT(int data)
{
     60a:	0f 93       	push	r16
     60c:	1f 93       	push	r17
     60e:	df 93       	push	r29
     610:	cf 93       	push	r28
     612:	cd b7       	in	r28, 0x3d	; 61
     614:	de b7       	in	r29, 0x3e	; 62
     616:	60 97       	sbiw	r28, 0x10	; 16
     618:	0f b6       	in	r0, 0x3f	; 63
     61a:	f8 94       	cli
     61c:	de bf       	out	0x3e, r29	; 62
     61e:	0f be       	out	0x3f, r0	; 63
     620:	cd bf       	out	0x3d, r28	; 61
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
     622:	8e 01       	movw	r16, r28
     624:	0f 5f       	subi	r16, 0xFF	; 255
     626:	1f 4f       	sbci	r17, 0xFF	; 255
     628:	b8 01       	movw	r22, r16
     62a:	4a e0       	ldi	r20, 0x0A	; 10
     62c:	50 e0       	ldi	r21, 0x00	; 0
     62e:	0e 94 3e 09 	call	0x127c	; 0x127c <itoa>
   LCD_STR(buff); /* Display the string */
     632:	c8 01       	movw	r24, r16
     634:	0e 94 f6 02 	call	0x5ec	; 0x5ec <LCD_STR>
}
     638:	60 96       	adiw	r28, 0x10	; 16
     63a:	0f b6       	in	r0, 0x3f	; 63
     63c:	f8 94       	cli
     63e:	de bf       	out	0x3e, r29	; 62
     640:	0f be       	out	0x3f, r0	; 63
     642:	cd bf       	out	0x3d, r28	; 61
     644:	cf 91       	pop	r28
     646:	df 91       	pop	r29
     648:	1f 91       	pop	r17
     64a:	0f 91       	pop	r16
     64c:	08 95       	ret

0000064e <LCD_COMMAND>:
			LCD_COMMAND(LCD_CURSOR_OFF);
			LCD_COMMAND(LCD_CLEAR_COMMAND);
}
// SEND COMMAND
void LCD_COMMAND(uint8 command)
{
     64e:	df 92       	push	r13
     650:	ef 92       	push	r14
     652:	ff 92       	push	r15
     654:	0f 93       	push	r16
     656:	1f 93       	push	r17
     658:	d8 2e       	mov	r13, r24
			PORT(RS_PORT,RS_PIN,OFF);
     65a:	82 e0       	ldi	r24, 0x02	; 2
     65c:	66 e0       	ldi	r22, 0x06	; 6
     65e:	40 e0       	ldi	r20, 0x00	; 0
     660:	0e 94 df 00 	call	0x1be	; 0x1be <PORT>
     664:	30 ed       	ldi	r19, 0xD0	; 208
     666:	e3 2e       	mov	r14, r19
     668:	37 e0       	ldi	r19, 0x07	; 7
     66a:	f3 2e       	mov	r15, r19
     66c:	c7 01       	movw	r24, r14
     66e:	01 97       	sbiw	r24, 0x01	; 1
     670:	f1 f7       	brne	.-4      	; 0x66e <LCD_COMMAND+0x20>
			_delay_ms(1);
			PORT(EN_PORT,EN_PIN,ON);
     672:	82 e0       	ldi	r24, 0x02	; 2
     674:	67 e0       	ldi	r22, 0x07	; 7
     676:	41 e0       	ldi	r20, 0x01	; 1
     678:	0e 94 df 00 	call	0x1be	; 0x1be <PORT>
     67c:	c7 01       	movw	r24, r14
     67e:	01 97       	sbiw	r24, 0x01	; 1
     680:	f1 f7       	brne	.-4      	; 0x67e <LCD_COMMAND+0x30>
			_delay_ms(1);

#if (LCD_TYPE==FOUR_BITS_MODE)

			PORT(D4_PORT,D4_PIN,GET_BIT(command,4) );
     682:	0d 2d       	mov	r16, r13
     684:	10 e0       	ldi	r17, 0x00	; 0
     686:	a8 01       	movw	r20, r16
     688:	40 71       	andi	r20, 0x10	; 16
     68a:	50 70       	andi	r21, 0x00	; 0
     68c:	55 95       	asr	r21
     68e:	47 95       	ror	r20
     690:	55 95       	asr	r21
     692:	47 95       	ror	r20
     694:	55 95       	asr	r21
     696:	47 95       	ror	r20
     698:	55 95       	asr	r21
     69a:	47 95       	ror	r20
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	64 e0       	ldi	r22, 0x04	; 4
     6a0:	0e 94 df 00 	call	0x1be	; 0x1be <PORT>
			PORT(D5_PORT,D5_PIN,GET_BIT(command,5) );
     6a4:	a8 01       	movw	r20, r16
     6a6:	40 72       	andi	r20, 0x20	; 32
     6a8:	50 70       	andi	r21, 0x00	; 0
     6aa:	55 95       	asr	r21
     6ac:	47 95       	ror	r20
     6ae:	55 95       	asr	r21
     6b0:	47 95       	ror	r20
     6b2:	55 95       	asr	r21
     6b4:	47 95       	ror	r20
     6b6:	55 95       	asr	r21
     6b8:	47 95       	ror	r20
     6ba:	55 95       	asr	r21
     6bc:	47 95       	ror	r20
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	65 e0       	ldi	r22, 0x05	; 5
     6c2:	0e 94 df 00 	call	0x1be	; 0x1be <PORT>
			PORT(D6_PORT,D6_PIN,GET_BIT(command,6) );
     6c6:	a8 01       	movw	r20, r16
     6c8:	40 74       	andi	r20, 0x40	; 64
     6ca:	50 70       	andi	r21, 0x00	; 0
     6cc:	04 2e       	mov	r0, r20
     6ce:	45 2f       	mov	r20, r21
     6d0:	00 0c       	add	r0, r0
     6d2:	44 1f       	adc	r20, r20
     6d4:	55 0b       	sbc	r21, r21
     6d6:	00 0c       	add	r0, r0
     6d8:	44 1f       	adc	r20, r20
     6da:	55 1f       	adc	r21, r21
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	66 e0       	ldi	r22, 0x06	; 6
     6e0:	0e 94 df 00 	call	0x1be	; 0x1be <PORT>
			PORT(D7_PORT,D7_PIN,GET_BIT(command,7) );
     6e4:	4d 2d       	mov	r20, r13
     6e6:	44 1f       	adc	r20, r20
     6e8:	44 27       	eor	r20, r20
     6ea:	44 1f       	adc	r20, r20
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	67 e0       	ldi	r22, 0x07	; 7
     6f0:	0e 94 df 00 	call	0x1be	; 0x1be <PORT>
     6f4:	c7 01       	movw	r24, r14
     6f6:	01 97       	sbiw	r24, 0x01	; 1
     6f8:	f1 f7       	brne	.-4      	; 0x6f6 <LCD_COMMAND+0xa8>

			_delay_ms(1);
			PORT(EN_PORT,EN_PIN,OFF);
     6fa:	82 e0       	ldi	r24, 0x02	; 2
     6fc:	67 e0       	ldi	r22, 0x07	; 7
     6fe:	40 e0       	ldi	r20, 0x00	; 0
     700:	0e 94 df 00 	call	0x1be	; 0x1be <PORT>
     704:	c7 01       	movw	r24, r14
     706:	01 97       	sbiw	r24, 0x01	; 1
     708:	f1 f7       	brne	.-4      	; 0x706 <LCD_COMMAND+0xb8>
			_delay_ms(1);
			PORT(EN_PORT,EN_PIN,ON);
     70a:	82 e0       	ldi	r24, 0x02	; 2
     70c:	67 e0       	ldi	r22, 0x07	; 7
     70e:	41 e0       	ldi	r20, 0x01	; 1
     710:	0e 94 df 00 	call	0x1be	; 0x1be <PORT>
     714:	c7 01       	movw	r24, r14
     716:	01 97       	sbiw	r24, 0x01	; 1
     718:	f1 f7       	brne	.-4      	; 0x716 <LCD_COMMAND+0xc8>

			_delay_ms(1);

			PORT(D4_PORT,D4_PIN,GET_BIT(command,0) );
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	d8 22       	and	r13, r24
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	64 e0       	ldi	r22, 0x04	; 4
     722:	4d 2d       	mov	r20, r13
     724:	0e 94 df 00 	call	0x1be	; 0x1be <PORT>
			PORT(D5_PORT,D5_PIN,GET_BIT(command,1) );
     728:	a8 01       	movw	r20, r16
     72a:	42 70       	andi	r20, 0x02	; 2
     72c:	50 70       	andi	r21, 0x00	; 0
     72e:	55 95       	asr	r21
     730:	47 95       	ror	r20
     732:	80 e0       	ldi	r24, 0x00	; 0
     734:	65 e0       	ldi	r22, 0x05	; 5
     736:	0e 94 df 00 	call	0x1be	; 0x1be <PORT>
			PORT(D6_PORT,D6_PIN,GET_BIT(command,2) );
     73a:	a8 01       	movw	r20, r16
     73c:	44 70       	andi	r20, 0x04	; 4
     73e:	50 70       	andi	r21, 0x00	; 0
     740:	55 95       	asr	r21
     742:	47 95       	ror	r20
     744:	55 95       	asr	r21
     746:	47 95       	ror	r20
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	66 e0       	ldi	r22, 0x06	; 6
     74c:	0e 94 df 00 	call	0x1be	; 0x1be <PORT>
			PORT(D7_PORT,D7_PIN,GET_BIT(command,3) );
     750:	08 70       	andi	r16, 0x08	; 8
     752:	10 70       	andi	r17, 0x00	; 0
     754:	15 95       	asr	r17
     756:	07 95       	ror	r16
     758:	15 95       	asr	r17
     75a:	07 95       	ror	r16
     75c:	15 95       	asr	r17
     75e:	07 95       	ror	r16
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	67 e0       	ldi	r22, 0x07	; 7
     764:	40 2f       	mov	r20, r16
     766:	0e 94 df 00 	call	0x1be	; 0x1be <PORT>
     76a:	c7 01       	movw	r24, r14
     76c:	01 97       	sbiw	r24, 0x01	; 1
     76e:	f1 f7       	brne	.-4      	; 0x76c <LCD_COMMAND+0x11e>

			_delay_ms(1);
			PORT(EN_PORT,EN_PIN,OFF);
     770:	82 e0       	ldi	r24, 0x02	; 2
     772:	67 e0       	ldi	r22, 0x07	; 7
     774:	40 e0       	ldi	r20, 0x00	; 0
     776:	0e 94 df 00 	call	0x1be	; 0x1be <PORT>
     77a:	c7 01       	movw	r24, r14
     77c:	01 97       	sbiw	r24, 0x01	; 1
     77e:	f1 f7       	brne	.-4      	; 0x77c <LCD_COMMAND+0x12e>
			PORT(LCD_PORT,total,command);
			_delay_ms(1);
			PORT(EN_PORT,EN_PIN,OFF);
			_delay_ms(1);
#endif
}
     780:	1f 91       	pop	r17
     782:	0f 91       	pop	r16
     784:	ff 90       	pop	r15
     786:	ef 90       	pop	r14
     788:	df 90       	pop	r13
     78a:	08 95       	ret

0000078c <LCD_moveCursor>:
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
   LCD_STR(buff); /* Display the string */
}

void LCD_moveCursor(uint8 row,uint8 col)
{
     78c:	df 93       	push	r29
     78e:	cf 93       	push	r28
     790:	0f 92       	push	r0
     792:	cd b7       	in	r28, 0x3d	; 61
     794:	de b7       	in	r29, 0x3e	; 62
	volatile uint8 lcd_memory_address;

	switch(row)
     796:	81 30       	cpi	r24, 0x01	; 1
     798:	d9 f0       	breq	.+54     	; 0x7d0 <LCD_moveCursor+0x44>
     79a:	81 30       	cpi	r24, 0x01	; 1
     79c:	48 f4       	brcc	.+18     	; 0x7b0 <LCD_moveCursor+0x24>
				break;
		case 2:
			lcd_memory_address=col+0x10;
				break;
		case 3:
			lcd_memory_address=col+0x50;
     79e:	69 83       	std	Y+1, r22	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_COMMAND(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
     7a0:	89 81       	ldd	r24, Y+1	; 0x01
     7a2:	80 68       	ori	r24, 0x80	; 128
     7a4:	0e 94 27 03 	call	0x64e	; 0x64e <LCD_COMMAND>
}
     7a8:	0f 90       	pop	r0
     7aa:	cf 91       	pop	r28
     7ac:	df 91       	pop	r29
     7ae:	08 95       	ret

void LCD_moveCursor(uint8 row,uint8 col)
{
	volatile uint8 lcd_memory_address;

	switch(row)
     7b0:	82 30       	cpi	r24, 0x02	; 2
     7b2:	21 f0       	breq	.+8      	; 0x7bc <LCD_moveCursor+0x30>
     7b4:	83 30       	cpi	r24, 0x03	; 3
     7b6:	a1 f7       	brne	.-24     	; 0x7a0 <LCD_moveCursor+0x14>
				break;
		case 2:
			lcd_memory_address=col+0x10;
				break;
		case 3:
			lcd_memory_address=col+0x50;
     7b8:	60 5b       	subi	r22, 0xB0	; 176
     7ba:	f1 cf       	rjmp	.-30     	; 0x79e <LCD_moveCursor+0x12>
				break;
		case 1:
			lcd_memory_address=col+0x40;
				break;
		case 2:
			lcd_memory_address=col+0x10;
     7bc:	60 5f       	subi	r22, 0xF0	; 240
     7be:	69 83       	std	Y+1, r22	; 0x01
		case 3:
			lcd_memory_address=col+0x50;
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_COMMAND(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
     7c0:	89 81       	ldd	r24, Y+1	; 0x01
     7c2:	80 68       	ori	r24, 0x80	; 128
     7c4:	0e 94 27 03 	call	0x64e	; 0x64e <LCD_COMMAND>
}
     7c8:	0f 90       	pop	r0
     7ca:	cf 91       	pop	r28
     7cc:	df 91       	pop	r29
     7ce:	08 95       	ret
	{
		case 0:
			lcd_memory_address=col;
				break;
		case 1:
			lcd_memory_address=col+0x40;
     7d0:	60 5c       	subi	r22, 0xC0	; 192
     7d2:	69 83       	std	Y+1, r22	; 0x01
		case 3:
			lcd_memory_address=col+0x50;
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_COMMAND(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
     7d4:	89 81       	ldd	r24, Y+1	; 0x01
     7d6:	80 68       	ori	r24, 0x80	; 128
     7d8:	0e 94 27 03 	call	0x64e	; 0x64e <LCD_COMMAND>
}
     7dc:	0f 90       	pop	r0
     7de:	cf 91       	pop	r28
     7e0:	df 91       	pop	r29
     7e2:	08 95       	ret

000007e4 <LCD_STR_R_C>:

void LCD_STR_R_C(uint8 row,uint8 col,const char *txt)
{
     7e4:	0f 93       	push	r16
     7e6:	1f 93       	push	r17
     7e8:	8a 01       	movw	r16, r20
	LCD_moveCursor(row,col); /* go to to the required LCD position */
     7ea:	0e 94 c6 03 	call	0x78c	; 0x78c <LCD_moveCursor>
	LCD_STR(txt); /* display the string */
     7ee:	c8 01       	movw	r24, r16
     7f0:	0e 94 f6 02 	call	0x5ec	; 0x5ec <LCD_STR>
}
     7f4:	1f 91       	pop	r17
     7f6:	0f 91       	pop	r16
     7f8:	08 95       	ret

000007fa <LCD_CLEAR>:

//===================================================================
// CLEAR LCD
void LCD_CLEAR(void)
{
	LCD_COMMAND(LCD_CLEAR_COMMAND);
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	0e 94 27 03 	call	0x64e	; 0x64e <LCD_COMMAND>
}
     800:	08 95       	ret

00000802 <LCD_INIT>:
#include "LCD.h"
//===================================================================
// LCD INITIALIZATION
void LCD_INIT(void)
{
			DDR(RS_PORT,RS_PIN,OUTPUT);            //RS PIN     ---> OUTPUT
     802:	82 e0       	ldi	r24, 0x02	; 2
     804:	66 e0       	ldi	r22, 0x06	; 6
     806:	41 e0       	ldi	r20, 0x01	; 1
     808:	0e 94 49 00 	call	0x92	; 0x92 <DDR>
			DDR(EN_PORT,EN_PIN,OUTPUT);            //ENABLE PIN ---> OUTPUT
     80c:	82 e0       	ldi	r24, 0x02	; 2
     80e:	67 e0       	ldi	r22, 0x07	; 7
     810:	41 e0       	ldi	r20, 0x01	; 1
     812:	0e 94 49 00 	call	0x92	; 0x92 <DDR>
     816:	80 e4       	ldi	r24, 0x40	; 64
     818:	9c e9       	ldi	r25, 0x9C	; 156
     81a:	01 97       	sbiw	r24, 0x01	; 1
     81c:	f1 f7       	brne	.-4      	; 0x81a <LCD_INIT+0x18>
			_delay_ms(20);
#if (LCD_TYPE==FOUR_BITS_MODE)

			DDR(D4_PORT,D4_PIN,OUTPUT);
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	64 e0       	ldi	r22, 0x04	; 4
     822:	41 e0       	ldi	r20, 0x01	; 1
     824:	0e 94 49 00 	call	0x92	; 0x92 <DDR>
			DDR(D5_PORT,D5_PIN,OUTPUT);
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	65 e0       	ldi	r22, 0x05	; 5
     82c:	41 e0       	ldi	r20, 0x01	; 1
     82e:	0e 94 49 00 	call	0x92	; 0x92 <DDR>
			DDR(D6_PORT,D6_PIN,OUTPUT);
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	66 e0       	ldi	r22, 0x06	; 6
     836:	41 e0       	ldi	r20, 0x01	; 1
     838:	0e 94 49 00 	call	0x92	; 0x92 <DDR>
			DDR(D7_PORT,D7_PIN,OUTPUT);
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	67 e0       	ldi	r22, 0x07	; 7
     840:	41 e0       	ldi	r20, 0x01	; 1
     842:	0e 94 49 00 	call	0x92	; 0x92 <DDR>

			LCD_COMMAND(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
     846:	83 e3       	ldi	r24, 0x33	; 51
     848:	0e 94 27 03 	call	0x64e	; 0x64e <LCD_COMMAND>
			LCD_COMMAND(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
     84c:	82 e3       	ldi	r24, 0x32	; 50
     84e:	0e 94 27 03 	call	0x64e	; 0x64e <LCD_COMMAND>
			LCD_COMMAND(LCD_TWO_LINES_FOUR_BITS_MODE);
     852:	88 e2       	ldi	r24, 0x28	; 40
     854:	0e 94 27 03 	call	0x64e	; 0x64e <LCD_COMMAND>
#elif (LCD_TYPE ==EIGHT_BITS_MODE)

			DDR(LCD_PORT,total,OUTPUT);
			LCD_COMMAND(LCD_TWO_LINES_EIGHT_BITS_MODE);
#endif
			LCD_COMMAND(LCD_CURSOR_OFF);
     858:	8c e0       	ldi	r24, 0x0C	; 12
     85a:	0e 94 27 03 	call	0x64e	; 0x64e <LCD_COMMAND>
			LCD_COMMAND(LCD_CLEAR_COMMAND);
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	0e 94 27 03 	call	0x64e	; 0x64e <LCD_COMMAND>
}
     864:	08 95       	ret

00000866 <CallBackTimer>:
#define MAX_WRONG_PASS 3

//################################################################################################
void CallBackTimer(void)
{
	g_tick++;
     866:	80 91 82 01 	lds	r24, 0x0182
     86a:	90 91 83 01 	lds	r25, 0x0183
     86e:	a0 91 84 01 	lds	r26, 0x0184
     872:	b0 91 85 01 	lds	r27, 0x0185
     876:	01 96       	adiw	r24, 0x01	; 1
     878:	a1 1d       	adc	r26, r1
     87a:	b1 1d       	adc	r27, r1
     87c:	80 93 82 01 	sts	0x0182, r24
     880:	90 93 83 01 	sts	0x0183, r25
     884:	a0 93 84 01 	sts	0x0184, r26
     888:	b0 93 85 01 	sts	0x0185, r27
	if(g_tick==2)
     88c:	02 97       	sbiw	r24, 0x02	; 2
     88e:	a1 05       	cpc	r26, r1
     890:	b1 05       	cpc	r27, r1
     892:	09 f0       	breq	.+2      	; 0x896 <CallBackTimer+0x30>
     894:	08 95       	ret
	{
		Tickk++;
     896:	80 91 7e 01 	lds	r24, 0x017E
     89a:	90 91 7f 01 	lds	r25, 0x017F
     89e:	a0 91 80 01 	lds	r26, 0x0180
     8a2:	b0 91 81 01 	lds	r27, 0x0181
     8a6:	01 96       	adiw	r24, 0x01	; 1
     8a8:	a1 1d       	adc	r26, r1
     8aa:	b1 1d       	adc	r27, r1
     8ac:	80 93 7e 01 	sts	0x017E, r24
     8b0:	90 93 7f 01 	sts	0x017F, r25
     8b4:	a0 93 80 01 	sts	0x0180, r26
     8b8:	b0 93 81 01 	sts	0x0181, r27
		g_tick=0;
     8bc:	10 92 82 01 	sts	0x0182, r1
     8c0:	10 92 83 01 	sts	0x0183, r1
     8c4:	10 92 84 01 	sts	0x0184, r1
     8c8:	10 92 85 01 	sts	0x0185, r1
     8cc:	08 95       	ret

000008ce <StepTwo>:
}
//###############################################################################
// Step Two [ Main Options ]
//###############################################################################
static uint8 StepTwo(void)
{
     8ce:	df 93       	push	r29
     8d0:	cf 93       	push	r28
     8d2:	0f 92       	push	r0
     8d4:	cd b7       	in	r28, 0x3d	; 61
     8d6:	de b7       	in	r29, 0x3e	; 62
	volatile uint8 state;
//DISPLAYING + FOR OPEN DOOR    - CHANGE PASSWORD
	LCD_CLEAR();
     8d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCD_CLEAR>
	LCD_STR_R_C(0,0,"+ : Open Door   ");
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	60 e0       	ldi	r22, 0x00	; 0
     8e0:	40 e6       	ldi	r20, 0x60	; 96
     8e2:	50 e0       	ldi	r21, 0x00	; 0
     8e4:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LCD_STR_R_C>
	LCD_STR_R_C(1,0,"- : Change Pass ");
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	60 e0       	ldi	r22, 0x00	; 0
     8ec:	41 e7       	ldi	r20, 0x71	; 113
     8ee:	50 e0       	ldi	r21, 0x00	; 0
     8f0:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LCD_STR_R_C>
//WAITING RESPONSE FROM USER
	state=KEYPAD();
     8f4:	0e 94 b8 01 	call	0x370	; 0x370 <KEYPAD>
     8f8:	89 83       	std	Y+1, r24	; 0x01
	if(state=='+')
     8fa:	89 81       	ldd	r24, Y+1	; 0x01
     8fc:	8b 32       	cpi	r24, 0x2B	; 43
     8fe:	69 f0       	breq	.+26     	; 0x91a <StepTwo+0x4c>
	{
		return OPEN_DOOR;
	}
	else if (state=='-')
     900:	89 81       	ldd	r24, Y+1	; 0x01
     902:	8d 32       	cpi	r24, 0x2D	; 45
     904:	29 f0       	breq	.+10     	; 0x910 <StepTwo+0x42>
     906:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return FAULT_RESPONSE;
	}
}
     908:	0f 90       	pop	r0
     90a:	cf 91       	pop	r28
     90c:	df 91       	pop	r29
     90e:	08 95       	ret
	state=KEYPAD();
	if(state=='+')
	{
		return OPEN_DOOR;
	}
	else if (state=='-')
     910:	82 e0       	ldi	r24, 0x02	; 2
	}
	else
	{
		return FAULT_RESPONSE;
	}
}
     912:	0f 90       	pop	r0
     914:	cf 91       	pop	r28
     916:	df 91       	pop	r29
     918:	08 95       	ret
	LCD_CLEAR();
	LCD_STR_R_C(0,0,"+ : Open Door   ");
	LCD_STR_R_C(1,0,"- : Change Pass ");
//WAITING RESPONSE FROM USER
	state=KEYPAD();
	if(state=='+')
     91a:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return FAULT_RESPONSE;
	}
}
     91c:	0f 90       	pop	r0
     91e:	cf 91       	pop	r28
     920:	df 91       	pop	r29
     922:	08 95       	ret

00000924 <StepOne>:

//###############################################################################
// Step One [ Create a System Password ]
//###############################################################################
static uint8 StepOne(void)
{
     924:	0f 93       	push	r16
     926:	1f 93       	push	r17
     928:	df 93       	push	r29
     92a:	cf 93       	push	r28
     92c:	00 d0       	rcall	.+0      	; 0x92e <StepOne+0xa>
     92e:	cd b7       	in	r28, 0x3d	; 61
     930:	de b7       	in	r29, 0x3e	; 62
	volatile uint8 password;                                              //Entered Password From User (array from 5 numbers)
	volatile uint8 CheckEQ;                                               //Return Value from MC2 to check the Equality of two passwords[0 (NOT EQUAL) or 1 (EQUAL) ]
//DISPLAYING ON LCD TO ENTER THE PASSWORD TO BE CREATED
	LCD_CLEAR();
     932:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCD_CLEAR>
     936:	28 e8       	ldi	r18, 0x88	; 136
     938:	33 e1       	ldi	r19, 0x13	; 19
     93a:	48 ec       	ldi	r20, 0xC8	; 200
     93c:	50 e0       	ldi	r21, 0x00	; 0
     93e:	ca 01       	movw	r24, r20
     940:	01 97       	sbiw	r24, 0x01	; 1
     942:	f1 f7       	brne	.-4      	; 0x940 <StepOne+0x1c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     944:	21 50       	subi	r18, 0x01	; 1
     946:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     948:	d1 f7       	brne	.-12     	; 0x93e <StepOne+0x1a>
	_delay_ms(500);
	LCD_STR_R_C(0,0,"Please Enter the");
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	60 e0       	ldi	r22, 0x00	; 0
     94e:	42 e8       	ldi	r20, 0x82	; 130
     950:	50 e0       	ldi	r21, 0x00	; 0
     952:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LCD_STR_R_C>
	LCD_STR_R_C(1,0,"Password:");
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	60 e0       	ldi	r22, 0x00	; 0
     95a:	43 e9       	ldi	r20, 0x93	; 147
     95c:	50 e0       	ldi	r21, 0x00	; 0
     95e:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LCD_STR_R_C>
	LCD_moveCursor(1,11);
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	6b e0       	ldi	r22, 0x0B	; 11
     966:	0e 94 c6 03 	call	0x78c	; 0x78c <LCD_moveCursor>
//RECIEVING FROM USER Through KEYPAD & SENDING FIRST PASSWORD THROUGH UART
	for(i=0;i<NO_PASSWORD;i++)
     96a:	10 92 86 01 	sts	0x0186, r1
     96e:	08 ec       	ldi	r16, 0xC8	; 200
     970:	10 e0       	ldi	r17, 0x00	; 0
	{
		password=KEYPAD();
     972:	0e 94 b8 01 	call	0x370	; 0x370 <KEYPAD>
     976:	89 83       	std	Y+1, r24	; 0x01
		LCD_STR("*");
     978:	8d e9       	ldi	r24, 0x9D	; 157
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	0e 94 f6 02 	call	0x5ec	; 0x5ec <LCD_STR>
		UART_T(password);
     980:	89 81       	ldd	r24, Y+1	; 0x01
     982:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <UART_T>
     986:	20 e4       	ldi	r18, 0x40	; 64
     988:	3f e1       	ldi	r19, 0x1F	; 31
     98a:	c8 01       	movw	r24, r16
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	f1 f7       	brne	.-4      	; 0x98c <StepOne+0x68>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     990:	21 50       	subi	r18, 0x01	; 1
     992:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     994:	d1 f7       	brne	.-12     	; 0x98a <StepOne+0x66>
	_delay_ms(500);
	LCD_STR_R_C(0,0,"Please Enter the");
	LCD_STR_R_C(1,0,"Password:");
	LCD_moveCursor(1,11);
//RECIEVING FROM USER Through KEYPAD & SENDING FIRST PASSWORD THROUGH UART
	for(i=0;i<NO_PASSWORD;i++)
     996:	80 91 86 01 	lds	r24, 0x0186
     99a:	8f 5f       	subi	r24, 0xFF	; 255
     99c:	80 93 86 01 	sts	0x0186, r24
     9a0:	85 30       	cpi	r24, 0x05	; 5
     9a2:	38 f3       	brcs	.-50     	; 0x972 <StepOne+0x4e>
		LCD_STR("*");
		UART_T(password);
		_delay_ms(800);
	}
//DISPLAYING PRESS ON ANY KEY TO CONTINUE
	LCD_CLEAR();
     9a4:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCD_CLEAR>
     9a8:	28 e8       	ldi	r18, 0x88	; 136
     9aa:	33 e1       	ldi	r19, 0x13	; 19
     9ac:	48 ec       	ldi	r20, 0xC8	; 200
     9ae:	50 e0       	ldi	r21, 0x00	; 0
     9b0:	ca 01       	movw	r24, r20
     9b2:	01 97       	sbiw	r24, 0x01	; 1
     9b4:	f1 f7       	brne	.-4      	; 0x9b2 <StepOne+0x8e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9b6:	21 50       	subi	r18, 0x01	; 1
     9b8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9ba:	d1 f7       	brne	.-12     	; 0x9b0 <StepOne+0x8c>
	_delay_ms(500);
	LCD_STR_R_C(0,0,"Press on any key");
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	60 e0       	ldi	r22, 0x00	; 0
     9c0:	4f e9       	ldi	r20, 0x9F	; 159
     9c2:	50 e0       	ldi	r21, 0x00	; 0
     9c4:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LCD_STR_R_C>
	LCD_STR_R_C(1,0,"to continue.");
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	60 e0       	ldi	r22, 0x00	; 0
     9cc:	40 eb       	ldi	r20, 0xB0	; 176
     9ce:	50 e0       	ldi	r21, 0x00	; 0
     9d0:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LCD_STR_R_C>
	while(KEYPAD()<0);
     9d4:	0e 94 b8 01 	call	0x370	; 0x370 <KEYPAD>
//DISPLAYING ON LCD TO RE-ENTER THE PASSWORD TO BE CREATED
	LCD_CLEAR();
     9d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCD_CLEAR>
     9dc:	28 e8       	ldi	r18, 0x88	; 136
     9de:	33 e1       	ldi	r19, 0x13	; 19
     9e0:	48 ec       	ldi	r20, 0xC8	; 200
     9e2:	50 e0       	ldi	r21, 0x00	; 0
     9e4:	ca 01       	movw	r24, r20
     9e6:	01 97       	sbiw	r24, 0x01	; 1
     9e8:	f1 f7       	brne	.-4      	; 0x9e6 <StepOne+0xc2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9ea:	21 50       	subi	r18, 0x01	; 1
     9ec:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9ee:	d1 f7       	brne	.-12     	; 0x9e4 <StepOne+0xc0>
	_delay_ms(500);
	LCD_STR_R_C(0,0,"Plz Re-Enter the");
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	60 e0       	ldi	r22, 0x00	; 0
     9f4:	4d eb       	ldi	r20, 0xBD	; 189
     9f6:	50 e0       	ldi	r21, 0x00	; 0
     9f8:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LCD_STR_R_C>
	LCD_STR_R_C(1,0,"Password:");
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	43 e9       	ldi	r20, 0x93	; 147
     a02:	50 e0       	ldi	r21, 0x00	; 0
     a04:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LCD_STR_R_C>
	LCD_moveCursor(1,11);
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	6b e0       	ldi	r22, 0x0B	; 11
     a0c:	0e 94 c6 03 	call	0x78c	; 0x78c <LCD_moveCursor>
//RECIEVING FROM USER Through KEYPAD & SENDING FIRST PASSWORD THROUGH UART
	for(i=0;i<NO_PASSWORD;i++)
     a10:	10 92 86 01 	sts	0x0186, r1
     a14:	08 ec       	ldi	r16, 0xC8	; 200
     a16:	10 e0       	ldi	r17, 0x00	; 0
	{
		password=KEYPAD();
     a18:	0e 94 b8 01 	call	0x370	; 0x370 <KEYPAD>
     a1c:	89 83       	std	Y+1, r24	; 0x01
		LCD_STR("*");
     a1e:	8d e9       	ldi	r24, 0x9D	; 157
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	0e 94 f6 02 	call	0x5ec	; 0x5ec <LCD_STR>
		UART_T(password);
     a26:	89 81       	ldd	r24, Y+1	; 0x01
     a28:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <UART_T>
     a2c:	20 e4       	ldi	r18, 0x40	; 64
     a2e:	3f e1       	ldi	r19, 0x1F	; 31
     a30:	c8 01       	movw	r24, r16
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	f1 f7       	brne	.-4      	; 0xa32 <StepOne+0x10e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a36:	21 50       	subi	r18, 0x01	; 1
     a38:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a3a:	d1 f7       	brne	.-12     	; 0xa30 <StepOne+0x10c>
	_delay_ms(500);
	LCD_STR_R_C(0,0,"Plz Re-Enter the");
	LCD_STR_R_C(1,0,"Password:");
	LCD_moveCursor(1,11);
//RECIEVING FROM USER Through KEYPAD & SENDING FIRST PASSWORD THROUGH UART
	for(i=0;i<NO_PASSWORD;i++)
     a3c:	80 91 86 01 	lds	r24, 0x0186
     a40:	8f 5f       	subi	r24, 0xFF	; 255
     a42:	80 93 86 01 	sts	0x0186, r24
     a46:	85 30       	cpi	r24, 0x05	; 5
     a48:	38 f3       	brcs	.-50     	; 0xa18 <StepOne+0xf4>
		LCD_STR("*");
		UART_T(password);
		_delay_ms(800);
	}
//DISPLAYING PRESS ON ANY KEY TO CONTINUE
	LCD_CLEAR();
     a4a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCD_CLEAR>
     a4e:	28 e8       	ldi	r18, 0x88	; 136
     a50:	33 e1       	ldi	r19, 0x13	; 19
     a52:	48 ec       	ldi	r20, 0xC8	; 200
     a54:	50 e0       	ldi	r21, 0x00	; 0
     a56:	ca 01       	movw	r24, r20
     a58:	01 97       	sbiw	r24, 0x01	; 1
     a5a:	f1 f7       	brne	.-4      	; 0xa58 <StepOne+0x134>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a5c:	21 50       	subi	r18, 0x01	; 1
     a5e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a60:	d1 f7       	brne	.-12     	; 0xa56 <StepOne+0x132>
	_delay_ms(500);
	LCD_STR_R_C(0,0,"Press on any key");
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	60 e0       	ldi	r22, 0x00	; 0
     a66:	4f e9       	ldi	r20, 0x9F	; 159
     a68:	50 e0       	ldi	r21, 0x00	; 0
     a6a:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LCD_STR_R_C>
	LCD_STR_R_C(1,0,"to continue.");
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	60 e0       	ldi	r22, 0x00	; 0
     a72:	40 eb       	ldi	r20, 0xB0	; 176
     a74:	50 e0       	ldi	r21, 0x00	; 0
     a76:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LCD_STR_R_C>
	while(KEYPAD()<0);
     a7a:	0e 94 b8 01 	call	0x370	; 0x370 <KEYPAD>
//WAITING THE RESPONSE FROM MC2 TO CHECK EQUALITY
	CheckEQ=UART_R();             //1 -> EQUAL     // 0 -> NOT EQUAL
     a7e:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <UART_R>
     a82:	8a 83       	std	Y+2, r24	; 0x02
	return CheckEQ;
     a84:	8a 81       	ldd	r24, Y+2	; 0x02
}
     a86:	0f 90       	pop	r0
     a88:	0f 90       	pop	r0
     a8a:	cf 91       	pop	r28
     a8c:	df 91       	pop	r29
     a8e:	1f 91       	pop	r17
     a90:	0f 91       	pop	r16
     a92:	08 95       	ret

00000a94 <ErrorMessage>:
	TIMER1_DeINIT();

}
void ErrorMessage(Timer1_ConfigType *  ptr)
{
	TIMER1_INIT(ptr);
     a94:	0e 94 79 08 	call	0x10f2	; 0x10f2 <TIMER1_INIT>
	UART_T(START);
     a98:	88 e0       	ldi	r24, 0x08	; 8
     a9a:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <UART_T>
	LCD_CLEAR();
     a9e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCD_CLEAR>
	LCD_STR_R_C(0,0,"ERROR_PASS");
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	60 e0       	ldi	r22, 0x00	; 0
     aa6:	4e ec       	ldi	r20, 0xCE	; 206
     aa8:	50 e0       	ldi	r21, 0x00	; 0
     aaa:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LCD_STR_R_C>
	LCD_moveCursor(1,0);
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	60 e0       	ldi	r22, 0x00	; 0
     ab2:	0e 94 c6 03 	call	0x78c	; 0x78c <LCD_moveCursor>

	while(Tickk<=60){	LCD_moveCursor(1,0);		LCD_INT(Tickk); LCD_STR("  ");}
     ab6:	80 91 7e 01 	lds	r24, 0x017E
     aba:	90 91 7f 01 	lds	r25, 0x017F
     abe:	a0 91 80 01 	lds	r26, 0x0180
     ac2:	b0 91 81 01 	lds	r27, 0x0181
     ac6:	cd 97       	sbiw	r24, 0x3d	; 61
     ac8:	a1 05       	cpc	r26, r1
     aca:	b1 05       	cpc	r27, r1
     acc:	d0 f4       	brcc	.+52     	; 0xb02 <ErrorMessage+0x6e>
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	60 e0       	ldi	r22, 0x00	; 0
     ad2:	0e 94 c6 03 	call	0x78c	; 0x78c <LCD_moveCursor>
     ad6:	80 91 7e 01 	lds	r24, 0x017E
     ada:	90 91 7f 01 	lds	r25, 0x017F
     ade:	0e 94 05 03 	call	0x60a	; 0x60a <LCD_INT>
     ae2:	89 ed       	ldi	r24, 0xD9	; 217
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	0e 94 f6 02 	call	0x5ec	; 0x5ec <LCD_STR>
     aea:	80 91 7e 01 	lds	r24, 0x017E
     aee:	90 91 7f 01 	lds	r25, 0x017F
     af2:	a0 91 80 01 	lds	r26, 0x0180
     af6:	b0 91 81 01 	lds	r27, 0x0181
     afa:	cd 97       	sbiw	r24, 0x3d	; 61
     afc:	a1 05       	cpc	r26, r1
     afe:	b1 05       	cpc	r27, r1
     b00:	30 f3       	brcs	.-52     	; 0xace <ErrorMessage+0x3a>
	//UART_T(START);

	LCD_CLEAR();
     b02:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCD_CLEAR>
	Tickk=0;g_tick=0;
     b06:	10 92 7e 01 	sts	0x017E, r1
     b0a:	10 92 7f 01 	sts	0x017F, r1
     b0e:	10 92 80 01 	sts	0x0180, r1
     b12:	10 92 81 01 	sts	0x0181, r1
     b16:	10 92 82 01 	sts	0x0182, r1
     b1a:	10 92 83 01 	sts	0x0183, r1
     b1e:	10 92 84 01 	sts	0x0184, r1
     b22:	10 92 85 01 	sts	0x0185, r1
	TIMER1_DeINIT();
     b26:	0e 94 b2 08 	call	0x1164	; 0x1164 <TIMER1_DeINIT>

	text=0;
     b2a:	10 92 74 01 	sts	0x0174, r1


}
     b2e:	08 95       	ret

00000b30 <StepFour>:
}
//###############################################################################
// Step Four [ User Entered (-) for Change the password  ]
//###############################################################################
static uint8 StepFour(void)
{
     b30:	0f 93       	push	r16
     b32:	1f 93       	push	r17
     b34:	df 93       	push	r29
     b36:	cf 93       	push	r28
     b38:	00 d0       	rcall	.+0      	; 0xb3a <StepFour+0xa>
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	volatile uint8 password;                                              //Entered Password From User (array from 5 numbers)
	static uint8 counter=1;                                               //Counter to count the wrong input password from user
	volatile uint8 CheckEQ;                                               //Return Value from MC2 to check the Equality of two passwords[0 (NOT EQUAL) or 1 (EQUAL) ]
//DISPLAYING ON LCD TO ENTER THE PASSWORD
	LCD_CLEAR();
     b3e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCD_CLEAR>
     b42:	28 e8       	ldi	r18, 0x88	; 136
     b44:	33 e1       	ldi	r19, 0x13	; 19
     b46:	48 ec       	ldi	r20, 0xC8	; 200
     b48:	50 e0       	ldi	r21, 0x00	; 0
     b4a:	ca 01       	movw	r24, r20
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	f1 f7       	brne	.-4      	; 0xb4c <StepFour+0x1c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b50:	21 50       	subi	r18, 0x01	; 1
     b52:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b54:	d1 f7       	brne	.-12     	; 0xb4a <StepFour+0x1a>
	_delay_ms(500);
	LCD_STR_R_C(0,0,"Please enter the");
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	60 e0       	ldi	r22, 0x00	; 0
     b5a:	4c ed       	ldi	r20, 0xDC	; 220
     b5c:	50 e0       	ldi	r21, 0x00	; 0
     b5e:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LCD_STR_R_C>
	LCD_STR_R_C(1,0,"password:");
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	4d ee       	ldi	r20, 0xED	; 237
     b68:	50 e0       	ldi	r21, 0x00	; 0
     b6a:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LCD_STR_R_C>
	LCD_moveCursor(1,11);
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	6b e0       	ldi	r22, 0x0B	; 11
     b72:	0e 94 c6 03 	call	0x78c	; 0x78c <LCD_moveCursor>
//RECIEVING FROM USER Through KEYPAD & SENDING FIRST PASSWORD THROUGH UART
	for(i=0;i<NO_PASSWORD;i++)
     b76:	10 92 86 01 	sts	0x0186, r1
     b7a:	08 ec       	ldi	r16, 0xC8	; 200
     b7c:	10 e0       	ldi	r17, 0x00	; 0
	{
		password=KEYPAD();
     b7e:	0e 94 b8 01 	call	0x370	; 0x370 <KEYPAD>
     b82:	89 83       	std	Y+1, r24	; 0x01
		LCD_STR("*");
     b84:	8d e9       	ldi	r24, 0x9D	; 157
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	0e 94 f6 02 	call	0x5ec	; 0x5ec <LCD_STR>
		UART_T(password);
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <UART_T>
     b92:	20 e4       	ldi	r18, 0x40	; 64
     b94:	3f e1       	ldi	r19, 0x1F	; 31
     b96:	c8 01       	movw	r24, r16
     b98:	01 97       	sbiw	r24, 0x01	; 1
     b9a:	f1 f7       	brne	.-4      	; 0xb98 <StepFour+0x68>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b9c:	21 50       	subi	r18, 0x01	; 1
     b9e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ba0:	d1 f7       	brne	.-12     	; 0xb96 <StepFour+0x66>
	_delay_ms(500);
	LCD_STR_R_C(0,0,"Please enter the");
	LCD_STR_R_C(1,0,"password:");
	LCD_moveCursor(1,11);
//RECIEVING FROM USER Through KEYPAD & SENDING FIRST PASSWORD THROUGH UART
	for(i=0;i<NO_PASSWORD;i++)
     ba2:	80 91 86 01 	lds	r24, 0x0186
     ba6:	8f 5f       	subi	r24, 0xFF	; 255
     ba8:	80 93 86 01 	sts	0x0186, r24
     bac:	85 30       	cpi	r24, 0x05	; 5
     bae:	38 f3       	brcs	.-50     	; 0xb7e <StepFour+0x4e>
		LCD_STR("*");
		UART_T(password);
		_delay_ms(800);
	}
//DISPLAYING PRESS ON ANY KEY TO CONTINUE
	LCD_CLEAR();
     bb0:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCD_CLEAR>
     bb4:	28 e8       	ldi	r18, 0x88	; 136
     bb6:	33 e1       	ldi	r19, 0x13	; 19
     bb8:	48 ec       	ldi	r20, 0xC8	; 200
     bba:	50 e0       	ldi	r21, 0x00	; 0
     bbc:	ca 01       	movw	r24, r20
     bbe:	01 97       	sbiw	r24, 0x01	; 1
     bc0:	f1 f7       	brne	.-4      	; 0xbbe <StepFour+0x8e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bc2:	21 50       	subi	r18, 0x01	; 1
     bc4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bc6:	d1 f7       	brne	.-12     	; 0xbbc <StepFour+0x8c>
	_delay_ms(500);
	LCD_STR_R_C(0,0,"Press on any key");
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	60 e0       	ldi	r22, 0x00	; 0
     bcc:	4f e9       	ldi	r20, 0x9F	; 159
     bce:	50 e0       	ldi	r21, 0x00	; 0
     bd0:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LCD_STR_R_C>
	LCD_STR_R_C(1,0,"to continue.");
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	40 eb       	ldi	r20, 0xB0	; 176
     bda:	50 e0       	ldi	r21, 0x00	; 0
     bdc:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LCD_STR_R_C>
	while(KEYPAD()<0);
     be0:	0e 94 b8 01 	call	0x370	; 0x370 <KEYPAD>
//WAITING THE RESPONSE FROM MC2 TO CHECK EQUALITY
	CheckEQ=UART_R();
     be4:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <UART_R>
     be8:	8a 83       	std	Y+2, r24	; 0x02
//########################################################
	if(CheckEQ==EQUAL)                    //IN CASE OF EQUAL PASSWORDS
     bea:	8a 81       	ldd	r24, Y+2	; 0x02
     bec:	81 30       	cpi	r24, 0x01	; 1
     bee:	09 f4       	brne	.+2      	; 0xbf2 <StepFour+0xc2>
     bf0:	3b c0       	rjmp	.+118    	; 0xc68 <StepFour+0x138>
		counter=1;
		return CheckEQ;
	}
	else                                   //IN CASE OF NOT-EQUAL PASSWORDS
	{
		if (counter ==MAX_WRONG_PASS)
     bf2:	80 91 76 01 	lds	r24, 0x0176
     bf6:	83 30       	cpi	r24, 0x03	; 3
     bf8:	41 f1       	breq	.+80     	; 0xc4a <StepFour+0x11a>
			counter=1;
			return ERROR_PASS;
		}
		else
		{
			UART_T(START);
     bfa:	88 e0       	ldi	r24, 0x08	; 8
     bfc:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <UART_T>
			counter++;
     c00:	80 91 76 01 	lds	r24, 0x0176
     c04:	8f 5f       	subi	r24, 0xFF	; 255
     c06:	80 93 76 01 	sts	0x0176, r24
			LCD_CLEAR();
     c0a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCD_CLEAR>
			LCD_STR_R_C(0,0,"Not the same");
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	60 e0       	ldi	r22, 0x00	; 0
     c12:	47 ef       	ldi	r20, 0xF7	; 247
     c14:	50 e0       	ldi	r21, 0x00	; 0
     c16:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LCD_STR_R_C>
			LCD_STR_R_C(1,0,"Try Again ");_delay_ms(500);
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	60 e0       	ldi	r22, 0x00	; 0
     c1e:	44 e0       	ldi	r20, 0x04	; 4
     c20:	51 e0       	ldi	r21, 0x01	; 1
     c22:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LCD_STR_R_C>
     c26:	28 e8       	ldi	r18, 0x88	; 136
     c28:	33 e1       	ldi	r19, 0x13	; 19
     c2a:	48 ec       	ldi	r20, 0xC8	; 200
     c2c:	50 e0       	ldi	r21, 0x00	; 0
     c2e:	ca 01       	movw	r24, r20
     c30:	01 97       	sbiw	r24, 0x01	; 1
     c32:	f1 f7       	brne	.-4      	; 0xc30 <StepFour+0x100>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c34:	21 50       	subi	r18, 0x01	; 1
     c36:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c38:	d1 f7       	brne	.-12     	; 0xc2e <StepFour+0xfe>
     c3a:	80 e0       	ldi	r24, 0x00	; 0
			return NOTEQUAL;
		}
	}

}
     c3c:	0f 90       	pop	r0
     c3e:	0f 90       	pop	r0
     c40:	cf 91       	pop	r28
     c42:	df 91       	pop	r29
     c44:	1f 91       	pop	r17
     c46:	0f 91       	pop	r16
     c48:	08 95       	ret
	}
	else                                   //IN CASE OF NOT-EQUAL PASSWORDS
	{
		if (counter ==MAX_WRONG_PASS)
		{
			ErrorMessage(&TIM1);
     c4a:	8e e6       	ldi	r24, 0x6E	; 110
     c4c:	91 e0       	ldi	r25, 0x01	; 1
     c4e:	0e 94 4a 05 	call	0xa94	; 0xa94 <ErrorMessage>
			counter=1;
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	80 93 76 01 	sts	0x0176, r24
     c58:	82 e0       	ldi	r24, 0x02	; 2
			LCD_STR_R_C(1,0,"Try Again ");_delay_ms(500);
			return NOTEQUAL;
		}
	}

}
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	cf 91       	pop	r28
     c60:	df 91       	pop	r29
     c62:	1f 91       	pop	r17
     c64:	0f 91       	pop	r16
     c66:	08 95       	ret
//WAITING THE RESPONSE FROM MC2 TO CHECK EQUALITY
	CheckEQ=UART_R();
//########################################################
	if(CheckEQ==EQUAL)                    //IN CASE OF EQUAL PASSWORDS
	{
		counter=1;
     c68:	80 93 76 01 	sts	0x0176, r24
		return CheckEQ;
     c6c:	8a 81       	ldd	r24, Y+2	; 0x02
     c6e:	e6 cf       	rjmp	.-52     	; 0xc3c <StepFour+0x10c>

00000c70 <Door_LockUnclock>:

	}
}
void Door_LockUnclock(Timer1_ConfigType *  ptr)
{
	TIMER1_INIT(ptr);
     c70:	0e 94 79 08 	call	0x10f2	; 0x10f2 <TIMER1_INIT>
	UART_T(START);
     c74:	88 e0       	ldi	r24, 0x08	; 8
     c76:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <UART_T>
	LCD_CLEAR();
     c7a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCD_CLEAR>
	LCD_STR_R_C(0,0,"Door's Unlocking");
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	60 e0       	ldi	r22, 0x00	; 0
     c82:	4f e0       	ldi	r20, 0x0F	; 15
     c84:	51 e0       	ldi	r21, 0x01	; 1
     c86:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LCD_STR_R_C>
	LCD_moveCursor(1,0);
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	60 e0       	ldi	r22, 0x00	; 0
     c8e:	0e 94 c6 03 	call	0x78c	; 0x78c <LCD_moveCursor>
	while(Tickk<=15){
     c92:	80 91 7e 01 	lds	r24, 0x017E
     c96:	90 91 7f 01 	lds	r25, 0x017F
     c9a:	a0 91 80 01 	lds	r26, 0x0180
     c9e:	b0 91 81 01 	lds	r27, 0x0181
     ca2:	40 97       	sbiw	r24, 0x10	; 16
     ca4:	a1 05       	cpc	r26, r1
     ca6:	b1 05       	cpc	r27, r1
     ca8:	d0 f4       	brcc	.+52     	; 0xcde <Door_LockUnclock+0x6e>
		LCD_moveCursor(1,0);		LCD_INT(Tickk); LCD_STR("  ");}
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	0e 94 c6 03 	call	0x78c	; 0x78c <LCD_moveCursor>
     cb2:	80 91 7e 01 	lds	r24, 0x017E
     cb6:	90 91 7f 01 	lds	r25, 0x017F
     cba:	0e 94 05 03 	call	0x60a	; 0x60a <LCD_INT>
     cbe:	89 ed       	ldi	r24, 0xD9	; 217
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	0e 94 f6 02 	call	0x5ec	; 0x5ec <LCD_STR>
	TIMER1_INIT(ptr);
	UART_T(START);
	LCD_CLEAR();
	LCD_STR_R_C(0,0,"Door's Unlocking");
	LCD_moveCursor(1,0);
	while(Tickk<=15){
     cc6:	80 91 7e 01 	lds	r24, 0x017E
     cca:	90 91 7f 01 	lds	r25, 0x017F
     cce:	a0 91 80 01 	lds	r26, 0x0180
     cd2:	b0 91 81 01 	lds	r27, 0x0181
     cd6:	40 97       	sbiw	r24, 0x10	; 16
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	30 f3       	brcs	.-52     	; 0xcaa <Door_LockUnclock+0x3a>
		LCD_moveCursor(1,0);		LCD_INT(Tickk); LCD_STR("  ");}


	//UART_T(START);
	LCD_CLEAR();
     cde:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCD_CLEAR>
	LCD_STR_R_C(0,0,"Stopped");
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	60 e0       	ldi	r22, 0x00	; 0
     ce6:	40 e2       	ldi	r20, 0x20	; 32
     ce8:	51 e0       	ldi	r21, 0x01	; 1
     cea:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LCD_STR_R_C>

	while(Tickk<=18){	LCD_moveCursor(1,0);		LCD_INT(Tickk); LCD_STR("  ");}
     cee:	80 91 7e 01 	lds	r24, 0x017E
     cf2:	90 91 7f 01 	lds	r25, 0x017F
     cf6:	a0 91 80 01 	lds	r26, 0x0180
     cfa:	b0 91 81 01 	lds	r27, 0x0181
     cfe:	43 97       	sbiw	r24, 0x13	; 19
     d00:	a1 05       	cpc	r26, r1
     d02:	b1 05       	cpc	r27, r1
     d04:	d0 f4       	brcc	.+52     	; 0xd3a <Door_LockUnclock+0xca>
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	60 e0       	ldi	r22, 0x00	; 0
     d0a:	0e 94 c6 03 	call	0x78c	; 0x78c <LCD_moveCursor>
     d0e:	80 91 7e 01 	lds	r24, 0x017E
     d12:	90 91 7f 01 	lds	r25, 0x017F
     d16:	0e 94 05 03 	call	0x60a	; 0x60a <LCD_INT>
     d1a:	89 ed       	ldi	r24, 0xD9	; 217
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	0e 94 f6 02 	call	0x5ec	; 0x5ec <LCD_STR>
     d22:	80 91 7e 01 	lds	r24, 0x017E
     d26:	90 91 7f 01 	lds	r25, 0x017F
     d2a:	a0 91 80 01 	lds	r26, 0x0180
     d2e:	b0 91 81 01 	lds	r27, 0x0181
     d32:	43 97       	sbiw	r24, 0x13	; 19
     d34:	a1 05       	cpc	r26, r1
     d36:	b1 05       	cpc	r27, r1
     d38:	30 f3       	brcs	.-52     	; 0xd06 <Door_LockUnclock+0x96>
	//UART_T(START);

	LCD_CLEAR();
     d3a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCD_CLEAR>
	LCD_STR_R_C(0,0,"Door's locking  ");
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	60 e0       	ldi	r22, 0x00	; 0
     d42:	48 e2       	ldi	r20, 0x28	; 40
     d44:	51 e0       	ldi	r21, 0x01	; 1
     d46:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LCD_STR_R_C>
	while(Tickk<=33){	LCD_moveCursor(1,0);		LCD_INT(Tickk); LCD_STR("  ");}
     d4a:	80 91 7e 01 	lds	r24, 0x017E
     d4e:	90 91 7f 01 	lds	r25, 0x017F
     d52:	a0 91 80 01 	lds	r26, 0x0180
     d56:	b0 91 81 01 	lds	r27, 0x0181
     d5a:	82 97       	sbiw	r24, 0x22	; 34
     d5c:	a1 05       	cpc	r26, r1
     d5e:	b1 05       	cpc	r27, r1
     d60:	d0 f4       	brcc	.+52     	; 0xd96 <Door_LockUnclock+0x126>
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	0e 94 c6 03 	call	0x78c	; 0x78c <LCD_moveCursor>
     d6a:	80 91 7e 01 	lds	r24, 0x017E
     d6e:	90 91 7f 01 	lds	r25, 0x017F
     d72:	0e 94 05 03 	call	0x60a	; 0x60a <LCD_INT>
     d76:	89 ed       	ldi	r24, 0xD9	; 217
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <LCD_STR>
     d7e:	80 91 7e 01 	lds	r24, 0x017E
     d82:	90 91 7f 01 	lds	r25, 0x017F
     d86:	a0 91 80 01 	lds	r26, 0x0180
     d8a:	b0 91 81 01 	lds	r27, 0x0181
     d8e:	82 97       	sbiw	r24, 0x22	; 34
     d90:	a1 05       	cpc	r26, r1
     d92:	b1 05       	cpc	r27, r1
     d94:	30 f3       	brcs	.-52     	; 0xd62 <Door_LockUnclock+0xf2>
	//UART_T(START);

	LCD_CLEAR();
     d96:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCD_CLEAR>
	Tickk=0;g_tick=0;
     d9a:	10 92 7e 01 	sts	0x017E, r1
     d9e:	10 92 7f 01 	sts	0x017F, r1
     da2:	10 92 80 01 	sts	0x0180, r1
     da6:	10 92 81 01 	sts	0x0181, r1
     daa:	10 92 82 01 	sts	0x0182, r1
     dae:	10 92 83 01 	sts	0x0183, r1
     db2:	10 92 84 01 	sts	0x0184, r1
     db6:	10 92 85 01 	sts	0x0185, r1
	TIMER1_DeINIT();
     dba:	0e 94 b2 08 	call	0x1164	; 0x1164 <TIMER1_DeINIT>

}
     dbe:	08 95       	ret

00000dc0 <StepThree>:
}
//###############################################################################
// Step Three [ User Entered (+) for Open the door  ]
//###############################################################################
static uint8 StepThree(void)
{
     dc0:	0f 93       	push	r16
     dc2:	1f 93       	push	r17
     dc4:	df 93       	push	r29
     dc6:	cf 93       	push	r28
     dc8:	00 d0       	rcall	.+0      	; 0xdca <StepThree+0xa>
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62
	volatile uint8 password;                                              //Entered Password From User (array from 5 numbers)
	static uint8 counter=1;                                               //Counter to count the wrong input password from user
	volatile uint8 CheckEQ;                                               //Return Value from MC2 to check the Equality of two passwords[0 (NOT EQUAL) or 1 (EQUAL) ]
//DISPLAYING ON LCD TO ENTER THE PASSWORD
	LCD_CLEAR();
     dce:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCD_CLEAR>
     dd2:	28 e8       	ldi	r18, 0x88	; 136
     dd4:	33 e1       	ldi	r19, 0x13	; 19
     dd6:	48 ec       	ldi	r20, 0xC8	; 200
     dd8:	50 e0       	ldi	r21, 0x00	; 0
     dda:	ca 01       	movw	r24, r20
     ddc:	01 97       	sbiw	r24, 0x01	; 1
     dde:	f1 f7       	brne	.-4      	; 0xddc <StepThree+0x1c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     de0:	21 50       	subi	r18, 0x01	; 1
     de2:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     de4:	d1 f7       	brne	.-12     	; 0xdda <StepThree+0x1a>
	_delay_ms(500);
	LCD_STR_R_C(0,0,"Please enter the");
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	60 e0       	ldi	r22, 0x00	; 0
     dea:	4c ed       	ldi	r20, 0xDC	; 220
     dec:	50 e0       	ldi	r21, 0x00	; 0
     dee:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LCD_STR_R_C>
	LCD_STR_R_C(1,0,"password:");
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	60 e0       	ldi	r22, 0x00	; 0
     df6:	4d ee       	ldi	r20, 0xED	; 237
     df8:	50 e0       	ldi	r21, 0x00	; 0
     dfa:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LCD_STR_R_C>
	LCD_moveCursor(1,11);
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	6b e0       	ldi	r22, 0x0B	; 11
     e02:	0e 94 c6 03 	call	0x78c	; 0x78c <LCD_moveCursor>
//RECIEVING FROM USER Through KEYPAD & SENDING FIRST PASSWORD THROUGH UART
	for(i=0;i<NO_PASSWORD;i++)
     e06:	10 92 86 01 	sts	0x0186, r1
     e0a:	08 ec       	ldi	r16, 0xC8	; 200
     e0c:	10 e0       	ldi	r17, 0x00	; 0
	{
		password=KEYPAD();
     e0e:	0e 94 b8 01 	call	0x370	; 0x370 <KEYPAD>
     e12:	89 83       	std	Y+1, r24	; 0x01
		LCD_STR("*");
     e14:	8d e9       	ldi	r24, 0x9D	; 157
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	0e 94 f6 02 	call	0x5ec	; 0x5ec <LCD_STR>
		UART_T(password);
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <UART_T>
     e22:	20 e4       	ldi	r18, 0x40	; 64
     e24:	3f e1       	ldi	r19, 0x1F	; 31
     e26:	c8 01       	movw	r24, r16
     e28:	01 97       	sbiw	r24, 0x01	; 1
     e2a:	f1 f7       	brne	.-4      	; 0xe28 <StepThree+0x68>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e2c:	21 50       	subi	r18, 0x01	; 1
     e2e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e30:	d1 f7       	brne	.-12     	; 0xe26 <StepThree+0x66>
	_delay_ms(500);
	LCD_STR_R_C(0,0,"Please enter the");
	LCD_STR_R_C(1,0,"password:");
	LCD_moveCursor(1,11);
//RECIEVING FROM USER Through KEYPAD & SENDING FIRST PASSWORD THROUGH UART
	for(i=0;i<NO_PASSWORD;i++)
     e32:	80 91 86 01 	lds	r24, 0x0186
     e36:	8f 5f       	subi	r24, 0xFF	; 255
     e38:	80 93 86 01 	sts	0x0186, r24
     e3c:	85 30       	cpi	r24, 0x05	; 5
     e3e:	38 f3       	brcs	.-50     	; 0xe0e <StepThree+0x4e>
		LCD_STR("*");
		UART_T(password);
		_delay_ms(800);
	}
//DISPLAYING PRESS ON ANY KEY TO CONTINUE
	LCD_CLEAR();
     e40:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCD_CLEAR>
     e44:	28 e8       	ldi	r18, 0x88	; 136
     e46:	33 e1       	ldi	r19, 0x13	; 19
     e48:	48 ec       	ldi	r20, 0xC8	; 200
     e4a:	50 e0       	ldi	r21, 0x00	; 0
     e4c:	ca 01       	movw	r24, r20
     e4e:	01 97       	sbiw	r24, 0x01	; 1
     e50:	f1 f7       	brne	.-4      	; 0xe4e <StepThree+0x8e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e52:	21 50       	subi	r18, 0x01	; 1
     e54:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e56:	d1 f7       	brne	.-12     	; 0xe4c <StepThree+0x8c>
	_delay_ms(500);
	LCD_STR_R_C(0,0,"Press on any key");
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	60 e0       	ldi	r22, 0x00	; 0
     e5c:	4f e9       	ldi	r20, 0x9F	; 159
     e5e:	50 e0       	ldi	r21, 0x00	; 0
     e60:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LCD_STR_R_C>
	LCD_STR_R_C(1,0,"to continue.");
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	60 e0       	ldi	r22, 0x00	; 0
     e68:	40 eb       	ldi	r20, 0xB0	; 176
     e6a:	50 e0       	ldi	r21, 0x00	; 0
     e6c:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LCD_STR_R_C>
	while(KEYPAD()<0);
     e70:	0e 94 b8 01 	call	0x370	; 0x370 <KEYPAD>
//WAITING THE RESPONSE FROM MC2 TO CHECK EQUALITY
	CheckEQ=UART_R();
     e74:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <UART_R>
     e78:	8a 83       	std	Y+2, r24	; 0x02
//########################################################
	if(CheckEQ==EQUAL)                    //IN CASE OF EQUAL PASSWORDS
     e7a:	1a 81       	ldd	r17, Y+2	; 0x02
     e7c:	11 30       	cpi	r17, 0x01	; 1
     e7e:	09 f4       	brne	.+2      	; 0xe82 <StepThree+0xc2>
     e80:	3b c0       	rjmp	.+118    	; 0xef8 <StepThree+0x138>

		return CheckEQ;
	}
	else
	{
		if (counter ==MAX_WRONG_PASS)
     e82:	80 91 75 01 	lds	r24, 0x0175
     e86:	83 30       	cpi	r24, 0x03	; 3
     e88:	41 f1       	breq	.+80     	; 0xeda <StepThree+0x11a>
			counter=1;
			return ERROR_PASS;
		}
		else
		{
			UART_T(START);
     e8a:	88 e0       	ldi	r24, 0x08	; 8
     e8c:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <UART_T>
			counter++;
     e90:	80 91 75 01 	lds	r24, 0x0175
     e94:	8f 5f       	subi	r24, 0xFF	; 255
     e96:	80 93 75 01 	sts	0x0175, r24
			LCD_CLEAR();
     e9a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCD_CLEAR>
			LCD_STR_R_C(0,0,"Not the same");
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	60 e0       	ldi	r22, 0x00	; 0
     ea2:	47 ef       	ldi	r20, 0xF7	; 247
     ea4:	50 e0       	ldi	r21, 0x00	; 0
     ea6:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LCD_STR_R_C>
			LCD_STR_R_C(1,0,"Try Again");_delay_ms(500);
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	49 e3       	ldi	r20, 0x39	; 57
     eb0:	51 e0       	ldi	r21, 0x01	; 1
     eb2:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LCD_STR_R_C>
     eb6:	28 e8       	ldi	r18, 0x88	; 136
     eb8:	33 e1       	ldi	r19, 0x13	; 19
     eba:	48 ec       	ldi	r20, 0xC8	; 200
     ebc:	50 e0       	ldi	r21, 0x00	; 0
     ebe:	ca 01       	movw	r24, r20
     ec0:	01 97       	sbiw	r24, 0x01	; 1
     ec2:	f1 f7       	brne	.-4      	; 0xec0 <StepThree+0x100>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ec4:	21 50       	subi	r18, 0x01	; 1
     ec6:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ec8:	d1 f7       	brne	.-12     	; 0xebe <StepThree+0xfe>
     eca:	80 e0       	ldi	r24, 0x00	; 0
			return NOTEQUAL;

		}
	}
}
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	1f 91       	pop	r17
     ed6:	0f 91       	pop	r16
     ed8:	08 95       	ret
	}
	else
	{
		if (counter ==MAX_WRONG_PASS)
		{
			ErrorMessage(&TIM1);
     eda:	8e e6       	ldi	r24, 0x6E	; 110
     edc:	91 e0       	ldi	r25, 0x01	; 1
     ede:	0e 94 4a 05 	call	0xa94	; 0xa94 <ErrorMessage>
			counter=1;
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	80 93 75 01 	sts	0x0175, r24
     ee8:	82 e0       	ldi	r24, 0x02	; 2
			LCD_STR_R_C(1,0,"Try Again");_delay_ms(500);
			return NOTEQUAL;

		}
	}
}
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	cf 91       	pop	r28
     ef0:	df 91       	pop	r29
     ef2:	1f 91       	pop	r17
     ef4:	0f 91       	pop	r16
     ef6:	08 95       	ret
//WAITING THE RESPONSE FROM MC2 TO CHECK EQUALITY
	CheckEQ=UART_R();
//########################################################
	if(CheckEQ==EQUAL)                    //IN CASE OF EQUAL PASSWORDS
	{
		Door_LockUnclock(&TIM1);
     ef8:	8e e6       	ldi	r24, 0x6E	; 110
     efa:	91 e0       	ldi	r25, 0x01	; 1
     efc:	0e 94 38 06 	call	0xc70	; 0xc70 <Door_LockUnclock>
		counter=1;
     f00:	10 93 75 01 	sts	0x0175, r17

		return CheckEQ;
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	e2 cf       	rjmp	.-60     	; 0xecc <StepThree+0x10c>

00000f08 <main>:
}
//###########################################################################################################################
//######################################## MAIN PROGRAM #####################################################################
//###########################################################################################################################
int main()
{
     f08:	ff 92       	push	r15
     f0a:	0f 93       	push	r16
     f0c:	1f 93       	push	r17
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
     f16:	2c 97       	sbiw	r28, 0x0c	; 12
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	f8 94       	cli
     f1c:	de bf       	out	0x3e, r29	; 62
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	cd bf       	out	0x3d, r28	; 61
	Timer1_setCallBack(CallBackTimer);
     f22:	83 e3       	ldi	r24, 0x33	; 51
     f24:	94 e0       	ldi	r25, 0x04	; 4
     f26:	0e 94 ba 08 	call	0x1174	; 0x1174 <Timer1_setCallBack>

	SREG |= (1<<7);
     f2a:	8f b7       	in	r24, 0x3f	; 63
     f2c:	80 68       	ori	r24, 0x80	; 128
     f2e:	8f bf       	out	0x3f, r24	; 63
//############### LOCAL VARIABLES ##########################################################################
	uint8 start=1;
	volatile uint8 state;                      //RESPONSE FROM EACH STEP
	UART_ConfigType UART1_M = {data_8,even,one_bit,Baud};
     f30:	ce 01       	movw	r24, r28
     f32:	06 96       	adiw	r24, 0x06	; 6
     f34:	dc 01       	movw	r26, r24
     f36:	e7 e7       	ldi	r30, 0x77	; 119
     f38:	f1 e0       	ldi	r31, 0x01	; 1
     f3a:	27 e0       	ldi	r18, 0x07	; 7
     f3c:	01 90       	ld	r0, Z+
     f3e:	0d 92       	st	X+, r0
     f40:	21 50       	subi	r18, 0x01	; 1
     f42:	e1 f7       	brne	.-8      	; 0xf3c <main+0x34>
//############# INIT OF EACH PERIPHRALS ###################################################################
	UART_INIT(&UART1_M);
     f44:	0e 94 bf 08 	call	0x117e	; 0x117e <UART_INIT>
	LCD_INIT();
     f48:	0e 94 01 04 	call	0x802	; 0x802 <LCD_INIT>
     f4c:	91 e0       	ldi	r25, 0x01	; 1
     f4e:	08 ec       	ldi	r16, 0xC8	; 200
     f50:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
//############################################################################################################
	if(text==1)
	{LCD_CLEAR();LCD_STR("Accepted.");_delay_ms(500);}
	text=1;
     f52:	ff 24       	eor	r15, r15
     f54:	f3 94       	inc	r15

}
//######################## MAIN TASKS OF MC1 ##############################################################
static uint8 Tasks(volatile uint8 Startt)
{
	volatile uint8 Start=Startt;             //Check Start (If is it First start or not ) for disp/not disp HELLO on LCD
     f56:	9a 83       	std	Y+2, r25	; 0x02
	volatile uint8 state;                    //RESPONSE FROM EACH STEP
	volatile uint8 St1;                      //Step One
	volatile uint8 St2;                      //Step Two

	if(Start==FIRST_TIME_START)
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	81 30       	cpi	r24, 0x01	; 1
     f5c:	21 f1       	breq	.+72     	; 0xfa6 <main+0x9e>
			LCD_CLEAR();LCD_STR("Try Again.")   ;_delay_ms(500);
			St1=StepOne();
		}
	}
//############################################################################################################
	if(text==1)
     f5e:	80 91 74 01 	lds	r24, 0x0174
     f62:	81 30       	cpi	r24, 0x01	; 1
     f64:	09 f4       	brne	.+2      	; 0xf68 <main+0x60>
     f66:	5a c0       	rjmp	.+180    	; 0x101c <main+0x114>
	{LCD_CLEAR();LCD_STR("Accepted.");_delay_ms(500);}
	text=1;
     f68:	f0 92 74 01 	sts	0x0174, r15
     f6c:	03 c0       	rjmp	.+6      	; 0xf74 <main+0x6c>
//STEP_TWO  ##################################################################################################
	St2=StepTwo();
	while (St2==FAULT_RESPONSE){UART_T(FAULT_RESPONSE);St2=StepTwo();}
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <UART_T>
//############################################################################################################
	if(text==1)
	{LCD_CLEAR();LCD_STR("Accepted.");_delay_ms(500);}
	text=1;
//STEP_TWO  ##################################################################################################
	St2=StepTwo();
     f74:	0e 94 67 04 	call	0x8ce	; 0x8ce <StepTwo>
     f78:	8d 83       	std	Y+5, r24	; 0x05
	while (St2==FAULT_RESPONSE){UART_T(FAULT_RESPONSE);St2=StepTwo();}
     f7a:	8d 81       	ldd	r24, Y+5	; 0x05
     f7c:	88 23       	and	r24, r24
     f7e:	b9 f3       	breq	.-18     	; 0xf6e <main+0x66>
//STEP_THREE  ##################################################################################################
	if(St2==OPEN_DOOR)
     f80:	8d 81       	ldd	r24, Y+5	; 0x05
     f82:	81 30       	cpi	r24, 0x01	; 1
     f84:	09 f4       	brne	.+2      	; 0xf88 <main+0x80>
     f86:	40 c0       	rjmp	.+128    	; 0x1008 <main+0x100>
		UART_T(STEP_THREE);
		state= StepThree();
		while(state==NOTEQUAL){state=StepThree();}
	}
//STEP_FOUR   ##################################################################################################
	else if (St2==CHANGE_PASSWORD)
     f88:	8d 81       	ldd	r24, Y+5	; 0x05
     f8a:	82 30       	cpi	r24, 0x02	; 2
     f8c:	09 f4       	brne	.+2      	; 0xf90 <main+0x88>
     f8e:	55 c0       	rjmp	.+170    	; 0x103a <main+0x132>
		UART_T(STEP_FOUR);
		state= StepFour();
		while(state==NOTEQUAL){state=StepFour();}

	}
	return state;
     f90:	8b 81       	ldd	r24, Y+3	; 0x03
	LCD_INIT();
//############# MAIN LOOP ####################################################################################
	while(1)
	{

		state=Tasks(start);
     f92:	89 83       	std	Y+1, r24	; 0x01
		if(state==1){start=1;}
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	81 30       	cpi	r24, 0x01	; 1
     f9a:	e9 f6       	brne	.-70     	; 0xf56 <main+0x4e>
     f9c:	91 e0       	ldi	r25, 0x01	; 1

}
//######################## MAIN TASKS OF MC1 ##############################################################
static uint8 Tasks(volatile uint8 Startt)
{
	volatile uint8 Start=Startt;             //Check Start (If is it First start or not ) for disp/not disp HELLO on LCD
     f9e:	9a 83       	std	Y+2, r25	; 0x02
	volatile uint8 state;                    //RESPONSE FROM EACH STEP
	volatile uint8 St1;                      //Step One
	volatile uint8 St2;                      //Step Two

	if(Start==FIRST_TIME_START)
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	81 30       	cpi	r24, 0x01	; 1
     fa4:	e1 f6       	brne	.-72     	; 0xf5e <main+0x56>
	{
//DISPLAYING HELLO ( FOR THE FIRST TIME APP. START ) #########################################################
		LCD_CLEAR();LCD_STR("_HELLO_");_delay_ms(500);
     fa6:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCD_CLEAR>
     faa:	83 e4       	ldi	r24, 0x43	; 67
     fac:	91 e0       	ldi	r25, 0x01	; 1
     fae:	0e 94 f6 02 	call	0x5ec	; 0x5ec <LCD_STR>
     fb2:	28 e8       	ldi	r18, 0x88	; 136
     fb4:	33 e1       	ldi	r19, 0x13	; 19
     fb6:	c8 01       	movw	r24, r16
     fb8:	01 97       	sbiw	r24, 0x01	; 1
     fba:	f1 f7       	brne	.-4      	; 0xfb8 <main+0xb0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fbc:	21 50       	subi	r18, 0x01	; 1
     fbe:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fc0:	d1 f7       	brne	.-12     	; 0xfb6 <main+0xae>
//STEP_ONE  ##################################################################################################
		St1=StepOne();
     fc2:	0e 94 92 04 	call	0x924	; 0x924 <StepOne>
     fc6:	8c 83       	std	Y+4, r24	; 0x04
		while (St1==NOTEQUAL)
     fc8:	8c 81       	ldd	r24, Y+4	; 0x04
     fca:	88 23       	and	r24, r24
     fcc:	41 f6       	brne	.-112    	; 0xf5e <main+0x56>
		{
			LCD_CLEAR();LCD_STR("Not the same.");_delay_ms(500);
     fce:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCD_CLEAR>
     fd2:	8b e4       	ldi	r24, 0x4B	; 75
     fd4:	91 e0       	ldi	r25, 0x01	; 1
     fd6:	0e 94 f6 02 	call	0x5ec	; 0x5ec <LCD_STR>
     fda:	28 e8       	ldi	r18, 0x88	; 136
     fdc:	33 e1       	ldi	r19, 0x13	; 19
     fde:	c8 01       	movw	r24, r16
     fe0:	01 97       	sbiw	r24, 0x01	; 1
     fe2:	f1 f7       	brne	.-4      	; 0xfe0 <main+0xd8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fe4:	21 50       	subi	r18, 0x01	; 1
     fe6:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fe8:	d1 f7       	brne	.-12     	; 0xfde <main+0xd6>
			LCD_CLEAR();LCD_STR("Try Again.")   ;_delay_ms(500);
     fea:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCD_CLEAR>
     fee:	89 e5       	ldi	r24, 0x59	; 89
     ff0:	91 e0       	ldi	r25, 0x01	; 1
     ff2:	0e 94 f6 02 	call	0x5ec	; 0x5ec <LCD_STR>
     ff6:	28 e8       	ldi	r18, 0x88	; 136
     ff8:	33 e1       	ldi	r19, 0x13	; 19
     ffa:	c8 01       	movw	r24, r16
     ffc:	01 97       	sbiw	r24, 0x01	; 1
     ffe:	f1 f7       	brne	.-4      	; 0xffc <main+0xf4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1000:	21 50       	subi	r18, 0x01	; 1
    1002:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1004:	d1 f7       	brne	.-12     	; 0xffa <main+0xf2>
    1006:	dd cf       	rjmp	.-70     	; 0xfc2 <main+0xba>
	St2=StepTwo();
	while (St2==FAULT_RESPONSE){UART_T(FAULT_RESPONSE);St2=StepTwo();}
//STEP_THREE  ##################################################################################################
	if(St2==OPEN_DOOR)
	{
		UART_T(STEP_THREE);
    1008:	83 e0       	ldi	r24, 0x03	; 3
    100a:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <UART_T>
		state= StepThree();
    100e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <StepThree>
    1012:	8b 83       	std	Y+3, r24	; 0x03
		while(state==NOTEQUAL){state=StepThree();}
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	88 23       	and	r24, r24
    1018:	d1 f3       	breq	.-12     	; 0x100e <main+0x106>
    101a:	ba cf       	rjmp	.-140    	; 0xf90 <main+0x88>
			St1=StepOne();
		}
	}
//############################################################################################################
	if(text==1)
	{LCD_CLEAR();LCD_STR("Accepted.");_delay_ms(500);}
    101c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <LCD_CLEAR>
    1020:	84 e6       	ldi	r24, 0x64	; 100
    1022:	91 e0       	ldi	r25, 0x01	; 1
    1024:	0e 94 f6 02 	call	0x5ec	; 0x5ec <LCD_STR>
    1028:	28 e8       	ldi	r18, 0x88	; 136
    102a:	33 e1       	ldi	r19, 0x13	; 19
    102c:	c8 01       	movw	r24, r16
    102e:	01 97       	sbiw	r24, 0x01	; 1
    1030:	f1 f7       	brne	.-4      	; 0x102e <main+0x126>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1032:	21 50       	subi	r18, 0x01	; 1
    1034:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1036:	d1 f7       	brne	.-12     	; 0x102c <main+0x124>
    1038:	97 cf       	rjmp	.-210    	; 0xf68 <main+0x60>
		while(state==NOTEQUAL){state=StepThree();}
	}
//STEP_FOUR   ##################################################################################################
	else if (St2==CHANGE_PASSWORD)
	{
		UART_T(STEP_FOUR);
    103a:	84 e0       	ldi	r24, 0x04	; 4
    103c:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <UART_T>
		state= StepFour();
    1040:	0e 94 98 05 	call	0xb30	; 0xb30 <StepFour>
    1044:	8b 83       	std	Y+3, r24	; 0x03
		while(state==NOTEQUAL){state=StepFour();}
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	88 23       	and	r24, r24
    104a:	d1 f3       	breq	.-12     	; 0x1040 <main+0x138>
    104c:	a1 cf       	rjmp	.-190    	; 0xf90 <main+0x88>

0000104e <__vector_9>:
#include<avr/io.h>
#include<avr/interrupt.h>
static    void (*g_callBackPtr)(void) = NULL_PTR;    //Pointer to [ void function (void) ]
//################ INTERRUPTS SERVICES #######################################
ISR(TIMER1_OVF_vect)
{
    104e:	1f 92       	push	r1
    1050:	0f 92       	push	r0
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	0f 92       	push	r0
    1056:	11 24       	eor	r1, r1
    1058:	2f 93       	push	r18
    105a:	3f 93       	push	r19
    105c:	4f 93       	push	r20
    105e:	5f 93       	push	r21
    1060:	6f 93       	push	r22
    1062:	7f 93       	push	r23
    1064:	8f 93       	push	r24
    1066:	9f 93       	push	r25
    1068:	af 93       	push	r26
    106a:	bf 93       	push	r27
    106c:	ef 93       	push	r30
    106e:	ff 93       	push	r31
	if(g_callBackPtr != NULL_PTR)
    1070:	e0 91 87 01 	lds	r30, 0x0187
    1074:	f0 91 88 01 	lds	r31, 0x0188
    1078:	30 97       	sbiw	r30, 0x00	; 0
    107a:	09 f0       	breq	.+2      	; 0x107e <__vector_9+0x30>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    107c:	09 95       	icall
	}
}
    107e:	ff 91       	pop	r31
    1080:	ef 91       	pop	r30
    1082:	bf 91       	pop	r27
    1084:	af 91       	pop	r26
    1086:	9f 91       	pop	r25
    1088:	8f 91       	pop	r24
    108a:	7f 91       	pop	r23
    108c:	6f 91       	pop	r22
    108e:	5f 91       	pop	r21
    1090:	4f 91       	pop	r20
    1092:	3f 91       	pop	r19
    1094:	2f 91       	pop	r18
    1096:	0f 90       	pop	r0
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	0f 90       	pop	r0
    109c:	1f 90       	pop	r1
    109e:	18 95       	reti

000010a0 <__vector_7>:
ISR(TIMER1_COMPA_vect)
{
    10a0:	1f 92       	push	r1
    10a2:	0f 92       	push	r0
    10a4:	0f b6       	in	r0, 0x3f	; 63
    10a6:	0f 92       	push	r0
    10a8:	11 24       	eor	r1, r1
    10aa:	2f 93       	push	r18
    10ac:	3f 93       	push	r19
    10ae:	4f 93       	push	r20
    10b0:	5f 93       	push	r21
    10b2:	6f 93       	push	r22
    10b4:	7f 93       	push	r23
    10b6:	8f 93       	push	r24
    10b8:	9f 93       	push	r25
    10ba:	af 93       	push	r26
    10bc:	bf 93       	push	r27
    10be:	ef 93       	push	r30
    10c0:	ff 93       	push	r31
	if(g_callBackPtr != NULL_PTR)
    10c2:	e0 91 87 01 	lds	r30, 0x0187
    10c6:	f0 91 88 01 	lds	r31, 0x0188
    10ca:	30 97       	sbiw	r30, 0x00	; 0
    10cc:	09 f0       	breq	.+2      	; 0x10d0 <__vector_7+0x30>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    10ce:	09 95       	icall
	}

}
    10d0:	ff 91       	pop	r31
    10d2:	ef 91       	pop	r30
    10d4:	bf 91       	pop	r27
    10d6:	af 91       	pop	r26
    10d8:	9f 91       	pop	r25
    10da:	8f 91       	pop	r24
    10dc:	7f 91       	pop	r23
    10de:	6f 91       	pop	r22
    10e0:	5f 91       	pop	r21
    10e2:	4f 91       	pop	r20
    10e4:	3f 91       	pop	r19
    10e6:	2f 91       	pop	r18
    10e8:	0f 90       	pop	r0
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	0f 90       	pop	r0
    10ee:	1f 90       	pop	r1
    10f0:	18 95       	reti

000010f2 <TIMER1_INIT>:
//################  START TIMER1 ####################################################
void TIMER1_INIT(const Timer1_ConfigType * Config_Ptr)
{
    10f2:	fc 01       	movw	r30, r24
	TCCR1A = (1<<FOC1A);
	TCCR1A=(TCCR1A&0xFC)|(Config_Ptr->mode &0x03);
	TCCR1B=(TCCR1B&0xE7)|(Config_Ptr->mode &0x18);
	TCCR1B=(TCCR1B&0xF8)|(Config_Ptr->prescaler &0x07);*/

	TCCR1A=(1<<FOC1A)|(GET_BIT(Config_Ptr->mode,0)<<WGM10)|(GET_BIT(Config_Ptr->mode,1)<<WGM11);
    10f4:	45 81       	ldd	r20, Z+5	; 0x05
    10f6:	84 2f       	mov	r24, r20
    10f8:	83 70       	andi	r24, 0x03	; 3
    10fa:	88 60       	ori	r24, 0x08	; 8
    10fc:	8f bd       	out	0x2f, r24	; 47
	TCCR1B=(GET_BIT(Config_Ptr->mode,2)<<WGM12)|(GET_BIT(Config_Ptr->mode,3)<<WGM13)|(Config_Ptr->prescaler);
    10fe:	84 2f       	mov	r24, r20
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	9c 01       	movw	r18, r24
    1104:	24 70       	andi	r18, 0x04	; 4
    1106:	30 70       	andi	r19, 0x00	; 0
    1108:	35 95       	asr	r19
    110a:	27 95       	ror	r18
    110c:	35 95       	asr	r19
    110e:	27 95       	ror	r18
    1110:	22 0f       	add	r18, r18
    1112:	33 1f       	adc	r19, r19
    1114:	22 0f       	add	r18, r18
    1116:	33 1f       	adc	r19, r19
    1118:	22 0f       	add	r18, r18
    111a:	33 1f       	adc	r19, r19
    111c:	88 70       	andi	r24, 0x08	; 8
    111e:	90 70       	andi	r25, 0x00	; 0
    1120:	95 95       	asr	r25
    1122:	87 95       	ror	r24
    1124:	95 95       	asr	r25
    1126:	87 95       	ror	r24
    1128:	95 95       	asr	r25
    112a:	87 95       	ror	r24
    112c:	82 95       	swap	r24
    112e:	92 95       	swap	r25
    1130:	90 7f       	andi	r25, 0xF0	; 240
    1132:	98 27       	eor	r25, r24
    1134:	80 7f       	andi	r24, 0xF0	; 240
    1136:	98 27       	eor	r25, r24
    1138:	28 2b       	or	r18, r24
    113a:	84 81       	ldd	r24, Z+4	; 0x04
    113c:	28 2b       	or	r18, r24
    113e:	2e bd       	out	0x2e, r18	; 46
	TCNT1=(Config_Ptr->Initial_value);
    1140:	80 81       	ld	r24, Z
    1142:	91 81       	ldd	r25, Z+1	; 0x01
    1144:	9d bd       	out	0x2d, r25	; 45
    1146:	8c bd       	out	0x2c, r24	; 44
	if((Config_Ptr->mode)==CTC_mode){
    1148:	44 30       	cpi	r20, 0x04	; 4
    114a:	21 f0       	breq	.+8      	; 0x1154 <TIMER1_INIT+0x62>
		OCR1A=(Config_Ptr->Compare_value);
		TIMSK|=(1<<OCIE1A);
	}
	else{
		TIMSK|=(1<<TOIE1);
    114c:	89 b7       	in	r24, 0x39	; 57
    114e:	84 60       	ori	r24, 0x04	; 4
    1150:	89 bf       	out	0x39, r24	; 57
    1152:	08 95       	ret

	TCCR1A=(1<<FOC1A)|(GET_BIT(Config_Ptr->mode,0)<<WGM10)|(GET_BIT(Config_Ptr->mode,1)<<WGM11);
	TCCR1B=(GET_BIT(Config_Ptr->mode,2)<<WGM12)|(GET_BIT(Config_Ptr->mode,3)<<WGM13)|(Config_Ptr->prescaler);
	TCNT1=(Config_Ptr->Initial_value);
	if((Config_Ptr->mode)==CTC_mode){
		OCR1A=(Config_Ptr->Compare_value);
    1154:	82 81       	ldd	r24, Z+2	; 0x02
    1156:	93 81       	ldd	r25, Z+3	; 0x03
    1158:	9b bd       	out	0x2b, r25	; 43
    115a:	8a bd       	out	0x2a, r24	; 42
		TIMSK|=(1<<OCIE1A);
    115c:	89 b7       	in	r24, 0x39	; 57
    115e:	80 61       	ori	r24, 0x10	; 16
    1160:	89 bf       	out	0x39, r24	; 57
    1162:	08 95       	ret

00001164 <TIMER1_DeINIT>:

}
//################  CLOSE THE TIMER1 ############################################
void TIMER1_DeINIT(void)
{
	TCCR1B|=StopCounter;
    1164:	8e b5       	in	r24, 0x2e	; 46
    1166:	8e bd       	out	0x2e, r24	; 46
	TCNT1=0;
    1168:	1d bc       	out	0x2d, r1	; 45
    116a:	1c bc       	out	0x2c, r1	; 44
	TIMSK&=~(1<<OCIE1A)&~(1<<TOIE1);
    116c:	89 b7       	in	r24, 0x39	; 57
    116e:	8b 7e       	andi	r24, 0xEB	; 235
    1170:	89 bf       	out	0x39, r24	; 57
}
    1172:	08 95       	ret

00001174 <Timer1_setCallBack>:
//################################################################################
void Timer1_setCallBack(void(*a_ptr)(void))
{
	g_callBackPtr = a_ptr;
    1174:	90 93 88 01 	sts	0x0188, r25
    1178:	80 93 87 01 	sts	0x0187, r24
}
    117c:	08 95       	ret

0000117e <UART_INIT>:
 *
 *
 *
 */
void UART_INIT(const UART_ConfigType * Config_Ptr)
{
    117e:	fc 01       	movw	r30, r24
    	uint16 ubrrValue;

		/* U2X = 1 for double transmission speed */
		UCSRA = (1<<U2X);
    1180:	82 e0       	ldi	r24, 0x02	; 2
    1182:	8b b9       	out	0x0b, r24	; 11
		 * RXEN  = 1 Receiver Enable
		 * RXEN  = 1 Transmitter Enable
		 * UCSZ2 = 0 For 8-bit data mode
		 * RXB8 & TXB8 not used for 8-bit data mode
		 ***********************************************************************/
		UCSRB = (1<<RXEN) | (1<<TXEN);
    1184:	88 e1       	ldi	r24, 0x18	; 24
    1186:	8a b9       	out	0x0a, r24	; 10
		 * UPM1:0  = 00 Disable parity bit
		 * USBS    = 0 One stop bit
		 * UCSZ1:0 = 11 For 8-bit data mode
		 * UCPOL   = 0 Used with the Synchronous operation only
		 ***********************************************************************/
		UCSRC = (1<<URSEL) ;
    1188:	80 e8       	ldi	r24, 0x80	; 128
    118a:	80 bd       	out	0x20, r24	; 32
		UCSRC=(UCSRC&0xCF)|((  (Config_Ptr->parity  )<<UPM0 ) &0x30 );
    118c:	90 b5       	in	r25, 0x20	; 32
    118e:	81 81       	ldd	r24, Z+1	; 0x01
    1190:	82 95       	swap	r24
    1192:	80 73       	andi	r24, 0x30	; 48
    1194:	9f 7c       	andi	r25, 0xCF	; 207
    1196:	89 2b       	or	r24, r25
    1198:	80 bd       	out	0x20, r24	; 32
		UCSRC=(UCSRC&0xF9)|((  (Config_Ptr->bit_data)<<UCSZ0) &0x06 );
    119a:	90 b5       	in	r25, 0x20	; 32
    119c:	80 81       	ld	r24, Z
    119e:	88 0f       	add	r24, r24
    11a0:	86 70       	andi	r24, 0x06	; 6
    11a2:	99 7f       	andi	r25, 0xF9	; 249
    11a4:	89 2b       	or	r24, r25
    11a6:	80 bd       	out	0x20, r24	; 32
		UCSRC=(UCSRC&0xF7)|((  (Config_Ptr->stop_bit)<<USBS ) &0x08 );
    11a8:	90 b5       	in	r25, 0x20	; 32
    11aa:	82 81       	ldd	r24, Z+2	; 0x02
    11ac:	88 0f       	add	r24, r24
    11ae:	88 0f       	add	r24, r24
    11b0:	88 0f       	add	r24, r24
    11b2:	88 70       	andi	r24, 0x08	; 8
    11b4:	97 7f       	andi	r25, 0xF7	; 247
    11b6:	89 2b       	or	r24, r25
    11b8:	80 bd       	out	0x20, r24	; 32
		ubrrValue = (uint16)(((F_CPU / ((Config_Ptr->baudrate) * 8))) - 1);
    11ba:	23 81       	ldd	r18, Z+3	; 0x03
    11bc:	34 81       	ldd	r19, Z+4	; 0x04
    11be:	45 81       	ldd	r20, Z+5	; 0x05
    11c0:	56 81       	ldd	r21, Z+6	; 0x06
    11c2:	22 0f       	add	r18, r18
    11c4:	33 1f       	adc	r19, r19
    11c6:	44 1f       	adc	r20, r20
    11c8:	55 1f       	adc	r21, r21
    11ca:	22 0f       	add	r18, r18
    11cc:	33 1f       	adc	r19, r19
    11ce:	44 1f       	adc	r20, r20
    11d0:	55 1f       	adc	r21, r21
    11d2:	22 0f       	add	r18, r18
    11d4:	33 1f       	adc	r19, r19
    11d6:	44 1f       	adc	r20, r20
    11d8:	55 1f       	adc	r21, r21
    11da:	60 e0       	ldi	r22, 0x00	; 0
    11dc:	72 e1       	ldi	r23, 0x12	; 18
    11de:	8a e7       	ldi	r24, 0x7A	; 122
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	0e 94 1c 09 	call	0x1238	; 0x1238 <__udivmodsi4>
    11e6:	21 50       	subi	r18, 0x01	; 1
    11e8:	30 40       	sbci	r19, 0x00	; 0
		/* Calculate the UBRR register value */
		//ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);

		/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/

		UBRRH = ubrrValue>>8;
    11ea:	30 bd       	out	0x20, r19	; 32
		UBRRL = ubrrValue;
    11ec:	29 b9       	out	0x09, r18	; 9



}
    11ee:	08 95       	ret

000011f0 <UART_T>:
void UART_T(const uint8 data)
{
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    11f0:	5d 9b       	sbis	0x0b, 5	; 11
    11f2:	fe cf       	rjmp	.-4      	; 0x11f0 <UART_T>
	UDR = data;
    11f4:	8c b9       	out	0x0c, r24	; 12
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    11f6:	08 95       	ret

000011f8 <UART_R>:
uint8 UART_R(void)
{
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    11f8:	5f 9b       	sbis	0x0b, 7	; 11
    11fa:	fe cf       	rjmp	.-4      	; 0x11f8 <UART_R>
    return UDR;
    11fc:	8c b1       	in	r24, 0x0c	; 12
}
    11fe:	08 95       	ret

00001200 <UART_T_STR>:
void UART_T_STR(const uint8 *ptr)
{
    1200:	fc 01       	movw	r30, r24
	while(*ptr != '\0')
    1202:	80 81       	ld	r24, Z
    1204:	88 23       	and	r24, r24
    1206:	39 f0       	breq	.+14     	; 0x1216 <UART_T_STR+0x16>


}
void UART_T(const uint8 data)
{
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1208:	5d 9b       	sbis	0x0b, 5	; 11
    120a:	fe cf       	rjmp	.-4      	; 0x1208 <UART_T_STR+0x8>
	UDR = data;
    120c:	8c b9       	out	0x0c, r24	; 12
void UART_T_STR(const uint8 *ptr)
{
	while(*ptr != '\0')
	{
		UART_T(*ptr);
		ptr++;
    120e:	31 96       	adiw	r30, 0x01	; 1
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    return UDR;
}
void UART_T_STR(const uint8 *ptr)
{
	while(*ptr != '\0')
    1210:	80 81       	ld	r24, Z
    1212:	88 23       	and	r24, r24
    1214:	c9 f7       	brne	.-14     	; 0x1208 <UART_T_STR+0x8>
    1216:	08 95       	ret

00001218 <UART_R_STR>:
		ptr++;
	}
}

void UART_R_STR(uint8 *ptr)
{
    1218:	fc 01       	movw	r30, r24
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
uint8 UART_R(void)
{
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    121a:	5f 9b       	sbis	0x0b, 7	; 11
    121c:	fe cf       	rjmp	.-4      	; 0x121a <UART_R_STR+0x2>
    return UDR;
    121e:	8c b1       	in	r24, 0x0c	; 12
	}
}

void UART_R_STR(uint8 *ptr)
{
	*ptr = UART_R();
    1220:	80 83       	st	Z, r24
	while(*ptr != '#')
    1222:	83 32       	cpi	r24, 0x23	; 35
    1224:	39 f0       	breq	.+14     	; 0x1234 <UART_R_STR+0x1c>
	{
		ptr++;
    1226:	31 96       	adiw	r30, 0x01	; 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
uint8 UART_R(void)
{
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1228:	5f 9b       	sbis	0x0b, 7	; 11
    122a:	fe cf       	rjmp	.-4      	; 0x1228 <UART_R_STR+0x10>
    return UDR;
    122c:	8c b1       	in	r24, 0x0c	; 12
	}
}

void UART_R_STR(uint8 *ptr)
{
	*ptr = UART_R();
    122e:	80 83       	st	Z, r24
	while(*ptr != '#')
    1230:	83 32       	cpi	r24, 0x23	; 35
    1232:	c9 f7       	brne	.-14     	; 0x1226 <UART_R_STR+0xe>
	{
		ptr++;
		*ptr = UART_R();
	}
	*ptr = '\0';
    1234:	10 82       	st	Z, r1
}
    1236:	08 95       	ret

00001238 <__udivmodsi4>:
    1238:	a1 e2       	ldi	r26, 0x21	; 33
    123a:	1a 2e       	mov	r1, r26
    123c:	aa 1b       	sub	r26, r26
    123e:	bb 1b       	sub	r27, r27
    1240:	fd 01       	movw	r30, r26
    1242:	0d c0       	rjmp	.+26     	; 0x125e <__udivmodsi4_ep>

00001244 <__udivmodsi4_loop>:
    1244:	aa 1f       	adc	r26, r26
    1246:	bb 1f       	adc	r27, r27
    1248:	ee 1f       	adc	r30, r30
    124a:	ff 1f       	adc	r31, r31
    124c:	a2 17       	cp	r26, r18
    124e:	b3 07       	cpc	r27, r19
    1250:	e4 07       	cpc	r30, r20
    1252:	f5 07       	cpc	r31, r21
    1254:	20 f0       	brcs	.+8      	; 0x125e <__udivmodsi4_ep>
    1256:	a2 1b       	sub	r26, r18
    1258:	b3 0b       	sbc	r27, r19
    125a:	e4 0b       	sbc	r30, r20
    125c:	f5 0b       	sbc	r31, r21

0000125e <__udivmodsi4_ep>:
    125e:	66 1f       	adc	r22, r22
    1260:	77 1f       	adc	r23, r23
    1262:	88 1f       	adc	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	1a 94       	dec	r1
    1268:	69 f7       	brne	.-38     	; 0x1244 <__udivmodsi4_loop>
    126a:	60 95       	com	r22
    126c:	70 95       	com	r23
    126e:	80 95       	com	r24
    1270:	90 95       	com	r25
    1272:	9b 01       	movw	r18, r22
    1274:	ac 01       	movw	r20, r24
    1276:	bd 01       	movw	r22, r26
    1278:	cf 01       	movw	r24, r30
    127a:	08 95       	ret

0000127c <itoa>:
    127c:	fb 01       	movw	r30, r22
    127e:	9f 01       	movw	r18, r30
    1280:	e8 94       	clt
    1282:	42 30       	cpi	r20, 0x02	; 2
    1284:	c4 f0       	brlt	.+48     	; 0x12b6 <itoa+0x3a>
    1286:	45 32       	cpi	r20, 0x25	; 37
    1288:	b4 f4       	brge	.+44     	; 0x12b6 <itoa+0x3a>
    128a:	4a 30       	cpi	r20, 0x0A	; 10
    128c:	29 f4       	brne	.+10     	; 0x1298 <itoa+0x1c>
    128e:	97 fb       	bst	r25, 7
    1290:	1e f4       	brtc	.+6      	; 0x1298 <itoa+0x1c>
    1292:	90 95       	com	r25
    1294:	81 95       	neg	r24
    1296:	9f 4f       	sbci	r25, 0xFF	; 255
    1298:	64 2f       	mov	r22, r20
    129a:	77 27       	eor	r23, r23
    129c:	0e 94 6f 09 	call	0x12de	; 0x12de <__udivmodhi4>
    12a0:	80 5d       	subi	r24, 0xD0	; 208
    12a2:	8a 33       	cpi	r24, 0x3A	; 58
    12a4:	0c f0       	brlt	.+2      	; 0x12a8 <itoa+0x2c>
    12a6:	89 5d       	subi	r24, 0xD9	; 217
    12a8:	81 93       	st	Z+, r24
    12aa:	cb 01       	movw	r24, r22
    12ac:	00 97       	sbiw	r24, 0x00	; 0
    12ae:	a1 f7       	brne	.-24     	; 0x1298 <itoa+0x1c>
    12b0:	16 f4       	brtc	.+4      	; 0x12b6 <itoa+0x3a>
    12b2:	5d e2       	ldi	r21, 0x2D	; 45
    12b4:	51 93       	st	Z+, r21
    12b6:	10 82       	st	Z, r1
    12b8:	c9 01       	movw	r24, r18
    12ba:	0c 94 5f 09 	jmp	0x12be	; 0x12be <strrev>

000012be <strrev>:
    12be:	dc 01       	movw	r26, r24
    12c0:	fc 01       	movw	r30, r24
    12c2:	67 2f       	mov	r22, r23
    12c4:	71 91       	ld	r23, Z+
    12c6:	77 23       	and	r23, r23
    12c8:	e1 f7       	brne	.-8      	; 0x12c2 <strrev+0x4>
    12ca:	32 97       	sbiw	r30, 0x02	; 2
    12cc:	04 c0       	rjmp	.+8      	; 0x12d6 <strrev+0x18>
    12ce:	7c 91       	ld	r23, X
    12d0:	6d 93       	st	X+, r22
    12d2:	70 83       	st	Z, r23
    12d4:	62 91       	ld	r22, -Z
    12d6:	ae 17       	cp	r26, r30
    12d8:	bf 07       	cpc	r27, r31
    12da:	c8 f3       	brcs	.-14     	; 0x12ce <strrev+0x10>
    12dc:	08 95       	ret

000012de <__udivmodhi4>:
    12de:	aa 1b       	sub	r26, r26
    12e0:	bb 1b       	sub	r27, r27
    12e2:	51 e1       	ldi	r21, 0x11	; 17
    12e4:	07 c0       	rjmp	.+14     	; 0x12f4 <__udivmodhi4_ep>

000012e6 <__udivmodhi4_loop>:
    12e6:	aa 1f       	adc	r26, r26
    12e8:	bb 1f       	adc	r27, r27
    12ea:	a6 17       	cp	r26, r22
    12ec:	b7 07       	cpc	r27, r23
    12ee:	10 f0       	brcs	.+4      	; 0x12f4 <__udivmodhi4_ep>
    12f0:	a6 1b       	sub	r26, r22
    12f2:	b7 0b       	sbc	r27, r23

000012f4 <__udivmodhi4_ep>:
    12f4:	88 1f       	adc	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	5a 95       	dec	r21
    12fa:	a9 f7       	brne	.-22     	; 0x12e6 <__udivmodhi4_loop>
    12fc:	80 95       	com	r24
    12fe:	90 95       	com	r25
    1300:	bc 01       	movw	r22, r24
    1302:	cd 01       	movw	r24, r26
    1304:	08 95       	ret

00001306 <_exit>:
    1306:	f8 94       	cli

00001308 <__stop_program>:
    1308:	ff cf       	rjmp	.-2      	; 0x1308 <__stop_program>
