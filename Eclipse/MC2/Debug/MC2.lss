
MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001de8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00800060  00001de8  00001e7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080017c  0080017c  00001f98  2**0
                  ALLOC
  3 .stab         00002cf4  00000000  00000000  00001f98  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012d7  00000000  00000000  00004c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005f63  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000195  00000000  00000000  000060a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001b12  00000000  00000000  00006238  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ead  00000000  00000000  00007d4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000e5d  00000000  00000000  00008bf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009a54  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002ae  00000000  00000000  00009bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000896  00000000  00000000  00009e62  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a6f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 88 0d 	jmp	0x1b10	; 0x1b10 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ee       	ldi	r30, 0xE8	; 232
      68:	fd e1       	ldi	r31, 0x1D	; 29
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 38       	cpi	r26, 0x8A	; 138
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <main>
      8a:	0c 94 f2 0e 	jmp	0x1de4	; 0x1de4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 19 03 	call	0x632	; 0x632 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a7 03 	call	0x74e	; 0x74e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a7 03 	call	0x74e	; 0x74e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 76 0e 	jmp	0x1cec	; 0x1cec <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e6       	ldi	r26, 0x63	; 99
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 4a 04 	call	0x894	; 0x894 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9e 0e 	jmp	0x1d3c	; 0x1d3c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 4a 04 	call	0x894	; 0x894 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9e 0e 	jmp	0x1d3c	; 0x1d3c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 76 0e 	jmp	0x1cec	; 0x1cec <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e6       	ldi	r24, 0x63	; 99
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 4a 04 	call	0x894	; 0x894 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__epilogue_restores__>

00000632 <__gesf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gesf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gesf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 97 05 	call	0xb2e	; 0xb2e <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gesf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 9e 0e 	jmp	0x1d3c	; 0x1d3c <__epilogue_restores__+0x18>

00000692 <__floatsisf>:
     692:	a8 e0       	ldi	r26, 0x08	; 8
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <__prologue_saves__+0x12>
     69e:	9b 01       	movw	r18, r22
     6a0:	ac 01       	movw	r20, r24
     6a2:	83 e0       	ldi	r24, 0x03	; 3
     6a4:	89 83       	std	Y+1, r24	; 0x01
     6a6:	da 01       	movw	r26, r20
     6a8:	c9 01       	movw	r24, r18
     6aa:	88 27       	eor	r24, r24
     6ac:	b7 fd       	sbrc	r27, 7
     6ae:	83 95       	inc	r24
     6b0:	99 27       	eor	r25, r25
     6b2:	aa 27       	eor	r26, r26
     6b4:	bb 27       	eor	r27, r27
     6b6:	b8 2e       	mov	r11, r24
     6b8:	21 15       	cp	r18, r1
     6ba:	31 05       	cpc	r19, r1
     6bc:	41 05       	cpc	r20, r1
     6be:	51 05       	cpc	r21, r1
     6c0:	19 f4       	brne	.+6      	; 0x6c8 <__floatsisf+0x36>
     6c2:	82 e0       	ldi	r24, 0x02	; 2
     6c4:	89 83       	std	Y+1, r24	; 0x01
     6c6:	3a c0       	rjmp	.+116    	; 0x73c <__floatsisf+0xaa>
     6c8:	88 23       	and	r24, r24
     6ca:	a9 f0       	breq	.+42     	; 0x6f6 <__floatsisf+0x64>
     6cc:	20 30       	cpi	r18, 0x00	; 0
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	38 07       	cpc	r19, r24
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	48 07       	cpc	r20, r24
     6d6:	80 e8       	ldi	r24, 0x80	; 128
     6d8:	58 07       	cpc	r21, r24
     6da:	29 f4       	brne	.+10     	; 0x6e6 <__floatsisf+0x54>
     6dc:	60 e0       	ldi	r22, 0x00	; 0
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	9f ec       	ldi	r25, 0xCF	; 207
     6e4:	30 c0       	rjmp	.+96     	; 0x746 <__floatsisf+0xb4>
     6e6:	ee 24       	eor	r14, r14
     6e8:	ff 24       	eor	r15, r15
     6ea:	87 01       	movw	r16, r14
     6ec:	e2 1a       	sub	r14, r18
     6ee:	f3 0a       	sbc	r15, r19
     6f0:	04 0b       	sbc	r16, r20
     6f2:	15 0b       	sbc	r17, r21
     6f4:	02 c0       	rjmp	.+4      	; 0x6fa <__floatsisf+0x68>
     6f6:	79 01       	movw	r14, r18
     6f8:	8a 01       	movw	r16, r20
     6fa:	8e e1       	ldi	r24, 0x1E	; 30
     6fc:	c8 2e       	mov	r12, r24
     6fe:	d1 2c       	mov	r13, r1
     700:	dc 82       	std	Y+4, r13	; 0x04
     702:	cb 82       	std	Y+3, r12	; 0x03
     704:	ed 82       	std	Y+5, r14	; 0x05
     706:	fe 82       	std	Y+6, r15	; 0x06
     708:	0f 83       	std	Y+7, r16	; 0x07
     70a:	18 87       	std	Y+8, r17	; 0x08
     70c:	c8 01       	movw	r24, r16
     70e:	b7 01       	movw	r22, r14
     710:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__clzsi2>
     714:	01 97       	sbiw	r24, 0x01	; 1
     716:	18 16       	cp	r1, r24
     718:	19 06       	cpc	r1, r25
     71a:	84 f4       	brge	.+32     	; 0x73c <__floatsisf+0xaa>
     71c:	08 2e       	mov	r0, r24
     71e:	04 c0       	rjmp	.+8      	; 0x728 <__floatsisf+0x96>
     720:	ee 0c       	add	r14, r14
     722:	ff 1c       	adc	r15, r15
     724:	00 1f       	adc	r16, r16
     726:	11 1f       	adc	r17, r17
     728:	0a 94       	dec	r0
     72a:	d2 f7       	brpl	.-12     	; 0x720 <__floatsisf+0x8e>
     72c:	ed 82       	std	Y+5, r14	; 0x05
     72e:	fe 82       	std	Y+6, r15	; 0x06
     730:	0f 83       	std	Y+7, r16	; 0x07
     732:	18 87       	std	Y+8, r17	; 0x08
     734:	c8 1a       	sub	r12, r24
     736:	d9 0a       	sbc	r13, r25
     738:	dc 82       	std	Y+4, r13	; 0x04
     73a:	cb 82       	std	Y+3, r12	; 0x03
     73c:	ba 82       	std	Y+2, r11	; 0x02
     73e:	ce 01       	movw	r24, r28
     740:	01 96       	adiw	r24, 0x01	; 1
     742:	0e 94 4a 04 	call	0x894	; 0x894 <__pack_f>
     746:	28 96       	adiw	r28, 0x08	; 8
     748:	e9 e0       	ldi	r30, 0x09	; 9
     74a:	0c 94 9b 0e 	jmp	0x1d36	; 0x1d36 <__epilogue_restores__+0x12>

0000074e <__fixsfsi>:
     74e:	ac e0       	ldi	r26, 0x0C	; 12
     750:	b0 e0       	ldi	r27, 0x00	; 0
     752:	ed ea       	ldi	r30, 0xAD	; 173
     754:	f3 e0       	ldi	r31, 0x03	; 3
     756:	0c 94 86 0e 	jmp	0x1d0c	; 0x1d0c <__prologue_saves__+0x20>
     75a:	69 83       	std	Y+1, r22	; 0x01
     75c:	7a 83       	std	Y+2, r23	; 0x02
     75e:	8b 83       	std	Y+3, r24	; 0x03
     760:	9c 83       	std	Y+4, r25	; 0x04
     762:	ce 01       	movw	r24, r28
     764:	01 96       	adiw	r24, 0x01	; 1
     766:	be 01       	movw	r22, r28
     768:	6b 5f       	subi	r22, 0xFB	; 251
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     770:	8d 81       	ldd	r24, Y+5	; 0x05
     772:	82 30       	cpi	r24, 0x02	; 2
     774:	61 f1       	breq	.+88     	; 0x7ce <__fixsfsi+0x80>
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	50 f1       	brcs	.+84     	; 0x7ce <__fixsfsi+0x80>
     77a:	84 30       	cpi	r24, 0x04	; 4
     77c:	21 f4       	brne	.+8      	; 0x786 <__fixsfsi+0x38>
     77e:	8e 81       	ldd	r24, Y+6	; 0x06
     780:	88 23       	and	r24, r24
     782:	51 f1       	breq	.+84     	; 0x7d8 <__fixsfsi+0x8a>
     784:	2e c0       	rjmp	.+92     	; 0x7e2 <__fixsfsi+0x94>
     786:	2f 81       	ldd	r18, Y+7	; 0x07
     788:	38 85       	ldd	r19, Y+8	; 0x08
     78a:	37 fd       	sbrc	r19, 7
     78c:	20 c0       	rjmp	.+64     	; 0x7ce <__fixsfsi+0x80>
     78e:	6e 81       	ldd	r22, Y+6	; 0x06
     790:	2f 31       	cpi	r18, 0x1F	; 31
     792:	31 05       	cpc	r19, r1
     794:	1c f0       	brlt	.+6      	; 0x79c <__fixsfsi+0x4e>
     796:	66 23       	and	r22, r22
     798:	f9 f0       	breq	.+62     	; 0x7d8 <__fixsfsi+0x8a>
     79a:	23 c0       	rjmp	.+70     	; 0x7e2 <__fixsfsi+0x94>
     79c:	8e e1       	ldi	r24, 0x1E	; 30
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	82 1b       	sub	r24, r18
     7a2:	93 0b       	sbc	r25, r19
     7a4:	29 85       	ldd	r18, Y+9	; 0x09
     7a6:	3a 85       	ldd	r19, Y+10	; 0x0a
     7a8:	4b 85       	ldd	r20, Y+11	; 0x0b
     7aa:	5c 85       	ldd	r21, Y+12	; 0x0c
     7ac:	04 c0       	rjmp	.+8      	; 0x7b6 <__fixsfsi+0x68>
     7ae:	56 95       	lsr	r21
     7b0:	47 95       	ror	r20
     7b2:	37 95       	ror	r19
     7b4:	27 95       	ror	r18
     7b6:	8a 95       	dec	r24
     7b8:	d2 f7       	brpl	.-12     	; 0x7ae <__fixsfsi+0x60>
     7ba:	66 23       	and	r22, r22
     7bc:	b1 f0       	breq	.+44     	; 0x7ea <__fixsfsi+0x9c>
     7be:	50 95       	com	r21
     7c0:	40 95       	com	r20
     7c2:	30 95       	com	r19
     7c4:	21 95       	neg	r18
     7c6:	3f 4f       	sbci	r19, 0xFF	; 255
     7c8:	4f 4f       	sbci	r20, 0xFF	; 255
     7ca:	5f 4f       	sbci	r21, 0xFF	; 255
     7cc:	0e c0       	rjmp	.+28     	; 0x7ea <__fixsfsi+0x9c>
     7ce:	20 e0       	ldi	r18, 0x00	; 0
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	40 e0       	ldi	r20, 0x00	; 0
     7d4:	50 e0       	ldi	r21, 0x00	; 0
     7d6:	09 c0       	rjmp	.+18     	; 0x7ea <__fixsfsi+0x9c>
     7d8:	2f ef       	ldi	r18, 0xFF	; 255
     7da:	3f ef       	ldi	r19, 0xFF	; 255
     7dc:	4f ef       	ldi	r20, 0xFF	; 255
     7de:	5f e7       	ldi	r21, 0x7F	; 127
     7e0:	04 c0       	rjmp	.+8      	; 0x7ea <__fixsfsi+0x9c>
     7e2:	20 e0       	ldi	r18, 0x00	; 0
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	40 e0       	ldi	r20, 0x00	; 0
     7e8:	50 e8       	ldi	r21, 0x80	; 128
     7ea:	b9 01       	movw	r22, r18
     7ec:	ca 01       	movw	r24, r20
     7ee:	2c 96       	adiw	r28, 0x0c	; 12
     7f0:	e2 e0       	ldi	r30, 0x02	; 2
     7f2:	0c 94 a2 0e 	jmp	0x1d44	; 0x1d44 <__epilogue_restores__+0x20>

000007f6 <__clzsi2>:
     7f6:	ef 92       	push	r14
     7f8:	ff 92       	push	r15
     7fa:	0f 93       	push	r16
     7fc:	1f 93       	push	r17
     7fe:	7b 01       	movw	r14, r22
     800:	8c 01       	movw	r16, r24
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	e8 16       	cp	r14, r24
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	f8 06       	cpc	r15, r24
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	08 07       	cpc	r16, r24
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	18 07       	cpc	r17, r24
     812:	88 f4       	brcc	.+34     	; 0x836 <__clzsi2+0x40>
     814:	8f ef       	ldi	r24, 0xFF	; 255
     816:	e8 16       	cp	r14, r24
     818:	f1 04       	cpc	r15, r1
     81a:	01 05       	cpc	r16, r1
     81c:	11 05       	cpc	r17, r1
     81e:	31 f0       	breq	.+12     	; 0x82c <__clzsi2+0x36>
     820:	28 f0       	brcs	.+10     	; 0x82c <__clzsi2+0x36>
     822:	88 e0       	ldi	r24, 0x08	; 8
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	a0 e0       	ldi	r26, 0x00	; 0
     828:	b0 e0       	ldi	r27, 0x00	; 0
     82a:	17 c0       	rjmp	.+46     	; 0x85a <__clzsi2+0x64>
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	a0 e0       	ldi	r26, 0x00	; 0
     832:	b0 e0       	ldi	r27, 0x00	; 0
     834:	12 c0       	rjmp	.+36     	; 0x85a <__clzsi2+0x64>
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	e8 16       	cp	r14, r24
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	f8 06       	cpc	r15, r24
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	08 07       	cpc	r16, r24
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	18 07       	cpc	r17, r24
     846:	28 f0       	brcs	.+10     	; 0x852 <__clzsi2+0x5c>
     848:	88 e1       	ldi	r24, 0x18	; 24
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	a0 e0       	ldi	r26, 0x00	; 0
     84e:	b0 e0       	ldi	r27, 0x00	; 0
     850:	04 c0       	rjmp	.+8      	; 0x85a <__clzsi2+0x64>
     852:	80 e1       	ldi	r24, 0x10	; 16
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	a0 e0       	ldi	r26, 0x00	; 0
     858:	b0 e0       	ldi	r27, 0x00	; 0
     85a:	20 e2       	ldi	r18, 0x20	; 32
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	40 e0       	ldi	r20, 0x00	; 0
     860:	50 e0       	ldi	r21, 0x00	; 0
     862:	28 1b       	sub	r18, r24
     864:	39 0b       	sbc	r19, r25
     866:	4a 0b       	sbc	r20, r26
     868:	5b 0b       	sbc	r21, r27
     86a:	04 c0       	rjmp	.+8      	; 0x874 <__stack+0x15>
     86c:	16 95       	lsr	r17
     86e:	07 95       	ror	r16
     870:	f7 94       	ror	r15
     872:	e7 94       	ror	r14
     874:	8a 95       	dec	r24
     876:	d2 f7       	brpl	.-12     	; 0x86c <__stack+0xd>
     878:	f7 01       	movw	r30, r14
     87a:	e5 59       	subi	r30, 0x95	; 149
     87c:	ff 4f       	sbci	r31, 0xFF	; 255
     87e:	80 81       	ld	r24, Z
     880:	28 1b       	sub	r18, r24
     882:	31 09       	sbc	r19, r1
     884:	41 09       	sbc	r20, r1
     886:	51 09       	sbc	r21, r1
     888:	c9 01       	movw	r24, r18
     88a:	1f 91       	pop	r17
     88c:	0f 91       	pop	r16
     88e:	ff 90       	pop	r15
     890:	ef 90       	pop	r14
     892:	08 95       	ret

00000894 <__pack_f>:
     894:	df 92       	push	r13
     896:	ef 92       	push	r14
     898:	ff 92       	push	r15
     89a:	0f 93       	push	r16
     89c:	1f 93       	push	r17
     89e:	fc 01       	movw	r30, r24
     8a0:	e4 80       	ldd	r14, Z+4	; 0x04
     8a2:	f5 80       	ldd	r15, Z+5	; 0x05
     8a4:	06 81       	ldd	r16, Z+6	; 0x06
     8a6:	17 81       	ldd	r17, Z+7	; 0x07
     8a8:	d1 80       	ldd	r13, Z+1	; 0x01
     8aa:	80 81       	ld	r24, Z
     8ac:	82 30       	cpi	r24, 0x02	; 2
     8ae:	48 f4       	brcc	.+18     	; 0x8c2 <__pack_f+0x2e>
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e1       	ldi	r26, 0x10	; 16
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	e8 2a       	or	r14, r24
     8ba:	f9 2a       	or	r15, r25
     8bc:	0a 2b       	or	r16, r26
     8be:	1b 2b       	or	r17, r27
     8c0:	a5 c0       	rjmp	.+330    	; 0xa0c <__pack_f+0x178>
     8c2:	84 30       	cpi	r24, 0x04	; 4
     8c4:	09 f4       	brne	.+2      	; 0x8c8 <__pack_f+0x34>
     8c6:	9f c0       	rjmp	.+318    	; 0xa06 <__pack_f+0x172>
     8c8:	82 30       	cpi	r24, 0x02	; 2
     8ca:	21 f4       	brne	.+8      	; 0x8d4 <__pack_f+0x40>
     8cc:	ee 24       	eor	r14, r14
     8ce:	ff 24       	eor	r15, r15
     8d0:	87 01       	movw	r16, r14
     8d2:	05 c0       	rjmp	.+10     	; 0x8de <__pack_f+0x4a>
     8d4:	e1 14       	cp	r14, r1
     8d6:	f1 04       	cpc	r15, r1
     8d8:	01 05       	cpc	r16, r1
     8da:	11 05       	cpc	r17, r1
     8dc:	19 f4       	brne	.+6      	; 0x8e4 <__pack_f+0x50>
     8de:	e0 e0       	ldi	r30, 0x00	; 0
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	96 c0       	rjmp	.+300    	; 0xa10 <__pack_f+0x17c>
     8e4:	62 81       	ldd	r22, Z+2	; 0x02
     8e6:	73 81       	ldd	r23, Z+3	; 0x03
     8e8:	9f ef       	ldi	r25, 0xFF	; 255
     8ea:	62 38       	cpi	r22, 0x82	; 130
     8ec:	79 07       	cpc	r23, r25
     8ee:	0c f0       	brlt	.+2      	; 0x8f2 <__pack_f+0x5e>
     8f0:	5b c0       	rjmp	.+182    	; 0x9a8 <__pack_f+0x114>
     8f2:	22 e8       	ldi	r18, 0x82	; 130
     8f4:	3f ef       	ldi	r19, 0xFF	; 255
     8f6:	26 1b       	sub	r18, r22
     8f8:	37 0b       	sbc	r19, r23
     8fa:	2a 31       	cpi	r18, 0x1A	; 26
     8fc:	31 05       	cpc	r19, r1
     8fe:	2c f0       	brlt	.+10     	; 0x90a <__pack_f+0x76>
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	40 e0       	ldi	r20, 0x00	; 0
     906:	50 e0       	ldi	r21, 0x00	; 0
     908:	2a c0       	rjmp	.+84     	; 0x95e <__pack_f+0xca>
     90a:	b8 01       	movw	r22, r16
     90c:	a7 01       	movw	r20, r14
     90e:	02 2e       	mov	r0, r18
     910:	04 c0       	rjmp	.+8      	; 0x91a <__pack_f+0x86>
     912:	76 95       	lsr	r23
     914:	67 95       	ror	r22
     916:	57 95       	ror	r21
     918:	47 95       	ror	r20
     91a:	0a 94       	dec	r0
     91c:	d2 f7       	brpl	.-12     	; 0x912 <__pack_f+0x7e>
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	a0 e0       	ldi	r26, 0x00	; 0
     924:	b0 e0       	ldi	r27, 0x00	; 0
     926:	04 c0       	rjmp	.+8      	; 0x930 <__pack_f+0x9c>
     928:	88 0f       	add	r24, r24
     92a:	99 1f       	adc	r25, r25
     92c:	aa 1f       	adc	r26, r26
     92e:	bb 1f       	adc	r27, r27
     930:	2a 95       	dec	r18
     932:	d2 f7       	brpl	.-12     	; 0x928 <__pack_f+0x94>
     934:	01 97       	sbiw	r24, 0x01	; 1
     936:	a1 09       	sbc	r26, r1
     938:	b1 09       	sbc	r27, r1
     93a:	8e 21       	and	r24, r14
     93c:	9f 21       	and	r25, r15
     93e:	a0 23       	and	r26, r16
     940:	b1 23       	and	r27, r17
     942:	00 97       	sbiw	r24, 0x00	; 0
     944:	a1 05       	cpc	r26, r1
     946:	b1 05       	cpc	r27, r1
     948:	21 f0       	breq	.+8      	; 0x952 <__pack_f+0xbe>
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	a0 e0       	ldi	r26, 0x00	; 0
     950:	b0 e0       	ldi	r27, 0x00	; 0
     952:	9a 01       	movw	r18, r20
     954:	ab 01       	movw	r20, r22
     956:	28 2b       	or	r18, r24
     958:	39 2b       	or	r19, r25
     95a:	4a 2b       	or	r20, r26
     95c:	5b 2b       	or	r21, r27
     95e:	da 01       	movw	r26, r20
     960:	c9 01       	movw	r24, r18
     962:	8f 77       	andi	r24, 0x7F	; 127
     964:	90 70       	andi	r25, 0x00	; 0
     966:	a0 70       	andi	r26, 0x00	; 0
     968:	b0 70       	andi	r27, 0x00	; 0
     96a:	80 34       	cpi	r24, 0x40	; 64
     96c:	91 05       	cpc	r25, r1
     96e:	a1 05       	cpc	r26, r1
     970:	b1 05       	cpc	r27, r1
     972:	39 f4       	brne	.+14     	; 0x982 <__pack_f+0xee>
     974:	27 ff       	sbrs	r18, 7
     976:	09 c0       	rjmp	.+18     	; 0x98a <__pack_f+0xf6>
     978:	20 5c       	subi	r18, 0xC0	; 192
     97a:	3f 4f       	sbci	r19, 0xFF	; 255
     97c:	4f 4f       	sbci	r20, 0xFF	; 255
     97e:	5f 4f       	sbci	r21, 0xFF	; 255
     980:	04 c0       	rjmp	.+8      	; 0x98a <__pack_f+0xf6>
     982:	21 5c       	subi	r18, 0xC1	; 193
     984:	3f 4f       	sbci	r19, 0xFF	; 255
     986:	4f 4f       	sbci	r20, 0xFF	; 255
     988:	5f 4f       	sbci	r21, 0xFF	; 255
     98a:	e0 e0       	ldi	r30, 0x00	; 0
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	20 30       	cpi	r18, 0x00	; 0
     990:	a0 e0       	ldi	r26, 0x00	; 0
     992:	3a 07       	cpc	r19, r26
     994:	a0 e0       	ldi	r26, 0x00	; 0
     996:	4a 07       	cpc	r20, r26
     998:	a0 e4       	ldi	r26, 0x40	; 64
     99a:	5a 07       	cpc	r21, r26
     99c:	10 f0       	brcs	.+4      	; 0x9a2 <__pack_f+0x10e>
     99e:	e1 e0       	ldi	r30, 0x01	; 1
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	79 01       	movw	r14, r18
     9a4:	8a 01       	movw	r16, r20
     9a6:	27 c0       	rjmp	.+78     	; 0x9f6 <__pack_f+0x162>
     9a8:	60 38       	cpi	r22, 0x80	; 128
     9aa:	71 05       	cpc	r23, r1
     9ac:	64 f5       	brge	.+88     	; 0xa06 <__pack_f+0x172>
     9ae:	fb 01       	movw	r30, r22
     9b0:	e1 58       	subi	r30, 0x81	; 129
     9b2:	ff 4f       	sbci	r31, 0xFF	; 255
     9b4:	d8 01       	movw	r26, r16
     9b6:	c7 01       	movw	r24, r14
     9b8:	8f 77       	andi	r24, 0x7F	; 127
     9ba:	90 70       	andi	r25, 0x00	; 0
     9bc:	a0 70       	andi	r26, 0x00	; 0
     9be:	b0 70       	andi	r27, 0x00	; 0
     9c0:	80 34       	cpi	r24, 0x40	; 64
     9c2:	91 05       	cpc	r25, r1
     9c4:	a1 05       	cpc	r26, r1
     9c6:	b1 05       	cpc	r27, r1
     9c8:	39 f4       	brne	.+14     	; 0x9d8 <__pack_f+0x144>
     9ca:	e7 fe       	sbrs	r14, 7
     9cc:	0d c0       	rjmp	.+26     	; 0x9e8 <__pack_f+0x154>
     9ce:	80 e4       	ldi	r24, 0x40	; 64
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a0 e0       	ldi	r26, 0x00	; 0
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <__pack_f+0x14c>
     9d8:	8f e3       	ldi	r24, 0x3F	; 63
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	a0 e0       	ldi	r26, 0x00	; 0
     9de:	b0 e0       	ldi	r27, 0x00	; 0
     9e0:	e8 0e       	add	r14, r24
     9e2:	f9 1e       	adc	r15, r25
     9e4:	0a 1f       	adc	r16, r26
     9e6:	1b 1f       	adc	r17, r27
     9e8:	17 ff       	sbrs	r17, 7
     9ea:	05 c0       	rjmp	.+10     	; 0x9f6 <__pack_f+0x162>
     9ec:	16 95       	lsr	r17
     9ee:	07 95       	ror	r16
     9f0:	f7 94       	ror	r15
     9f2:	e7 94       	ror	r14
     9f4:	31 96       	adiw	r30, 0x01	; 1
     9f6:	87 e0       	ldi	r24, 0x07	; 7
     9f8:	16 95       	lsr	r17
     9fa:	07 95       	ror	r16
     9fc:	f7 94       	ror	r15
     9fe:	e7 94       	ror	r14
     a00:	8a 95       	dec	r24
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__pack_f+0x164>
     a04:	05 c0       	rjmp	.+10     	; 0xa10 <__pack_f+0x17c>
     a06:	ee 24       	eor	r14, r14
     a08:	ff 24       	eor	r15, r15
     a0a:	87 01       	movw	r16, r14
     a0c:	ef ef       	ldi	r30, 0xFF	; 255
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	6e 2f       	mov	r22, r30
     a12:	67 95       	ror	r22
     a14:	66 27       	eor	r22, r22
     a16:	67 95       	ror	r22
     a18:	90 2f       	mov	r25, r16
     a1a:	9f 77       	andi	r25, 0x7F	; 127
     a1c:	d7 94       	ror	r13
     a1e:	dd 24       	eor	r13, r13
     a20:	d7 94       	ror	r13
     a22:	8e 2f       	mov	r24, r30
     a24:	86 95       	lsr	r24
     a26:	49 2f       	mov	r20, r25
     a28:	46 2b       	or	r20, r22
     a2a:	58 2f       	mov	r21, r24
     a2c:	5d 29       	or	r21, r13
     a2e:	b7 01       	movw	r22, r14
     a30:	ca 01       	movw	r24, r20
     a32:	1f 91       	pop	r17
     a34:	0f 91       	pop	r16
     a36:	ff 90       	pop	r15
     a38:	ef 90       	pop	r14
     a3a:	df 90       	pop	r13
     a3c:	08 95       	ret

00000a3e <__unpack_f>:
     a3e:	fc 01       	movw	r30, r24
     a40:	db 01       	movw	r26, r22
     a42:	40 81       	ld	r20, Z
     a44:	51 81       	ldd	r21, Z+1	; 0x01
     a46:	22 81       	ldd	r18, Z+2	; 0x02
     a48:	62 2f       	mov	r22, r18
     a4a:	6f 77       	andi	r22, 0x7F	; 127
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	22 1f       	adc	r18, r18
     a50:	22 27       	eor	r18, r18
     a52:	22 1f       	adc	r18, r18
     a54:	93 81       	ldd	r25, Z+3	; 0x03
     a56:	89 2f       	mov	r24, r25
     a58:	88 0f       	add	r24, r24
     a5a:	82 2b       	or	r24, r18
     a5c:	28 2f       	mov	r18, r24
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	99 1f       	adc	r25, r25
     a62:	99 27       	eor	r25, r25
     a64:	99 1f       	adc	r25, r25
     a66:	11 96       	adiw	r26, 0x01	; 1
     a68:	9c 93       	st	X, r25
     a6a:	11 97       	sbiw	r26, 0x01	; 1
     a6c:	21 15       	cp	r18, r1
     a6e:	31 05       	cpc	r19, r1
     a70:	a9 f5       	brne	.+106    	; 0xadc <__unpack_f+0x9e>
     a72:	41 15       	cp	r20, r1
     a74:	51 05       	cpc	r21, r1
     a76:	61 05       	cpc	r22, r1
     a78:	71 05       	cpc	r23, r1
     a7a:	11 f4       	brne	.+4      	; 0xa80 <__unpack_f+0x42>
     a7c:	82 e0       	ldi	r24, 0x02	; 2
     a7e:	37 c0       	rjmp	.+110    	; 0xaee <__unpack_f+0xb0>
     a80:	82 e8       	ldi	r24, 0x82	; 130
     a82:	9f ef       	ldi	r25, 0xFF	; 255
     a84:	13 96       	adiw	r26, 0x03	; 3
     a86:	9c 93       	st	X, r25
     a88:	8e 93       	st	-X, r24
     a8a:	12 97       	sbiw	r26, 0x02	; 2
     a8c:	9a 01       	movw	r18, r20
     a8e:	ab 01       	movw	r20, r22
     a90:	67 e0       	ldi	r22, 0x07	; 7
     a92:	22 0f       	add	r18, r18
     a94:	33 1f       	adc	r19, r19
     a96:	44 1f       	adc	r20, r20
     a98:	55 1f       	adc	r21, r21
     a9a:	6a 95       	dec	r22
     a9c:	d1 f7       	brne	.-12     	; 0xa92 <__unpack_f+0x54>
     a9e:	83 e0       	ldi	r24, 0x03	; 3
     aa0:	8c 93       	st	X, r24
     aa2:	0d c0       	rjmp	.+26     	; 0xabe <__unpack_f+0x80>
     aa4:	22 0f       	add	r18, r18
     aa6:	33 1f       	adc	r19, r19
     aa8:	44 1f       	adc	r20, r20
     aaa:	55 1f       	adc	r21, r21
     aac:	12 96       	adiw	r26, 0x02	; 2
     aae:	8d 91       	ld	r24, X+
     ab0:	9c 91       	ld	r25, X
     ab2:	13 97       	sbiw	r26, 0x03	; 3
     ab4:	01 97       	sbiw	r24, 0x01	; 1
     ab6:	13 96       	adiw	r26, 0x03	; 3
     ab8:	9c 93       	st	X, r25
     aba:	8e 93       	st	-X, r24
     abc:	12 97       	sbiw	r26, 0x02	; 2
     abe:	20 30       	cpi	r18, 0x00	; 0
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	38 07       	cpc	r19, r24
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	48 07       	cpc	r20, r24
     ac8:	80 e4       	ldi	r24, 0x40	; 64
     aca:	58 07       	cpc	r21, r24
     acc:	58 f3       	brcs	.-42     	; 0xaa4 <__unpack_f+0x66>
     ace:	14 96       	adiw	r26, 0x04	; 4
     ad0:	2d 93       	st	X+, r18
     ad2:	3d 93       	st	X+, r19
     ad4:	4d 93       	st	X+, r20
     ad6:	5c 93       	st	X, r21
     ad8:	17 97       	sbiw	r26, 0x07	; 7
     ada:	08 95       	ret
     adc:	2f 3f       	cpi	r18, 0xFF	; 255
     ade:	31 05       	cpc	r19, r1
     ae0:	79 f4       	brne	.+30     	; 0xb00 <__unpack_f+0xc2>
     ae2:	41 15       	cp	r20, r1
     ae4:	51 05       	cpc	r21, r1
     ae6:	61 05       	cpc	r22, r1
     ae8:	71 05       	cpc	r23, r1
     aea:	19 f4       	brne	.+6      	; 0xaf2 <__unpack_f+0xb4>
     aec:	84 e0       	ldi	r24, 0x04	; 4
     aee:	8c 93       	st	X, r24
     af0:	08 95       	ret
     af2:	64 ff       	sbrs	r22, 4
     af4:	03 c0       	rjmp	.+6      	; 0xafc <__unpack_f+0xbe>
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	8c 93       	st	X, r24
     afa:	12 c0       	rjmp	.+36     	; 0xb20 <__unpack_f+0xe2>
     afc:	1c 92       	st	X, r1
     afe:	10 c0       	rjmp	.+32     	; 0xb20 <__unpack_f+0xe2>
     b00:	2f 57       	subi	r18, 0x7F	; 127
     b02:	30 40       	sbci	r19, 0x00	; 0
     b04:	13 96       	adiw	r26, 0x03	; 3
     b06:	3c 93       	st	X, r19
     b08:	2e 93       	st	-X, r18
     b0a:	12 97       	sbiw	r26, 0x02	; 2
     b0c:	83 e0       	ldi	r24, 0x03	; 3
     b0e:	8c 93       	st	X, r24
     b10:	87 e0       	ldi	r24, 0x07	; 7
     b12:	44 0f       	add	r20, r20
     b14:	55 1f       	adc	r21, r21
     b16:	66 1f       	adc	r22, r22
     b18:	77 1f       	adc	r23, r23
     b1a:	8a 95       	dec	r24
     b1c:	d1 f7       	brne	.-12     	; 0xb12 <__unpack_f+0xd4>
     b1e:	70 64       	ori	r23, 0x40	; 64
     b20:	14 96       	adiw	r26, 0x04	; 4
     b22:	4d 93       	st	X+, r20
     b24:	5d 93       	st	X+, r21
     b26:	6d 93       	st	X+, r22
     b28:	7c 93       	st	X, r23
     b2a:	17 97       	sbiw	r26, 0x07	; 7
     b2c:	08 95       	ret

00000b2e <__fpcmp_parts_f>:
     b2e:	1f 93       	push	r17
     b30:	dc 01       	movw	r26, r24
     b32:	fb 01       	movw	r30, r22
     b34:	9c 91       	ld	r25, X
     b36:	92 30       	cpi	r25, 0x02	; 2
     b38:	08 f4       	brcc	.+2      	; 0xb3c <__fpcmp_parts_f+0xe>
     b3a:	47 c0       	rjmp	.+142    	; 0xbca <__fpcmp_parts_f+0x9c>
     b3c:	80 81       	ld	r24, Z
     b3e:	82 30       	cpi	r24, 0x02	; 2
     b40:	08 f4       	brcc	.+2      	; 0xb44 <__fpcmp_parts_f+0x16>
     b42:	43 c0       	rjmp	.+134    	; 0xbca <__fpcmp_parts_f+0x9c>
     b44:	94 30       	cpi	r25, 0x04	; 4
     b46:	51 f4       	brne	.+20     	; 0xb5c <__fpcmp_parts_f+0x2e>
     b48:	11 96       	adiw	r26, 0x01	; 1
     b4a:	1c 91       	ld	r17, X
     b4c:	84 30       	cpi	r24, 0x04	; 4
     b4e:	99 f5       	brne	.+102    	; 0xbb6 <__fpcmp_parts_f+0x88>
     b50:	81 81       	ldd	r24, Z+1	; 0x01
     b52:	68 2f       	mov	r22, r24
     b54:	70 e0       	ldi	r23, 0x00	; 0
     b56:	61 1b       	sub	r22, r17
     b58:	71 09       	sbc	r23, r1
     b5a:	3f c0       	rjmp	.+126    	; 0xbda <__fpcmp_parts_f+0xac>
     b5c:	84 30       	cpi	r24, 0x04	; 4
     b5e:	21 f0       	breq	.+8      	; 0xb68 <__fpcmp_parts_f+0x3a>
     b60:	92 30       	cpi	r25, 0x02	; 2
     b62:	31 f4       	brne	.+12     	; 0xb70 <__fpcmp_parts_f+0x42>
     b64:	82 30       	cpi	r24, 0x02	; 2
     b66:	b9 f1       	breq	.+110    	; 0xbd6 <__fpcmp_parts_f+0xa8>
     b68:	81 81       	ldd	r24, Z+1	; 0x01
     b6a:	88 23       	and	r24, r24
     b6c:	89 f1       	breq	.+98     	; 0xbd0 <__fpcmp_parts_f+0xa2>
     b6e:	2d c0       	rjmp	.+90     	; 0xbca <__fpcmp_parts_f+0x9c>
     b70:	11 96       	adiw	r26, 0x01	; 1
     b72:	1c 91       	ld	r17, X
     b74:	11 97       	sbiw	r26, 0x01	; 1
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	f1 f0       	breq	.+60     	; 0xbb6 <__fpcmp_parts_f+0x88>
     b7a:	81 81       	ldd	r24, Z+1	; 0x01
     b7c:	18 17       	cp	r17, r24
     b7e:	d9 f4       	brne	.+54     	; 0xbb6 <__fpcmp_parts_f+0x88>
     b80:	12 96       	adiw	r26, 0x02	; 2
     b82:	2d 91       	ld	r18, X+
     b84:	3c 91       	ld	r19, X
     b86:	13 97       	sbiw	r26, 0x03	; 3
     b88:	82 81       	ldd	r24, Z+2	; 0x02
     b8a:	93 81       	ldd	r25, Z+3	; 0x03
     b8c:	82 17       	cp	r24, r18
     b8e:	93 07       	cpc	r25, r19
     b90:	94 f0       	brlt	.+36     	; 0xbb6 <__fpcmp_parts_f+0x88>
     b92:	28 17       	cp	r18, r24
     b94:	39 07       	cpc	r19, r25
     b96:	bc f0       	brlt	.+46     	; 0xbc6 <__fpcmp_parts_f+0x98>
     b98:	14 96       	adiw	r26, 0x04	; 4
     b9a:	8d 91       	ld	r24, X+
     b9c:	9d 91       	ld	r25, X+
     b9e:	0d 90       	ld	r0, X+
     ba0:	bc 91       	ld	r27, X
     ba2:	a0 2d       	mov	r26, r0
     ba4:	24 81       	ldd	r18, Z+4	; 0x04
     ba6:	35 81       	ldd	r19, Z+5	; 0x05
     ba8:	46 81       	ldd	r20, Z+6	; 0x06
     baa:	57 81       	ldd	r21, Z+7	; 0x07
     bac:	28 17       	cp	r18, r24
     bae:	39 07       	cpc	r19, r25
     bb0:	4a 07       	cpc	r20, r26
     bb2:	5b 07       	cpc	r21, r27
     bb4:	18 f4       	brcc	.+6      	; 0xbbc <__fpcmp_parts_f+0x8e>
     bb6:	11 23       	and	r17, r17
     bb8:	41 f0       	breq	.+16     	; 0xbca <__fpcmp_parts_f+0x9c>
     bba:	0a c0       	rjmp	.+20     	; 0xbd0 <__fpcmp_parts_f+0xa2>
     bbc:	82 17       	cp	r24, r18
     bbe:	93 07       	cpc	r25, r19
     bc0:	a4 07       	cpc	r26, r20
     bc2:	b5 07       	cpc	r27, r21
     bc4:	40 f4       	brcc	.+16     	; 0xbd6 <__fpcmp_parts_f+0xa8>
     bc6:	11 23       	and	r17, r17
     bc8:	19 f0       	breq	.+6      	; 0xbd0 <__fpcmp_parts_f+0xa2>
     bca:	61 e0       	ldi	r22, 0x01	; 1
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	05 c0       	rjmp	.+10     	; 0xbda <__fpcmp_parts_f+0xac>
     bd0:	6f ef       	ldi	r22, 0xFF	; 255
     bd2:	7f ef       	ldi	r23, 0xFF	; 255
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <__fpcmp_parts_f+0xac>
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	cb 01       	movw	r24, r22
     bdc:	1f 91       	pop	r17
     bde:	08 95       	ret

00000be0 <BUZZER_OFF>:
	PORT(BUZZER_PORT,BUZZER_PIN,ON_BUZZER);
}

void BUZZER_OFF(void)
{
	PORT(BUZZER_PORT,BUZZER_PIN,OFF_BUZZER);
     be0:	80 91 7c 01 	lds	r24, 0x017C
     be4:	60 91 7d 01 	lds	r22, 0x017D
     be8:	40 e0       	ldi	r20, 0x00	; 0
     bea:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
}
     bee:	08 95       	ret

00000bf0 <BUZZER_ON>:
	PORT(port,pin,OFF_BUZZER);
}

void BUZZER_ON(void)
{
	PORT(BUZZER_PORT,BUZZER_PIN,ON_BUZZER);
     bf0:	80 91 7c 01 	lds	r24, 0x017C
     bf4:	60 91 7d 01 	lds	r22, 0x017D
     bf8:	41 e0       	ldi	r20, 0x01	; 1
     bfa:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
}
     bfe:	08 95       	ret

00000c00 <BUZZER_INIT>:

static volatile uint8 BUZZER_PORT;
static volatile uint8 BUZZER_PIN;

void BUZZER_INIT(uint8 port,uint8 pin)
{
     c00:	0f 93       	push	r16
     c02:	1f 93       	push	r17
     c04:	18 2f       	mov	r17, r24
     c06:	06 2f       	mov	r16, r22
	BUZZER_PORT=port;
     c08:	80 93 7c 01 	sts	0x017C, r24
	BUZZER_PIN=pin;
     c0c:	60 93 7d 01 	sts	0x017D, r22

	DDR(port,pin,OUTPUT);
     c10:	41 e0       	ldi	r20, 0x01	; 1
     c12:	0e 94 1c 07 	call	0xe38	; 0xe38 <DDR>
	PORT(port,pin,OFF_BUZZER);
     c16:	81 2f       	mov	r24, r17
     c18:	60 2f       	mov	r22, r16
     c1a:	40 e0       	ldi	r20, 0x00	; 0
     c1c:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
}
     c20:	1f 91       	pop	r17
     c22:	0f 91       	pop	r16
     c24:	08 95       	ret

00000c26 <DC_MOTOR_OFF>:
	PORT(DC_M_PORT,DC_M_PIN1,OFF);
	PORT(DC_M_PORT,DC_M_PIN2,ON);
}
void DC_MOTOR_OFF(void)
{
	PORT(DC_M_PORT,DC_M_PIN1,OFF);
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	61 e0       	ldi	r22, 0x01	; 1
     c2a:	40 e0       	ldi	r20, 0x00	; 0
     c2c:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
	PORT(DC_M_PORT,DC_M_PIN2,OFF);
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	62 e0       	ldi	r22, 0x02	; 2
     c34:	40 e0       	ldi	r20, 0x00	; 0
     c36:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
}
     c3a:	08 95       	ret

00000c3c <DC_MOTOR_ON_CCW>:
	PORT(DC_M_PORT,DC_M_PIN1,ON);
	PORT(DC_M_PORT,DC_M_PIN2,OFF);
}
void DC_MOTOR_ON_CCW(void)
{
	PORT(DC_M_PORT,DC_M_PIN1,OFF);
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	61 e0       	ldi	r22, 0x01	; 1
     c40:	40 e0       	ldi	r20, 0x00	; 0
     c42:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
	PORT(DC_M_PORT,DC_M_PIN2,ON);
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	62 e0       	ldi	r22, 0x02	; 2
     c4a:	41 e0       	ldi	r20, 0x01	; 1
     c4c:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
}
     c50:	08 95       	ret

00000c52 <DC_MOTOR_ON>:
	}
}

void DC_MOTOR_ON(void)
{
	PORT(DC_M_PORT,DC_M_PIN1,ON);
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	61 e0       	ldi	r22, 0x01	; 1
     c56:	41 e0       	ldi	r20, 0x01	; 1
     c58:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
	PORT(DC_M_PORT,DC_M_PIN2,OFF);
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	62 e0       	ldi	r22, 0x02	; 2
     c60:	40 e0       	ldi	r20, 0x00	; 0
     c62:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
}
     c66:	08 95       	ret

00000c68 <DC_MOTOR_INIT>:

}

void DC_MOTOR_INIT()
{
	DDR(DC_M_PORT,DC_M_PIN1,OUTPUT);
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	61 e0       	ldi	r22, 0x01	; 1
     c6c:	41 e0       	ldi	r20, 0x01	; 1
     c6e:	0e 94 1c 07 	call	0xe38	; 0xe38 <DDR>
	PORT(DC_M_PORT,DC_M_PIN1,OFF);
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	61 e0       	ldi	r22, 0x01	; 1
     c76:	40 e0       	ldi	r20, 0x00	; 0
     c78:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>

	DDR(DC_M_PORT,DC_M_PIN2,OUTPUT);
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	62 e0       	ldi	r22, 0x02	; 2
     c80:	41 e0       	ldi	r20, 0x01	; 1
     c82:	0e 94 1c 07 	call	0xe38	; 0xe38 <DDR>
	PORT(DC_M_PORT,DC_M_PIN2,OFF);
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	62 e0       	ldi	r22, 0x02	; 2
     c8a:	40 e0       	ldi	r20, 0x00	; 0
     c8c:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
}
     c90:	08 95       	ret

00000c92 <PWM_Timer0_Start>:


#include "DC_MOTOR.h"
#include <avr/io.h>
void PWM_Timer0_Start(uint8 duty_cycle)
{
     c92:	ef 92       	push	r14
     c94:	ff 92       	push	r15
     c96:	0f 93       	push	r16
     c98:	1f 93       	push	r17
     c9a:	e8 2e       	mov	r14, r24
	DDR(PB,DC_M_PIN_speed,OUTPUT);
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	63 e0       	ldi	r22, 0x03	; 3
     ca0:	41 e0       	ldi	r20, 0x01	; 1
     ca2:	0e 94 1c 07 	call	0xe38	; 0xe38 <DDR>
	TCNT0=0;
     ca6:	12 be       	out	0x32, r1	; 50
	OCR0=(uint8)(2.55*duty_cycle);
     ca8:	ff 24       	eor	r15, r15
     caa:	00 27       	eor	r16, r16
     cac:	f7 fc       	sbrc	r15, 7
     cae:	00 95       	com	r16
     cb0:	10 2f       	mov	r17, r16
     cb2:	c8 01       	movw	r24, r16
     cb4:	b7 01       	movw	r22, r14
     cb6:	0e 94 49 03 	call	0x692	; 0x692 <__floatsisf>
     cba:	23 e3       	ldi	r18, 0x33	; 51
     cbc:	33 e3       	ldi	r19, 0x33	; 51
     cbe:	43 e2       	ldi	r20, 0x23	; 35
     cc0:	50 e4       	ldi	r21, 0x40	; 64
     cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cca:	6c bf       	out	0x3c, r22	; 60
	TCCR0=(1<<WGM01)|(1<<WGM00)|(1<<COM01)|(1<<CS01);
     ccc:	8a e6       	ldi	r24, 0x6A	; 106
     cce:	83 bf       	out	0x33, r24	; 51

}
     cd0:	1f 91       	pop	r17
     cd2:	0f 91       	pop	r16
     cd4:	ff 90       	pop	r15
     cd6:	ef 90       	pop	r14
     cd8:	08 95       	ret

00000cda <DC_MOTOR>:
	DDR(DC_M_PORT,DC_M_PIN2,OUTPUT);
	PORT(DC_M_PORT,DC_M_PIN2,OFF);
}

void DC_MOTOR(MOTOR_STATE state,uint8 speed)
{
     cda:	1f 93       	push	r17
     cdc:	16 2f       	mov	r17, r22
	switch(state)
     cde:	81 30       	cpi	r24, 0x01	; 1
     ce0:	f9 f0       	breq	.+62     	; 0xd20 <DC_MOTOR+0x46>
     ce2:	81 30       	cpi	r24, 0x01	; 1
     ce4:	60 f4       	brcc	.+24     	; 0xcfe <DC_MOTOR+0x24>
		PORT(DC_M_PORT,DC_M_PIN1,OFF);
		PORT(DC_M_PORT,DC_M_PIN2,ON);
		PWM_Timer0_Start(speed);
		break;
	default:
		PORT(DC_M_PORT,DC_M_PIN1,OFF);
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	61 e0       	ldi	r22, 0x01	; 1
     cea:	40 e0       	ldi	r20, 0x00	; 0
     cec:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
		PORT(DC_M_PORT,DC_M_PIN2,OFF);
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	62 e0       	ldi	r22, 0x02	; 2
     cf4:	40 e0       	ldi	r20, 0x00	; 0
     cf6:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
		break;
	}
}
     cfa:	1f 91       	pop	r17
     cfc:	08 95       	ret
	PORT(DC_M_PORT,DC_M_PIN2,OFF);
}

void DC_MOTOR(MOTOR_STATE state,uint8 speed)
{
	switch(state)
     cfe:	82 30       	cpi	r24, 0x02	; 2
     d00:	91 f7       	brne	.-28     	; 0xce6 <DC_MOTOR+0xc>
		PORT(DC_M_PORT,DC_M_PIN2,OFF);
		PWM_Timer0_Start(speed);
		break;

	case m_on_acw:
		PORT(DC_M_PORT,DC_M_PIN1,OFF);
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	61 e0       	ldi	r22, 0x01	; 1
     d06:	40 e0       	ldi	r20, 0x00	; 0
     d08:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
		PORT(DC_M_PORT,DC_M_PIN2,ON);
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	62 e0       	ldi	r22, 0x02	; 2
     d10:	41 e0       	ldi	r20, 0x01	; 1
     d12:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
		PWM_Timer0_Start(speed);
     d16:	81 2f       	mov	r24, r17
     d18:	0e 94 49 06 	call	0xc92	; 0xc92 <PWM_Timer0_Start>
	default:
		PORT(DC_M_PORT,DC_M_PIN1,OFF);
		PORT(DC_M_PORT,DC_M_PIN2,OFF);
		break;
	}
}
     d1c:	1f 91       	pop	r17
     d1e:	08 95       	ret
	case m_off:
		PORT(DC_M_PORT,DC_M_PIN1,OFF);
		PORT(DC_M_PORT,DC_M_PIN2,OFF);
		break;
	case m_on_cw:
		PORT(DC_M_PORT,DC_M_PIN1,ON);
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	61 e0       	ldi	r22, 0x01	; 1
     d24:	41 e0       	ldi	r20, 0x01	; 1
     d26:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
		PORT(DC_M_PORT,DC_M_PIN2,OFF);
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	62 e0       	ldi	r22, 0x02	; 2
     d2e:	40 e0       	ldi	r20, 0x00	; 0
     d30:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
		PWM_Timer0_Start(speed);
     d34:	81 2f       	mov	r24, r17
     d36:	0e 94 49 06 	call	0xc92	; 0xc92 <PWM_Timer0_Start>
	default:
		PORT(DC_M_PORT,DC_M_PIN1,OFF);
		PORT(DC_M_PORT,DC_M_PIN2,OFF);
		break;
	}
}
     d3a:	1f 91       	pop	r17
     d3c:	08 95       	ret

00000d3e <EEPROM_readByte>:

    return SUCCESS;
}

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     d3e:	ef 92       	push	r14
     d40:	ff 92       	push	r15
     d42:	0f 93       	push	r16
     d44:	1f 93       	push	r17
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	0f 92       	push	r0
     d4c:	cd b7       	in	r28, 0x3d	; 61
     d4e:	de b7       	in	r29, 0x3e	; 62
     d50:	7c 01       	movw	r14, r24
     d52:	8b 01       	movw	r16, r22
	/* Send the Start Bit */
    TWI_start();
     d54:	0e 94 92 08 	call	0x1124	; 0x1124 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     d58:	0e 94 b0 08 	call	0x1160	; 0x1160 <TWI_getStatus>
     d5c:	88 30       	cpi	r24, 0x08	; 8
     d5e:	49 f0       	breq	.+18     	; 0xd72 <EEPROM_readByte+0x34>
        return ERROR;

    /* Send the Stop Bit */
    TWI_stop();

    return SUCCESS;
     d60:	80 e0       	ldi	r24, 0x00	; 0
}
     d62:	0f 90       	pop	r0
     d64:	cf 91       	pop	r28
     d66:	df 91       	pop	r29
     d68:	1f 91       	pop	r17
     d6a:	0f 91       	pop	r16
     d6c:	ff 90       	pop	r15
     d6e:	ef 90       	pop	r14
     d70:	08 95       	ret
    if (TWI_getStatus() != TWI_START)
        return ERROR;

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     d72:	c7 01       	movw	r24, r14
     d74:	88 0f       	add	r24, r24
     d76:	89 2f       	mov	r24, r25
     d78:	88 1f       	adc	r24, r24
     d7a:	99 0b       	sbc	r25, r25
     d7c:	91 95       	neg	r25
     d7e:	28 2f       	mov	r18, r24
     d80:	2e 70       	andi	r18, 0x0E	; 14
     d82:	29 83       	std	Y+1, r18	; 0x01
     d84:	82 2f       	mov	r24, r18
     d86:	80 6a       	ori	r24, 0xA0	; 160
     d88:	0e 94 9b 08 	call	0x1136	; 0x1136 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     d8c:	0e 94 b0 08 	call	0x1160	; 0x1160 <TWI_getStatus>
     d90:	88 31       	cpi	r24, 0x18	; 24
     d92:	31 f7       	brne	.-52     	; 0xd60 <EEPROM_readByte+0x22>
        return ERROR;

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     d94:	8e 2d       	mov	r24, r14
     d96:	0e 94 9b 08 	call	0x1136	; 0x1136 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     d9a:	0e 94 b0 08 	call	0x1160	; 0x1160 <TWI_getStatus>
     d9e:	88 32       	cpi	r24, 0x28	; 40
     da0:	f9 f6       	brne	.-66     	; 0xd60 <EEPROM_readByte+0x22>
        return ERROR;

    /* Send the Repeated Start Bit */
    TWI_start();
     da2:	0e 94 92 08 	call	0x1124	; 0x1124 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
     da6:	0e 94 b0 08 	call	0x1160	; 0x1160 <TWI_getStatus>
     daa:	80 31       	cpi	r24, 0x10	; 16
     dac:	c9 f6       	brne	.-78     	; 0xd60 <EEPROM_readByte+0x22>
        return ERROR;

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	81 6a       	ori	r24, 0xA1	; 161
     db2:	0e 94 9b 08 	call	0x1136	; 0x1136 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
     db6:	0e 94 b0 08 	call	0x1160	; 0x1160 <TWI_getStatus>
     dba:	80 34       	cpi	r24, 0x40	; 64
     dbc:	89 f6       	brne	.-94     	; 0xd60 <EEPROM_readByte+0x22>
        return ERROR;

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
     dbe:	0e 94 a9 08 	call	0x1152	; 0x1152 <TWI_readByteWithNACK>
     dc2:	f8 01       	movw	r30, r16
     dc4:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
     dc6:	0e 94 b0 08 	call	0x1160	; 0x1160 <TWI_getStatus>
     dca:	88 35       	cpi	r24, 0x58	; 88
     dcc:	49 f6       	brne	.-110    	; 0xd60 <EEPROM_readByte+0x22>
        return ERROR;

    /* Send the Stop Bit */
    TWI_stop();
     dce:	0e 94 98 08 	call	0x1130	; 0x1130 <TWI_stop>
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	c6 cf       	rjmp	.-116    	; 0xd62 <EEPROM_readByte+0x24>

00000dd6 <EEPROM_writeByte>:


#include "EEPROM.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     dd6:	1f 93       	push	r17
     dd8:	cf 93       	push	r28
     dda:	df 93       	push	r29
     ddc:	ec 01       	movw	r28, r24
     dde:	16 2f       	mov	r17, r22
	/* Send the Start Bit */
    TWI_start();
     de0:	0e 94 92 08 	call	0x1124	; 0x1124 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     de4:	0e 94 b0 08 	call	0x1160	; 0x1160 <TWI_getStatus>
     de8:	88 30       	cpi	r24, 0x08	; 8
     dea:	29 f0       	breq	.+10     	; 0xdf6 <EEPROM_writeByte+0x20>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
        return ERROR;
    /* Send the Stop Bit */
    TWI_stop();

    return SUCCESS;
     dec:	80 e0       	ldi	r24, 0x00	; 0
}
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	1f 91       	pop	r17
     df4:	08 95       	ret
    if (TWI_getStatus() != TWI_START)
        return ERROR;

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     df6:	ce 01       	movw	r24, r28
     df8:	80 70       	andi	r24, 0x00	; 0
     dfa:	97 70       	andi	r25, 0x07	; 7
     dfc:	88 0f       	add	r24, r24
     dfe:	89 2f       	mov	r24, r25
     e00:	88 1f       	adc	r24, r24
     e02:	99 0b       	sbc	r25, r25
     e04:	91 95       	neg	r25
     e06:	80 6a       	ori	r24, 0xA0	; 160
     e08:	0e 94 9b 08 	call	0x1136	; 0x1136 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     e0c:	0e 94 b0 08 	call	0x1160	; 0x1160 <TWI_getStatus>
     e10:	88 31       	cpi	r24, 0x18	; 24
     e12:	61 f7       	brne	.-40     	; 0xdec <EEPROM_writeByte+0x16>
        return ERROR;

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     e14:	8c 2f       	mov	r24, r28
     e16:	0e 94 9b 08 	call	0x1136	; 0x1136 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     e1a:	0e 94 b0 08 	call	0x1160	; 0x1160 <TWI_getStatus>
     e1e:	88 32       	cpi	r24, 0x28	; 40
     e20:	29 f7       	brne	.-54     	; 0xdec <EEPROM_writeByte+0x16>
        return ERROR;

    /* write byte to eeprom */
    TWI_writeByte(u8data);
     e22:	81 2f       	mov	r24, r17
     e24:	0e 94 9b 08 	call	0x1136	; 0x1136 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     e28:	0e 94 b0 08 	call	0x1160	; 0x1160 <TWI_getStatus>
     e2c:	88 32       	cpi	r24, 0x28	; 40
     e2e:	f1 f6       	brne	.-68     	; 0xdec <EEPROM_writeByte+0x16>
        return ERROR;
    /* Send the Stop Bit */
    TWI_stop();
     e30:	0e 94 98 08 	call	0x1130	; 0x1130 <TWI_stop>
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	db cf       	rjmp	.-74     	; 0xdee <EEPROM_writeByte+0x18>

00000e38 <DDR>:
#include <avr/io.h>
//**************************************************************************************************************************************
//**************************************************************************************************************************************
void  DDR(uint8 Port,uint8 Pin,uint8 State)
{
	switch(Port)
     e38:	81 30       	cpi	r24, 0x01	; 1
     e3a:	51 f1       	breq	.+84     	; 0xe90 <DDR+0x58>
     e3c:	81 30       	cpi	r24, 0x01	; 1
     e3e:	28 f0       	brcs	.+10     	; 0xe4a <DDR+0x12>
     e40:	82 30       	cpi	r24, 0x02	; 2
     e42:	b9 f1       	breq	.+110    	; 0xeb2 <DDR+0x7a>
     e44:	83 30       	cpi	r24, 0x03	; 3
     e46:	99 f0       	breq	.+38     	; 0xe6e <DDR+0x36>
     e48:	08 95       	ret
	{
			case PA:
				if (Pin==total)
     e4a:	68 30       	cpi	r22, 0x08	; 8
     e4c:	09 f4       	brne	.+2      	; 0xe50 <DDR+0x18>
     e4e:	46 c0       	rjmp	.+140    	; 0xedc <DDR+0xa4>

					}
				}
				else
				{
					if(State == OUTPUT)
     e50:	41 30       	cpi	r20, 0x01	; 1
     e52:	09 f4       	brne	.+2      	; 0xe56 <DDR+0x1e>
     e54:	5b c0       	rjmp	.+182    	; 0xf0c <DDR+0xd4>
					{
						SET_BIT(DDRA,Pin);
					}
					else
					{
						CLEAR_BIT(DDRA,Pin);
     e56:	2a b3       	in	r18, 0x1a	; 26
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <DDR+0x2a>
     e5e:	88 0f       	add	r24, r24
     e60:	99 1f       	adc	r25, r25
     e62:	6a 95       	dec	r22
     e64:	e2 f7       	brpl	.-8      	; 0xe5e <DDR+0x26>
     e66:	80 95       	com	r24
     e68:	82 23       	and	r24, r18
     e6a:	8a bb       	out	0x1a, r24	; 26
     e6c:	08 95       	ret
					}
				}
				break;
		//###############################################################################################################################
			case PD:
				if (Pin==total)
     e6e:	68 30       	cpi	r22, 0x08	; 8
     e70:	89 f1       	breq	.+98     	; 0xed4 <DDR+0x9c>
						DDRD=0x00;

					}				}
				else
				{
					if(State == OUTPUT)
     e72:	41 30       	cpi	r20, 0x01	; 1
     e74:	09 f4       	brne	.+2      	; 0xe78 <DDR+0x40>
     e76:	6b c0       	rjmp	.+214    	; 0xf4e <DDR+0x116>
					{
						SET_BIT(DDRD,Pin);
					}
					else
					{
						CLEAR_BIT(DDRD,Pin);
     e78:	21 b3       	in	r18, 0x11	; 17
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <DDR+0x4c>
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	6a 95       	dec	r22
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <DDR+0x48>
     e88:	80 95       	com	r24
     e8a:	82 23       	and	r24, r18
     e8c:	81 bb       	out	0x11, r24	; 17
     e8e:	08 95       	ret
					}
				}
				break;
		//###############################################################################################################################
			case PB:
				if (Pin==total)
     e90:	68 30       	cpi	r22, 0x08	; 8
     e92:	61 f1       	breq	.+88     	; 0xeec <DDR+0xb4>

					}
				}
				else
				{
					if(State == OUTPUT)
     e94:	41 30       	cpi	r20, 0x01	; 1
     e96:	09 f4       	brne	.+2      	; 0xe9a <DDR+0x62>
     e98:	44 c0       	rjmp	.+136    	; 0xf22 <DDR+0xea>
					{
						SET_BIT(DDRB,Pin);
					}
					else
					{
						CLEAR_BIT(DDRB,Pin);
     e9a:	27 b3       	in	r18, 0x17	; 23
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <DDR+0x6e>
     ea2:	88 0f       	add	r24, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	6a 95       	dec	r22
     ea8:	e2 f7       	brpl	.-8      	; 0xea2 <DDR+0x6a>
     eaa:	80 95       	com	r24
     eac:	82 23       	and	r24, r18
     eae:	87 bb       	out	0x17, r24	; 23
     eb0:	08 95       	ret
				}
				break;
		//###############################################################################################################################

			case PC:
				if (Pin==total)
     eb2:	68 30       	cpi	r22, 0x08	; 8
     eb4:	b9 f0       	breq	.+46     	; 0xee4 <DDR+0xac>

					}
				}
				else
				{
					if(State == OUTPUT)
     eb6:	41 30       	cpi	r20, 0x01	; 1
     eb8:	09 f4       	brne	.+2      	; 0xebc <DDR+0x84>
     eba:	3e c0       	rjmp	.+124    	; 0xf38 <DDR+0x100>
					{
						SET_BIT(DDRC,Pin);
					}
					else
					{
						CLEAR_BIT(DDRC,Pin);
     ebc:	24 b3       	in	r18, 0x14	; 20
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <DDR+0x90>
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	6a 95       	dec	r22
     eca:	e2 f7       	brpl	.-8      	; 0xec4 <DDR+0x8c>
     ecc:	80 95       	com	r24
     ece:	82 23       	and	r24, r18
     ed0:	84 bb       	out	0x14, r24	; 20
     ed2:	08 95       	ret
				break;
		//###############################################################################################################################
			case PD:
				if (Pin==total)
				{
					if(State==OUTPUT)
     ed4:	41 30       	cpi	r20, 0x01	; 1
     ed6:	89 f0       	breq	.+34     	; 0xefa <DDR+0xc2>
					{
						DDRD=0xFF;
					}
					else
					{
						DDRD=0x00;
     ed8:	11 ba       	out	0x11, r1	; 17
     eda:	08 95       	ret
	switch(Port)
	{
			case PA:
				if (Pin==total)
				{
					if(State==OUTPUT)
     edc:	41 30       	cpi	r20, 0x01	; 1
     ede:	51 f0       	breq	.+20     	; 0xef4 <DDR+0xbc>
					{
						DDRA=0xFF;
					}
					else
					{
						DDRA=0x00;
     ee0:	1a ba       	out	0x1a, r1	; 26
     ee2:	08 95       	ret
		//###############################################################################################################################

			case PC:
				if (Pin==total)
				{
					if(State==OUTPUT)
     ee4:	41 30       	cpi	r20, 0x01	; 1
     ee6:	79 f0       	breq	.+30     	; 0xf06 <DDR+0xce>
					{
						DDRC=0xFF;
					}
					else
					{
						DDRC=0x00;
     ee8:	14 ba       	out	0x14, r1	; 20
     eea:	08 95       	ret
				break;
		//###############################################################################################################################
			case PB:
				if (Pin==total)
				{
					if(State==OUTPUT)
     eec:	41 30       	cpi	r20, 0x01	; 1
     eee:	41 f0       	breq	.+16     	; 0xf00 <DDR+0xc8>
					{
						DDRB=0xFF;
					}
					else
					{
						DDRB=0x00;
     ef0:	17 ba       	out	0x17, r1	; 23
     ef2:	08 95       	ret
			case PA:
				if (Pin==total)
				{
					if(State==OUTPUT)
					{
						DDRA=0xFF;
     ef4:	8f ef       	ldi	r24, 0xFF	; 255
     ef6:	8a bb       	out	0x1a, r24	; 26
     ef8:	08 95       	ret
			case PD:
				if (Pin==total)
				{
					if(State==OUTPUT)
					{
						DDRD=0xFF;
     efa:	8f ef       	ldi	r24, 0xFF	; 255
     efc:	81 bb       	out	0x11, r24	; 17
     efe:	08 95       	ret
			case PB:
				if (Pin==total)
				{
					if(State==OUTPUT)
					{
						DDRB=0xFF;
     f00:	8f ef       	ldi	r24, 0xFF	; 255
     f02:	87 bb       	out	0x17, r24	; 23
     f04:	08 95       	ret
			case PC:
				if (Pin==total)
				{
					if(State==OUTPUT)
					{
						DDRC=0xFF;
     f06:	8f ef       	ldi	r24, 0xFF	; 255
     f08:	84 bb       	out	0x14, r24	; 20
     f0a:	08 95       	ret
				}
				else
				{
					if(State == OUTPUT)
					{
						SET_BIT(DDRA,Pin);
     f0c:	2a b3       	in	r18, 0x1a	; 26
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	02 c0       	rjmp	.+4      	; 0xf18 <DDR+0xe0>
     f14:	88 0f       	add	r24, r24
     f16:	99 1f       	adc	r25, r25
     f18:	6a 95       	dec	r22
     f1a:	e2 f7       	brpl	.-8      	; 0xf14 <DDR+0xdc>
     f1c:	28 2b       	or	r18, r24
     f1e:	2a bb       	out	0x1a, r18	; 26
     f20:	08 95       	ret
				}
				else
				{
					if(State == OUTPUT)
					{
						SET_BIT(DDRB,Pin);
     f22:	27 b3       	in	r18, 0x17	; 23
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <DDR+0xf6>
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	6a 95       	dec	r22
     f30:	e2 f7       	brpl	.-8      	; 0xf2a <DDR+0xf2>
     f32:	28 2b       	or	r18, r24
     f34:	27 bb       	out	0x17, r18	; 23
     f36:	08 95       	ret
				}
				else
				{
					if(State == OUTPUT)
					{
						SET_BIT(DDRC,Pin);
     f38:	24 b3       	in	r18, 0x14	; 20
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <DDR+0x10c>
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	6a 95       	dec	r22
     f46:	e2 f7       	brpl	.-8      	; 0xf40 <DDR+0x108>
     f48:	28 2b       	or	r18, r24
     f4a:	24 bb       	out	0x14, r18	; 20
     f4c:	08 95       	ret
					}				}
				else
				{
					if(State == OUTPUT)
					{
						SET_BIT(DDRD,Pin);
     f4e:	21 b3       	in	r18, 0x11	; 17
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <DDR+0x122>
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	6a 95       	dec	r22
     f5c:	e2 f7       	brpl	.-8      	; 0xf56 <DDR+0x11e>
     f5e:	28 2b       	or	r18, r24
     f60:	21 bb       	out	0x11, r18	; 17
     f62:	08 95       	ret

00000f64 <PORT>:
}
//**************************************************************************************************************************************
//**************************************************************************************************************************************
void  PORT (uint8 Port,uint8 Pin,uint8 data)
{
	switch(Port)
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	51 f1       	breq	.+84     	; 0xfbc <PORT+0x58>
     f68:	81 30       	cpi	r24, 0x01	; 1
     f6a:	28 f0       	brcs	.+10     	; 0xf76 <PORT+0x12>
     f6c:	82 30       	cpi	r24, 0x02	; 2
     f6e:	b9 f1       	breq	.+110    	; 0xfde <PORT+0x7a>
     f70:	83 30       	cpi	r24, 0x03	; 3
     f72:	99 f0       	breq	.+38     	; 0xf9a <PORT+0x36>
     f74:	08 95       	ret
	{
			case PA:
				if (Pin==total)
     f76:	68 30       	cpi	r22, 0x08	; 8
     f78:	09 f4       	brne	.+2      	; 0xf7c <PORT+0x18>
     f7a:	46 c0       	rjmp	.+140    	; 0x1008 <PORT+0xa4>

					}
				}
				else
				{
					if(data == LOGIC_HIGH)
     f7c:	41 30       	cpi	r20, 0x01	; 1
     f7e:	09 f4       	brne	.+2      	; 0xf82 <PORT+0x1e>
     f80:	5b c0       	rjmp	.+182    	; 0x1038 <PORT+0xd4>
					{
						SET_BIT(PORTA,Pin);
					}
					else
					{
						CLEAR_BIT(PORTA,Pin);
     f82:	2b b3       	in	r18, 0x1b	; 27
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <PORT+0x2a>
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	6a 95       	dec	r22
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <PORT+0x26>
     f92:	80 95       	com	r24
     f94:	82 23       	and	r24, r18
     f96:	8b bb       	out	0x1b, r24	; 27
     f98:	08 95       	ret
					}
				}
				break;
//###############################################################################################################################
			case PD:
				if (Pin==total)
     f9a:	68 30       	cpi	r22, 0x08	; 8
     f9c:	89 f1       	breq	.+98     	; 0x1000 <PORT+0x9c>

							}
				}
				else
				{
					if(data == LOGIC_HIGH)
     f9e:	41 30       	cpi	r20, 0x01	; 1
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <PORT+0x40>
     fa2:	6b c0       	rjmp	.+214    	; 0x107a <PORT+0x116>
					{
						SET_BIT(PORTD,Pin);
					}
					else
					{
						CLEAR_BIT(PORTD,Pin);
     fa4:	22 b3       	in	r18, 0x12	; 18
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <PORT+0x4c>
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	6a 95       	dec	r22
     fb2:	e2 f7       	brpl	.-8      	; 0xfac <PORT+0x48>
     fb4:	80 95       	com	r24
     fb6:	82 23       	and	r24, r18
     fb8:	82 bb       	out	0x12, r24	; 18
     fba:	08 95       	ret
					}
				}
				break;
//###############################################################################################################################
			case PB:
				if (Pin==total)
     fbc:	68 30       	cpi	r22, 0x08	; 8
     fbe:	61 f1       	breq	.+88     	; 0x1018 <PORT+0xb4>

							}
				}
				else
				{
					if(data == LOGIC_HIGH)
     fc0:	41 30       	cpi	r20, 0x01	; 1
     fc2:	09 f4       	brne	.+2      	; 0xfc6 <PORT+0x62>
     fc4:	44 c0       	rjmp	.+136    	; 0x104e <PORT+0xea>
					{
						SET_BIT(PORTB,Pin);
					}
					else
					{
						CLEAR_BIT(PORTB,Pin);
     fc6:	28 b3       	in	r18, 0x18	; 24
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <PORT+0x6e>
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	6a 95       	dec	r22
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <PORT+0x6a>
     fd6:	80 95       	com	r24
     fd8:	82 23       	and	r24, r18
     fda:	88 bb       	out	0x18, r24	; 24
     fdc:	08 95       	ret
					}
				}
				break;
//###############################################################################################################################
			case PC:
				if (Pin==total)
     fde:	68 30       	cpi	r22, 0x08	; 8
     fe0:	b9 f0       	breq	.+46     	; 0x1010 <PORT+0xac>

							}
				}
				else
				{
					if(data == LOGIC_HIGH)
     fe2:	41 30       	cpi	r20, 0x01	; 1
     fe4:	09 f4       	brne	.+2      	; 0xfe8 <PORT+0x84>
     fe6:	3e c0       	rjmp	.+124    	; 0x1064 <PORT+0x100>
					{
						SET_BIT(PORTC,Pin);
					}
					else
					{
						CLEAR_BIT(PORTC,Pin);
     fe8:	25 b3       	in	r18, 0x15	; 21
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <PORT+0x90>
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	6a 95       	dec	r22
     ff6:	e2 f7       	brpl	.-8      	; 0xff0 <PORT+0x8c>
     ff8:	80 95       	com	r24
     ffa:	82 23       	and	r24, r18
     ffc:	85 bb       	out	0x15, r24	; 21
     ffe:	08 95       	ret
//###############################################################################################################################
			case PD:
				if (Pin==total)
				{

					if(data==ON)
    1000:	41 30       	cpi	r20, 0x01	; 1
    1002:	89 f0       	breq	.+34     	; 0x1026 <PORT+0xc2>
							{
								PORTD=0xFF;
							}
							else
							{
								PORTD=0x00;
    1004:	12 ba       	out	0x12, r1	; 18
    1006:	08 95       	ret
	{
			case PA:
				if (Pin==total)
				{

					if(data==ON)
    1008:	41 30       	cpi	r20, 0x01	; 1
    100a:	51 f0       	breq	.+20     	; 0x1020 <PORT+0xbc>
					{
						PORTA=0xFF;
					}
					else
					{
						PORTA=0x00;
    100c:	1b ba       	out	0x1b, r1	; 27
    100e:	08 95       	ret
//###############################################################################################################################
			case PC:
				if (Pin==total)
				{

					if(data==ON)
    1010:	41 30       	cpi	r20, 0x01	; 1
    1012:	79 f0       	breq	.+30     	; 0x1032 <PORT+0xce>
							{
								PORTC=0xFF;
							}
							else
							{
								PORTC=0x00;
    1014:	15 ba       	out	0x15, r1	; 21
    1016:	08 95       	ret
//###############################################################################################################################
			case PB:
				if (Pin==total)
				{

					if(data==ON)
    1018:	41 30       	cpi	r20, 0x01	; 1
    101a:	41 f0       	breq	.+16     	; 0x102c <PORT+0xc8>
							{
								PORTB=0xFF;
							}
							else
							{
								PORTB=0x00;
    101c:	18 ba       	out	0x18, r1	; 24
    101e:	08 95       	ret
				if (Pin==total)
				{

					if(data==ON)
					{
						PORTA=0xFF;
    1020:	8f ef       	ldi	r24, 0xFF	; 255
    1022:	8b bb       	out	0x1b, r24	; 27
    1024:	08 95       	ret
				if (Pin==total)
				{

					if(data==ON)
							{
								PORTD=0xFF;
    1026:	8f ef       	ldi	r24, 0xFF	; 255
    1028:	82 bb       	out	0x12, r24	; 18
    102a:	08 95       	ret
				if (Pin==total)
				{

					if(data==ON)
							{
								PORTB=0xFF;
    102c:	8f ef       	ldi	r24, 0xFF	; 255
    102e:	88 bb       	out	0x18, r24	; 24
    1030:	08 95       	ret
				if (Pin==total)
				{

					if(data==ON)
							{
								PORTC=0xFF;
    1032:	8f ef       	ldi	r24, 0xFF	; 255
    1034:	85 bb       	out	0x15, r24	; 21
    1036:	08 95       	ret
				}
				else
				{
					if(data == LOGIC_HIGH)
					{
						SET_BIT(PORTA,Pin);
    1038:	2b b3       	in	r18, 0x1b	; 27
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <PORT+0xe0>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	6a 95       	dec	r22
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <PORT+0xdc>
    1048:	28 2b       	or	r18, r24
    104a:	2b bb       	out	0x1b, r18	; 27
    104c:	08 95       	ret
				}
				else
				{
					if(data == LOGIC_HIGH)
					{
						SET_BIT(PORTB,Pin);
    104e:	28 b3       	in	r18, 0x18	; 24
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	02 c0       	rjmp	.+4      	; 0x105a <PORT+0xf6>
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	6a 95       	dec	r22
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <PORT+0xf2>
    105e:	28 2b       	or	r18, r24
    1060:	28 bb       	out	0x18, r18	; 24
    1062:	08 95       	ret
				}
				else
				{
					if(data == LOGIC_HIGH)
					{
						SET_BIT(PORTC,Pin);
    1064:	25 b3       	in	r18, 0x15	; 21
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <PORT+0x10c>
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	6a 95       	dec	r22
    1072:	e2 f7       	brpl	.-8      	; 0x106c <PORT+0x108>
    1074:	28 2b       	or	r18, r24
    1076:	25 bb       	out	0x15, r18	; 21
    1078:	08 95       	ret
				}
				else
				{
					if(data == LOGIC_HIGH)
					{
						SET_BIT(PORTD,Pin);
    107a:	22 b3       	in	r18, 0x12	; 18
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <PORT+0x122>
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	6a 95       	dec	r22
    1088:	e2 f7       	brpl	.-8      	; 0x1082 <PORT+0x11e>
    108a:	28 2b       	or	r18, r24
    108c:	22 bb       	out	0x12, r18	; 18
    108e:	08 95       	ret

00001090 <PIN>:
	}
}
//**************************************************************************************************************************************
//**************************************************************************************************************************************
uint8 PIN  (uint8 Port,uint8 Pin)
{
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	0f 92       	push	r0
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
	volatile uint8 RET;
	switch(Port)
    109a:	81 30       	cpi	r24, 0x01	; 1
    109c:	41 f1       	breq	.+80     	; 0x10ee <PIN+0x5e>
    109e:	81 30       	cpi	r24, 0x01	; 1
    10a0:	48 f0       	brcs	.+18     	; 0x10b4 <PIN+0x24>
    10a2:	82 30       	cpi	r24, 0x02	; 2
    10a4:	41 f1       	breq	.+80     	; 0x10f6 <PIN+0x66>
    10a6:	83 30       	cpi	r24, 0x03	; 3
    10a8:	49 f0       	breq	.+18     	; 0x10bc <PIN+0x2c>
		{
			RET=GET_BIT(PIND,Pin);
		}
		break;
	}
	return RET;
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    10ac:	0f 90       	pop	r0
    10ae:	cf 91       	pop	r28
    10b0:	df 91       	pop	r29
    10b2:	08 95       	ret
{
	volatile uint8 RET;
	switch(Port)
	{
	case PA:
		if(Pin==total)
    10b4:	68 30       	cpi	r22, 0x08	; 8
    10b6:	49 f1       	breq	.+82     	; 0x110a <PIN+0x7a>
		{
			RET=PINA;
		}
		else
		{
			RET=GET_BIT(PINA,Pin);
    10b8:	29 b3       	in	r18, 0x19	; 25
    10ba:	03 c0       	rjmp	.+6      	; 0x10c2 <PIN+0x32>
		{
			RET=GET_BIT(PINC,Pin);
		}
		break;
	case PD:
		if(Pin==total)
    10bc:	68 30       	cpi	r22, 0x08	; 8
    10be:	41 f1       	breq	.+80     	; 0x1110 <PIN+0x80>
		{
			RET=PIND;
		}
		else
		{
			RET=GET_BIT(PIND,Pin);
    10c0:	20 b3       	in	r18, 0x10	; 16
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	06 2e       	mov	r0, r22
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <PIN+0x3e>
    10ca:	88 0f       	add	r24, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	0a 94       	dec	r0
    10d0:	e2 f7       	brpl	.-8      	; 0x10ca <PIN+0x3a>
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	82 23       	and	r24, r18
    10d6:	93 23       	and	r25, r19
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <PIN+0x4e>
    10da:	95 95       	asr	r25
    10dc:	87 95       	ror	r24
    10de:	6a 95       	dec	r22
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <PIN+0x4a>
    10e2:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
	}
	return RET;
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    10e6:	0f 90       	pop	r0
    10e8:	cf 91       	pop	r28
    10ea:	df 91       	pop	r29
    10ec:	08 95       	ret
		{
			RET=GET_BIT(PINA,Pin);
		}
		break;
	case PB:
		if(Pin==total)
    10ee:	68 30       	cpi	r22, 0x08	; 8
    10f0:	49 f0       	breq	.+18     	; 0x1104 <PIN+0x74>
		{
			RET=PINB;
		}
		else
		{
			RET=GET_BIT(PINB,Pin);  //PINB&(1<<pi);
    10f2:	26 b3       	in	r18, 0x16	; 22
    10f4:	e6 cf       	rjmp	.-52     	; 0x10c2 <PIN+0x32>
		}
		break;
	case PC:
		if(Pin==total)
    10f6:	68 30       	cpi	r22, 0x08	; 8
    10f8:	11 f0       	breq	.+4      	; 0x10fe <PIN+0x6e>
		{
			RET=PINC;
		}
		else
		{
			RET=GET_BIT(PINC,Pin);
    10fa:	23 b3       	in	r18, 0x13	; 19
    10fc:	e2 cf       	rjmp	.-60     	; 0x10c2 <PIN+0x32>
		}
		break;
	case PC:
		if(Pin==total)
		{
			RET=PINC;
    10fe:	83 b3       	in	r24, 0x13	; 19
    1100:	89 83       	std	Y+1, r24	; 0x01
    1102:	d3 cf       	rjmp	.-90     	; 0x10aa <PIN+0x1a>
		}
		break;
	case PB:
		if(Pin==total)
		{
			RET=PINB;
    1104:	86 b3       	in	r24, 0x16	; 22
    1106:	89 83       	std	Y+1, r24	; 0x01
    1108:	d0 cf       	rjmp	.-96     	; 0x10aa <PIN+0x1a>
	switch(Port)
	{
	case PA:
		if(Pin==total)
		{
			RET=PINA;
    110a:	89 b3       	in	r24, 0x19	; 25
    110c:	89 83       	std	Y+1, r24	; 0x01
    110e:	cd cf       	rjmp	.-102    	; 0x10aa <PIN+0x1a>
		}
		break;
	case PD:
		if(Pin==total)
		{
			RET=PIND;
    1110:	80 b3       	in	r24, 0x10	; 16
    1112:	89 83       	std	Y+1, r24	; 0x01
    1114:	ca cf       	rjmp	.-108    	; 0x10aa <PIN+0x1a>

00001116 <TWI_init>:


void TWI_init(void)
{
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    1116:	82 e0       	ldi	r24, 0x02	; 2
    1118:	80 b9       	out	0x00, r24	; 0
	TWSR = 0x00;
    111a:	11 b8       	out	0x01, r1	; 1

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :)
    111c:	82 b9       	out	0x02, r24	; 2

    TWCR = (1<<TWEN); /* enable TWI */
    111e:	84 e0       	ldi	r24, 0x04	; 4
    1120:	86 bf       	out	0x36, r24	; 54
}
    1122:	08 95       	ret

00001124 <TWI_start>:
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1124:	84 ea       	ldi	r24, 0xA4	; 164
    1126:	86 bf       	out	0x36, r24	; 54

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1128:	06 b6       	in	r0, 0x36	; 54
    112a:	07 fe       	sbrs	r0, 7
    112c:	fd cf       	rjmp	.-6      	; 0x1128 <TWI_start+0x4>
}
    112e:	08 95       	ret

00001130 <TWI_stop>:
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1130:	84 e9       	ldi	r24, 0x94	; 148
    1132:	86 bf       	out	0x36, r24	; 54
}
    1134:	08 95       	ret

00001136 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    /* Put data On TWI data Register */
    TWDR = data;
    1136:	83 b9       	out	0x03, r24	; 3
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1138:	84 e8       	ldi	r24, 0x84	; 132
    113a:	86 bf       	out	0x36, r24	; 54
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    113c:	06 b6       	in	r0, 0x36	; 54
    113e:	07 fe       	sbrs	r0, 7
    1140:	fd cf       	rjmp	.-6      	; 0x113c <TWI_writeByte+0x6>
}
    1142:	08 95       	ret

00001144 <TWI_readByteWithACK>:
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1144:	84 ec       	ldi	r24, 0xC4	; 196
    1146:	86 bf       	out	0x36, r24	; 54
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1148:	06 b6       	in	r0, 0x36	; 54
    114a:	07 fe       	sbrs	r0, 7
    114c:	fd cf       	rjmp	.-6      	; 0x1148 <TWI_readByteWithACK+0x4>
    /* Read Data */
    return TWDR;
    114e:	83 b1       	in	r24, 0x03	; 3
}
    1150:	08 95       	ret

00001152 <TWI_readByteWithNACK>:
{
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1152:	84 e8       	ldi	r24, 0x84	; 132
    1154:	86 bf       	out	0x36, r24	; 54
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1156:	06 b6       	in	r0, 0x36	; 54
    1158:	07 fe       	sbrs	r0, 7
    115a:	fd cf       	rjmp	.-6      	; 0x1156 <TWI_readByteWithNACK+0x4>
    /* Read Data */
    return TWDR;
    115c:	83 b1       	in	r24, 0x03	; 3
}
    115e:	08 95       	ret

00001160 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1160:	81 b1       	in	r24, 0x01	; 1
    return status;
}
    1162:	88 7f       	andi	r24, 0xF8	; 248
    1164:	08 95       	ret

00001166 <LCD_CHAR>:
#endif
}
//===================================================================
// SEND CHARACHTER
void LCD_CHAR(uint8 charachter)
{
    1166:	df 92       	push	r13
    1168:	ef 92       	push	r14
    116a:	ff 92       	push	r15
    116c:	0f 93       	push	r16
    116e:	1f 93       	push	r17
    1170:	d8 2e       	mov	r13, r24

		PORT(RS_PORT,RS_PIN,ON);
    1172:	82 e0       	ldi	r24, 0x02	; 2
    1174:	66 e0       	ldi	r22, 0x06	; 6
    1176:	41 e0       	ldi	r20, 0x01	; 1
    1178:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    117c:	e0 ed       	ldi	r30, 0xD0	; 208
    117e:	ee 2e       	mov	r14, r30
    1180:	e7 e0       	ldi	r30, 0x07	; 7
    1182:	fe 2e       	mov	r15, r30
    1184:	c7 01       	movw	r24, r14
    1186:	01 97       	sbiw	r24, 0x01	; 1
    1188:	f1 f7       	brne	.-4      	; 0x1186 <LCD_CHAR+0x20>
		_delay_ms(1);
		PORT(EN_PORT,EN_PIN,ON);
    118a:	82 e0       	ldi	r24, 0x02	; 2
    118c:	67 e0       	ldi	r22, 0x07	; 7
    118e:	41 e0       	ldi	r20, 0x01	; 1
    1190:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
    1194:	c7 01       	movw	r24, r14
    1196:	01 97       	sbiw	r24, 0x01	; 1
    1198:	f1 f7       	brne	.-4      	; 0x1196 <LCD_CHAR+0x30>
		_delay_ms(1);

#if (LCD_TYPE==FOUR_BITS_MODE)
		PORT(D4_PORT,D4_PIN,GET_BIT(charachter,4) );
    119a:	0d 2d       	mov	r16, r13
    119c:	10 e0       	ldi	r17, 0x00	; 0
    119e:	a8 01       	movw	r20, r16
    11a0:	40 71       	andi	r20, 0x10	; 16
    11a2:	50 70       	andi	r21, 0x00	; 0
    11a4:	55 95       	asr	r21
    11a6:	47 95       	ror	r20
    11a8:	55 95       	asr	r21
    11aa:	47 95       	ror	r20
    11ac:	55 95       	asr	r21
    11ae:	47 95       	ror	r20
    11b0:	55 95       	asr	r21
    11b2:	47 95       	ror	r20
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	64 e0       	ldi	r22, 0x04	; 4
    11b8:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
		PORT(D5_PORT,D5_PIN,GET_BIT(charachter,5) );
    11bc:	a8 01       	movw	r20, r16
    11be:	40 72       	andi	r20, 0x20	; 32
    11c0:	50 70       	andi	r21, 0x00	; 0
    11c2:	55 95       	asr	r21
    11c4:	47 95       	ror	r20
    11c6:	55 95       	asr	r21
    11c8:	47 95       	ror	r20
    11ca:	55 95       	asr	r21
    11cc:	47 95       	ror	r20
    11ce:	55 95       	asr	r21
    11d0:	47 95       	ror	r20
    11d2:	55 95       	asr	r21
    11d4:	47 95       	ror	r20
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	65 e0       	ldi	r22, 0x05	; 5
    11da:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
		PORT(D6_PORT,D6_PIN,GET_BIT(charachter,6) );
    11de:	a8 01       	movw	r20, r16
    11e0:	40 74       	andi	r20, 0x40	; 64
    11e2:	50 70       	andi	r21, 0x00	; 0
    11e4:	04 2e       	mov	r0, r20
    11e6:	45 2f       	mov	r20, r21
    11e8:	00 0c       	add	r0, r0
    11ea:	44 1f       	adc	r20, r20
    11ec:	55 0b       	sbc	r21, r21
    11ee:	00 0c       	add	r0, r0
    11f0:	44 1f       	adc	r20, r20
    11f2:	55 1f       	adc	r21, r21
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	66 e0       	ldi	r22, 0x06	; 6
    11f8:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
		PORT(D7_PORT,D7_PIN,GET_BIT(charachter,7) );
    11fc:	4d 2d       	mov	r20, r13
    11fe:	44 1f       	adc	r20, r20
    1200:	44 27       	eor	r20, r20
    1202:	44 1f       	adc	r20, r20
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	67 e0       	ldi	r22, 0x07	; 7
    1208:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
    120c:	c7 01       	movw	r24, r14
    120e:	01 97       	sbiw	r24, 0x01	; 1
    1210:	f1 f7       	brne	.-4      	; 0x120e <LCD_CHAR+0xa8>

		_delay_ms(1);
		PORT(EN_PORT,EN_PIN,OFF);
    1212:	82 e0       	ldi	r24, 0x02	; 2
    1214:	67 e0       	ldi	r22, 0x07	; 7
    1216:	40 e0       	ldi	r20, 0x00	; 0
    1218:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
    121c:	c7 01       	movw	r24, r14
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	f1 f7       	brne	.-4      	; 0x121e <LCD_CHAR+0xb8>
		_delay_ms(1);
		PORT(EN_PORT,EN_PIN,ON);
    1222:	82 e0       	ldi	r24, 0x02	; 2
    1224:	67 e0       	ldi	r22, 0x07	; 7
    1226:	41 e0       	ldi	r20, 0x01	; 1
    1228:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
    122c:	c7 01       	movw	r24, r14
    122e:	01 97       	sbiw	r24, 0x01	; 1
    1230:	f1 f7       	brne	.-4      	; 0x122e <LCD_CHAR+0xc8>

		_delay_ms(1);


		PORT(D4_PORT,D4_PIN,GET_BIT(charachter,0) );
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	d8 22       	and	r13, r24
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	64 e0       	ldi	r22, 0x04	; 4
    123a:	4d 2d       	mov	r20, r13
    123c:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
		PORT(D5_PORT,D5_PIN,GET_BIT(charachter,1) );
    1240:	a8 01       	movw	r20, r16
    1242:	42 70       	andi	r20, 0x02	; 2
    1244:	50 70       	andi	r21, 0x00	; 0
    1246:	55 95       	asr	r21
    1248:	47 95       	ror	r20
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	65 e0       	ldi	r22, 0x05	; 5
    124e:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
		PORT(D6_PORT,D6_PIN,GET_BIT(charachter,2) );
    1252:	a8 01       	movw	r20, r16
    1254:	44 70       	andi	r20, 0x04	; 4
    1256:	50 70       	andi	r21, 0x00	; 0
    1258:	55 95       	asr	r21
    125a:	47 95       	ror	r20
    125c:	55 95       	asr	r21
    125e:	47 95       	ror	r20
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	66 e0       	ldi	r22, 0x06	; 6
    1264:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
		PORT(D7_PORT,D7_PIN,GET_BIT(charachter,3) );
    1268:	08 70       	andi	r16, 0x08	; 8
    126a:	10 70       	andi	r17, 0x00	; 0
    126c:	15 95       	asr	r17
    126e:	07 95       	ror	r16
    1270:	15 95       	asr	r17
    1272:	07 95       	ror	r16
    1274:	15 95       	asr	r17
    1276:	07 95       	ror	r16
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	67 e0       	ldi	r22, 0x07	; 7
    127c:	40 2f       	mov	r20, r16
    127e:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
    1282:	c7 01       	movw	r24, r14
    1284:	01 97       	sbiw	r24, 0x01	; 1
    1286:	f1 f7       	brne	.-4      	; 0x1284 <LCD_CHAR+0x11e>

		_delay_ms(1);
		PORT(EN_PORT,EN_PIN,OFF);
    1288:	82 e0       	ldi	r24, 0x02	; 2
    128a:	67 e0       	ldi	r22, 0x07	; 7
    128c:	40 e0       	ldi	r20, 0x00	; 0
    128e:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
    1292:	c7 01       	movw	r24, r14
    1294:	01 97       	sbiw	r24, 0x01	; 1
    1296:	f1 f7       	brne	.-4      	; 0x1294 <LCD_CHAR+0x12e>
			_delay_ms(1);
			PORT(EN_PORT,EN_PIN,OFF);
			_delay_ms(1);

#endif
}
    1298:	1f 91       	pop	r17
    129a:	0f 91       	pop	r16
    129c:	ff 90       	pop	r15
    129e:	ef 90       	pop	r14
    12a0:	df 90       	pop	r13
    12a2:	08 95       	ret

000012a4 <LCD_STR>:

//===================================================================
// SEND STRING
void LCD_STR(const char *ptr)
{
    12a4:	cf 93       	push	r28
    12a6:	df 93       	push	r29
    12a8:	ec 01       	movw	r28, r24
	while((*ptr) != '\0')
    12aa:	88 81       	ld	r24, Y
    12ac:	88 23       	and	r24, r24
    12ae:	31 f0       	breq	.+12     	; 0x12bc <LCD_STR+0x18>
	{
		LCD_CHAR(*ptr);
    12b0:	0e 94 b3 08 	call	0x1166	; 0x1166 <LCD_CHAR>
		ptr++;
    12b4:	21 96       	adiw	r28, 0x01	; 1

//===================================================================
// SEND STRING
void LCD_STR(const char *ptr)
{
	while((*ptr) != '\0')
    12b6:	88 81       	ld	r24, Y
    12b8:	88 23       	and	r24, r24
    12ba:	d1 f7       	brne	.-12     	; 0x12b0 <LCD_STR+0xc>
	{
		LCD_CHAR(*ptr);
		ptr++;
	}
}
    12bc:	df 91       	pop	r29
    12be:	cf 91       	pop	r28
    12c0:	08 95       	ret

000012c2 <LCD_INT>:
{
	LCD_COMMAND(LCD_CLEAR_COMMAND);
}

void LCD_INT(int data)
{
    12c2:	0f 93       	push	r16
    12c4:	1f 93       	push	r17
    12c6:	df 93       	push	r29
    12c8:	cf 93       	push	r28
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62
    12ce:	60 97       	sbiw	r28, 0x10	; 16
    12d0:	0f b6       	in	r0, 0x3f	; 63
    12d2:	f8 94       	cli
    12d4:	de bf       	out	0x3e, r29	; 62
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	cd bf       	out	0x3d, r28	; 61
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    12da:	8e 01       	movw	r16, r28
    12dc:	0f 5f       	subi	r16, 0xFF	; 255
    12de:	1f 4f       	sbci	r17, 0xFF	; 255
    12e0:	b8 01       	movw	r22, r16
    12e2:	4a e0       	ldi	r20, 0x0A	; 10
    12e4:	50 e0       	ldi	r21, 0x00	; 0
    12e6:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <itoa>
   LCD_STR(buff); /* Display the string */
    12ea:	c8 01       	movw	r24, r16
    12ec:	0e 94 52 09 	call	0x12a4	; 0x12a4 <LCD_STR>
}
    12f0:	60 96       	adiw	r28, 0x10	; 16
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	f8 94       	cli
    12f6:	de bf       	out	0x3e, r29	; 62
    12f8:	0f be       	out	0x3f, r0	; 63
    12fa:	cd bf       	out	0x3d, r28	; 61
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	1f 91       	pop	r17
    1302:	0f 91       	pop	r16
    1304:	08 95       	ret

00001306 <LCD_COMMAND>:
			LCD_COMMAND(LCD_CURSOR_OFF);
			LCD_COMMAND(LCD_CLEAR_COMMAND);
}
// SEND COMMAND
void LCD_COMMAND(uint8 command)
{
    1306:	df 92       	push	r13
    1308:	ef 92       	push	r14
    130a:	ff 92       	push	r15
    130c:	0f 93       	push	r16
    130e:	1f 93       	push	r17
    1310:	d8 2e       	mov	r13, r24
			PORT(RS_PORT,RS_PIN,OFF);
    1312:	82 e0       	ldi	r24, 0x02	; 2
    1314:	66 e0       	ldi	r22, 0x06	; 6
    1316:	40 e0       	ldi	r20, 0x00	; 0
    1318:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
    131c:	30 ed       	ldi	r19, 0xD0	; 208
    131e:	e3 2e       	mov	r14, r19
    1320:	37 e0       	ldi	r19, 0x07	; 7
    1322:	f3 2e       	mov	r15, r19
    1324:	c7 01       	movw	r24, r14
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	f1 f7       	brne	.-4      	; 0x1326 <LCD_COMMAND+0x20>
			_delay_ms(1);
			PORT(EN_PORT,EN_PIN,ON);
    132a:	82 e0       	ldi	r24, 0x02	; 2
    132c:	67 e0       	ldi	r22, 0x07	; 7
    132e:	41 e0       	ldi	r20, 0x01	; 1
    1330:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
    1334:	c7 01       	movw	r24, r14
    1336:	01 97       	sbiw	r24, 0x01	; 1
    1338:	f1 f7       	brne	.-4      	; 0x1336 <LCD_COMMAND+0x30>
			_delay_ms(1);

#if (LCD_TYPE==FOUR_BITS_MODE)

			PORT(D4_PORT,D4_PIN,GET_BIT(command,4) );
    133a:	0d 2d       	mov	r16, r13
    133c:	10 e0       	ldi	r17, 0x00	; 0
    133e:	a8 01       	movw	r20, r16
    1340:	40 71       	andi	r20, 0x10	; 16
    1342:	50 70       	andi	r21, 0x00	; 0
    1344:	55 95       	asr	r21
    1346:	47 95       	ror	r20
    1348:	55 95       	asr	r21
    134a:	47 95       	ror	r20
    134c:	55 95       	asr	r21
    134e:	47 95       	ror	r20
    1350:	55 95       	asr	r21
    1352:	47 95       	ror	r20
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	64 e0       	ldi	r22, 0x04	; 4
    1358:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
			PORT(D5_PORT,D5_PIN,GET_BIT(command,5) );
    135c:	a8 01       	movw	r20, r16
    135e:	40 72       	andi	r20, 0x20	; 32
    1360:	50 70       	andi	r21, 0x00	; 0
    1362:	55 95       	asr	r21
    1364:	47 95       	ror	r20
    1366:	55 95       	asr	r21
    1368:	47 95       	ror	r20
    136a:	55 95       	asr	r21
    136c:	47 95       	ror	r20
    136e:	55 95       	asr	r21
    1370:	47 95       	ror	r20
    1372:	55 95       	asr	r21
    1374:	47 95       	ror	r20
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	65 e0       	ldi	r22, 0x05	; 5
    137a:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
			PORT(D6_PORT,D6_PIN,GET_BIT(command,6) );
    137e:	a8 01       	movw	r20, r16
    1380:	40 74       	andi	r20, 0x40	; 64
    1382:	50 70       	andi	r21, 0x00	; 0
    1384:	04 2e       	mov	r0, r20
    1386:	45 2f       	mov	r20, r21
    1388:	00 0c       	add	r0, r0
    138a:	44 1f       	adc	r20, r20
    138c:	55 0b       	sbc	r21, r21
    138e:	00 0c       	add	r0, r0
    1390:	44 1f       	adc	r20, r20
    1392:	55 1f       	adc	r21, r21
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	66 e0       	ldi	r22, 0x06	; 6
    1398:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
			PORT(D7_PORT,D7_PIN,GET_BIT(command,7) );
    139c:	4d 2d       	mov	r20, r13
    139e:	44 1f       	adc	r20, r20
    13a0:	44 27       	eor	r20, r20
    13a2:	44 1f       	adc	r20, r20
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	67 e0       	ldi	r22, 0x07	; 7
    13a8:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
    13ac:	c7 01       	movw	r24, r14
    13ae:	01 97       	sbiw	r24, 0x01	; 1
    13b0:	f1 f7       	brne	.-4      	; 0x13ae <LCD_COMMAND+0xa8>

			_delay_ms(1);
			PORT(EN_PORT,EN_PIN,OFF);
    13b2:	82 e0       	ldi	r24, 0x02	; 2
    13b4:	67 e0       	ldi	r22, 0x07	; 7
    13b6:	40 e0       	ldi	r20, 0x00	; 0
    13b8:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
    13bc:	c7 01       	movw	r24, r14
    13be:	01 97       	sbiw	r24, 0x01	; 1
    13c0:	f1 f7       	brne	.-4      	; 0x13be <LCD_COMMAND+0xb8>
			_delay_ms(1);
			PORT(EN_PORT,EN_PIN,ON);
    13c2:	82 e0       	ldi	r24, 0x02	; 2
    13c4:	67 e0       	ldi	r22, 0x07	; 7
    13c6:	41 e0       	ldi	r20, 0x01	; 1
    13c8:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
    13cc:	c7 01       	movw	r24, r14
    13ce:	01 97       	sbiw	r24, 0x01	; 1
    13d0:	f1 f7       	brne	.-4      	; 0x13ce <LCD_COMMAND+0xc8>

			_delay_ms(1);

			PORT(D4_PORT,D4_PIN,GET_BIT(command,0) );
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	d8 22       	and	r13, r24
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	64 e0       	ldi	r22, 0x04	; 4
    13da:	4d 2d       	mov	r20, r13
    13dc:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
			PORT(D5_PORT,D5_PIN,GET_BIT(command,1) );
    13e0:	a8 01       	movw	r20, r16
    13e2:	42 70       	andi	r20, 0x02	; 2
    13e4:	50 70       	andi	r21, 0x00	; 0
    13e6:	55 95       	asr	r21
    13e8:	47 95       	ror	r20
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	65 e0       	ldi	r22, 0x05	; 5
    13ee:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
			PORT(D6_PORT,D6_PIN,GET_BIT(command,2) );
    13f2:	a8 01       	movw	r20, r16
    13f4:	44 70       	andi	r20, 0x04	; 4
    13f6:	50 70       	andi	r21, 0x00	; 0
    13f8:	55 95       	asr	r21
    13fa:	47 95       	ror	r20
    13fc:	55 95       	asr	r21
    13fe:	47 95       	ror	r20
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	66 e0       	ldi	r22, 0x06	; 6
    1404:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
			PORT(D7_PORT,D7_PIN,GET_BIT(command,3) );
    1408:	08 70       	andi	r16, 0x08	; 8
    140a:	10 70       	andi	r17, 0x00	; 0
    140c:	15 95       	asr	r17
    140e:	07 95       	ror	r16
    1410:	15 95       	asr	r17
    1412:	07 95       	ror	r16
    1414:	15 95       	asr	r17
    1416:	07 95       	ror	r16
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	67 e0       	ldi	r22, 0x07	; 7
    141c:	40 2f       	mov	r20, r16
    141e:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
    1422:	c7 01       	movw	r24, r14
    1424:	01 97       	sbiw	r24, 0x01	; 1
    1426:	f1 f7       	brne	.-4      	; 0x1424 <LCD_COMMAND+0x11e>

			_delay_ms(1);
			PORT(EN_PORT,EN_PIN,OFF);
    1428:	82 e0       	ldi	r24, 0x02	; 2
    142a:	67 e0       	ldi	r22, 0x07	; 7
    142c:	40 e0       	ldi	r20, 0x00	; 0
    142e:	0e 94 b2 07 	call	0xf64	; 0xf64 <PORT>
    1432:	c7 01       	movw	r24, r14
    1434:	01 97       	sbiw	r24, 0x01	; 1
    1436:	f1 f7       	brne	.-4      	; 0x1434 <LCD_COMMAND+0x12e>
			PORT(LCD_PORT,total,command);
			_delay_ms(1);
			PORT(EN_PORT,EN_PIN,OFF);
			_delay_ms(1);
#endif
}
    1438:	1f 91       	pop	r17
    143a:	0f 91       	pop	r16
    143c:	ff 90       	pop	r15
    143e:	ef 90       	pop	r14
    1440:	df 90       	pop	r13
    1442:	08 95       	ret

00001444 <LCD_moveCursor>:
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
   LCD_STR(buff); /* Display the string */
}

void LCD_moveCursor(uint8 row,uint8 col)
{
    1444:	df 93       	push	r29
    1446:	cf 93       	push	r28
    1448:	0f 92       	push	r0
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
	volatile uint8 lcd_memory_address;

	switch(row)
    144e:	81 30       	cpi	r24, 0x01	; 1
    1450:	d9 f0       	breq	.+54     	; 0x1488 <LCD_moveCursor+0x44>
    1452:	81 30       	cpi	r24, 0x01	; 1
    1454:	48 f4       	brcc	.+18     	; 0x1468 <LCD_moveCursor+0x24>
				break;
		case 2:
			lcd_memory_address=col+0x10;
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1456:	69 83       	std	Y+1, r22	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_COMMAND(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1458:	89 81       	ldd	r24, Y+1	; 0x01
    145a:	80 68       	ori	r24, 0x80	; 128
    145c:	0e 94 83 09 	call	0x1306	; 0x1306 <LCD_COMMAND>
}
    1460:	0f 90       	pop	r0
    1462:	cf 91       	pop	r28
    1464:	df 91       	pop	r29
    1466:	08 95       	ret

void LCD_moveCursor(uint8 row,uint8 col)
{
	volatile uint8 lcd_memory_address;

	switch(row)
    1468:	82 30       	cpi	r24, 0x02	; 2
    146a:	21 f0       	breq	.+8      	; 0x1474 <LCD_moveCursor+0x30>
    146c:	83 30       	cpi	r24, 0x03	; 3
    146e:	a1 f7       	brne	.-24     	; 0x1458 <LCD_moveCursor+0x14>
				break;
		case 2:
			lcd_memory_address=col+0x10;
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1470:	60 5b       	subi	r22, 0xB0	; 176
    1472:	f1 cf       	rjmp	.-30     	; 0x1456 <LCD_moveCursor+0x12>
				break;
		case 1:
			lcd_memory_address=col+0x40;
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1474:	60 5f       	subi	r22, 0xF0	; 240
    1476:	69 83       	std	Y+1, r22	; 0x01
		case 3:
			lcd_memory_address=col+0x50;
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_COMMAND(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	80 68       	ori	r24, 0x80	; 128
    147c:	0e 94 83 09 	call	0x1306	; 0x1306 <LCD_COMMAND>
}
    1480:	0f 90       	pop	r0
    1482:	cf 91       	pop	r28
    1484:	df 91       	pop	r29
    1486:	08 95       	ret
	{
		case 0:
			lcd_memory_address=col;
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1488:	60 5c       	subi	r22, 0xC0	; 192
    148a:	69 83       	std	Y+1, r22	; 0x01
		case 3:
			lcd_memory_address=col+0x50;
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_COMMAND(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    148c:	89 81       	ldd	r24, Y+1	; 0x01
    148e:	80 68       	ori	r24, 0x80	; 128
    1490:	0e 94 83 09 	call	0x1306	; 0x1306 <LCD_COMMAND>
}
    1494:	0f 90       	pop	r0
    1496:	cf 91       	pop	r28
    1498:	df 91       	pop	r29
    149a:	08 95       	ret

0000149c <LCD_STR_R_C>:

void LCD_STR_R_C(uint8 row,uint8 col,const char *txt)
{
    149c:	0f 93       	push	r16
    149e:	1f 93       	push	r17
    14a0:	8a 01       	movw	r16, r20
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    14a2:	0e 94 22 0a 	call	0x1444	; 0x1444 <LCD_moveCursor>
	LCD_STR(txt); /* display the string */
    14a6:	c8 01       	movw	r24, r16
    14a8:	0e 94 52 09 	call	0x12a4	; 0x12a4 <LCD_STR>
}
    14ac:	1f 91       	pop	r17
    14ae:	0f 91       	pop	r16
    14b0:	08 95       	ret

000014b2 <LCD_CLEAR>:

//===================================================================
// CLEAR LCD
void LCD_CLEAR(void)
{
	LCD_COMMAND(LCD_CLEAR_COMMAND);
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	0e 94 83 09 	call	0x1306	; 0x1306 <LCD_COMMAND>
}
    14b8:	08 95       	ret

000014ba <LCD_INIT>:
#include "LCD.h"
//===================================================================
// LCD INITIALIZATION
void LCD_INIT(void)
{
			DDR(RS_PORT,RS_PIN,OUTPUT);            //RS PIN     ---> OUTPUT
    14ba:	82 e0       	ldi	r24, 0x02	; 2
    14bc:	66 e0       	ldi	r22, 0x06	; 6
    14be:	41 e0       	ldi	r20, 0x01	; 1
    14c0:	0e 94 1c 07 	call	0xe38	; 0xe38 <DDR>
			DDR(EN_PORT,EN_PIN,OUTPUT);            //ENABLE PIN ---> OUTPUT
    14c4:	82 e0       	ldi	r24, 0x02	; 2
    14c6:	67 e0       	ldi	r22, 0x07	; 7
    14c8:	41 e0       	ldi	r20, 0x01	; 1
    14ca:	0e 94 1c 07 	call	0xe38	; 0xe38 <DDR>
    14ce:	80 e4       	ldi	r24, 0x40	; 64
    14d0:	9c e9       	ldi	r25, 0x9C	; 156
    14d2:	01 97       	sbiw	r24, 0x01	; 1
    14d4:	f1 f7       	brne	.-4      	; 0x14d2 <LCD_INIT+0x18>
			_delay_ms(20);
#if (LCD_TYPE==FOUR_BITS_MODE)

			DDR(D4_PORT,D4_PIN,OUTPUT);
    14d6:	80 e0       	ldi	r24, 0x00	; 0
    14d8:	64 e0       	ldi	r22, 0x04	; 4
    14da:	41 e0       	ldi	r20, 0x01	; 1
    14dc:	0e 94 1c 07 	call	0xe38	; 0xe38 <DDR>
			DDR(D5_PORT,D5_PIN,OUTPUT);
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	65 e0       	ldi	r22, 0x05	; 5
    14e4:	41 e0       	ldi	r20, 0x01	; 1
    14e6:	0e 94 1c 07 	call	0xe38	; 0xe38 <DDR>
			DDR(D6_PORT,D6_PIN,OUTPUT);
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	66 e0       	ldi	r22, 0x06	; 6
    14ee:	41 e0       	ldi	r20, 0x01	; 1
    14f0:	0e 94 1c 07 	call	0xe38	; 0xe38 <DDR>
			DDR(D7_PORT,D7_PIN,OUTPUT);
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	67 e0       	ldi	r22, 0x07	; 7
    14f8:	41 e0       	ldi	r20, 0x01	; 1
    14fa:	0e 94 1c 07 	call	0xe38	; 0xe38 <DDR>

			LCD_COMMAND(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    14fe:	83 e3       	ldi	r24, 0x33	; 51
    1500:	0e 94 83 09 	call	0x1306	; 0x1306 <LCD_COMMAND>
			LCD_COMMAND(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1504:	82 e3       	ldi	r24, 0x32	; 50
    1506:	0e 94 83 09 	call	0x1306	; 0x1306 <LCD_COMMAND>
			LCD_COMMAND(LCD_TWO_LINES_FOUR_BITS_MODE);
    150a:	88 e2       	ldi	r24, 0x28	; 40
    150c:	0e 94 83 09 	call	0x1306	; 0x1306 <LCD_COMMAND>
#elif (LCD_TYPE ==EIGHT_BITS_MODE)

			DDR(LCD_PORT,total,OUTPUT);
			LCD_COMMAND(LCD_TWO_LINES_EIGHT_BITS_MODE);
#endif
			LCD_COMMAND(LCD_CURSOR_OFF);
    1510:	8c e0       	ldi	r24, 0x0C	; 12
    1512:	0e 94 83 09 	call	0x1306	; 0x1306 <LCD_COMMAND>
			LCD_COMMAND(LCD_CLEAR_COMMAND);
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	0e 94 83 09 	call	0x1306	; 0x1306 <LCD_COMMAND>
}
    151c:	08 95       	ret

0000151e <CallBackTimer>:
#define ERROR_PASS 2
#define MAX_WRONG_PASS 3
//############################################################################################################
void CallBackTimer(void)
{
	g_tick++;
    151e:	80 91 82 01 	lds	r24, 0x0182
    1522:	90 91 83 01 	lds	r25, 0x0183
    1526:	a0 91 84 01 	lds	r26, 0x0184
    152a:	b0 91 85 01 	lds	r27, 0x0185
    152e:	01 96       	adiw	r24, 0x01	; 1
    1530:	a1 1d       	adc	r26, r1
    1532:	b1 1d       	adc	r27, r1
    1534:	80 93 82 01 	sts	0x0182, r24
    1538:	90 93 83 01 	sts	0x0183, r25
    153c:	a0 93 84 01 	sts	0x0184, r26
    1540:	b0 93 85 01 	sts	0x0185, r27
	if(g_tick==2)
    1544:	02 97       	sbiw	r24, 0x02	; 2
    1546:	a1 05       	cpc	r26, r1
    1548:	b1 05       	cpc	r27, r1
    154a:	09 f0       	breq	.+2      	; 0x154e <CallBackTimer+0x30>
    154c:	08 95       	ret
	{
		tickk++;
    154e:	80 91 7e 01 	lds	r24, 0x017E
    1552:	90 91 7f 01 	lds	r25, 0x017F
    1556:	a0 91 80 01 	lds	r26, 0x0180
    155a:	b0 91 81 01 	lds	r27, 0x0181
    155e:	01 96       	adiw	r24, 0x01	; 1
    1560:	a1 1d       	adc	r26, r1
    1562:	b1 1d       	adc	r27, r1
    1564:	80 93 7e 01 	sts	0x017E, r24
    1568:	90 93 7f 01 	sts	0x017F, r25
    156c:	a0 93 80 01 	sts	0x0180, r26
    1570:	b0 93 81 01 	sts	0x0181, r27
		g_tick=0;
    1574:	10 92 82 01 	sts	0x0182, r1
    1578:	10 92 83 01 	sts	0x0183, r1
    157c:	10 92 84 01 	sts	0x0184, r1
    1580:	10 92 85 01 	sts	0x0185, r1
    1584:	08 95       	ret

00001586 <StepOne>:

//###############################################################################
// Step One [ Create a System Password ]
//###############################################################################
static uint8 StepOne(void)
{
    1586:	cf 92       	push	r12
    1588:	df 92       	push	r13
    158a:	ef 92       	push	r14
    158c:	ff 92       	push	r15
    158e:	0f 93       	push	r16
    1590:	1f 93       	push	r17
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
    159a:	2b 97       	sbiw	r28, 0x0b	; 11
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	f8 94       	cli
    15a0:	de bf       	out	0x3e, r29	; 62
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	cd bf       	out	0x3d, r28	; 61
	volatile uint8 R_password[NO_PASSWORD];                           //Recieved First Entered Password From User (array from 5 numbers)
	volatile uint8 R_password2[NO_PASSWORD];                          //Recieved Re[Second] Entered Password From user for Confirmation
	volatile uint8 state;                                             //State of Equality of two passwords (1-> EQUAL , 0 -> NOTEUQAL)

// RECIEVING FIRST PASSWORD THROUGH UART
	for(k=0;k<NO_PASSWORD;k++)
    15a6:	10 92 86 01 	sts	0x0186, r1
    15aa:	00 e0       	ldi	r16, 0x00	; 0
    15ac:	92 e0       	ldi	r25, 0x02	; 2
    15ae:	e9 2e       	mov	r14, r25
    15b0:	f1 2c       	mov	r15, r1
    15b2:	ec 0e       	add	r14, r28
    15b4:	fd 1e       	adc	r15, r29
	{
		R_password[k]=UART_R();
    15b6:	10 e0       	ldi	r17, 0x00	; 0
    15b8:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <UART_R>
    15bc:	0e 0d       	add	r16, r14
    15be:	1f 1d       	adc	r17, r15
    15c0:	f8 01       	movw	r30, r16
    15c2:	80 83       	st	Z, r24
	volatile uint8 R_password[NO_PASSWORD];                           //Recieved First Entered Password From User (array from 5 numbers)
	volatile uint8 R_password2[NO_PASSWORD];                          //Recieved Re[Second] Entered Password From user for Confirmation
	volatile uint8 state;                                             //State of Equality of two passwords (1-> EQUAL , 0 -> NOTEUQAL)

// RECIEVING FIRST PASSWORD THROUGH UART
	for(k=0;k<NO_PASSWORD;k++)
    15c4:	00 91 86 01 	lds	r16, 0x0186
    15c8:	0f 5f       	subi	r16, 0xFF	; 255
    15ca:	00 93 86 01 	sts	0x0186, r16
    15ce:	05 30       	cpi	r16, 0x05	; 5
    15d0:	90 f3       	brcs	.-28     	; 0x15b6 <StepOne+0x30>
	{
		R_password[k]=UART_R();
	}
// RECIEVING SECOND PASSWORD THROUGH UART
	for(k=0;k<NO_PASSWORD;k++)
    15d2:	10 92 86 01 	sts	0x0186, r1
    15d6:	00 e0       	ldi	r16, 0x00	; 0
    15d8:	87 e0       	ldi	r24, 0x07	; 7
    15da:	c8 2e       	mov	r12, r24
    15dc:	d1 2c       	mov	r13, r1
    15de:	cc 0e       	add	r12, r28
    15e0:	dd 1e       	adc	r13, r29
	{
		R_password2[k]=UART_R();
    15e2:	10 e0       	ldi	r17, 0x00	; 0
    15e4:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <UART_R>
    15e8:	0c 0d       	add	r16, r12
    15ea:	1d 1d       	adc	r17, r13
    15ec:	f8 01       	movw	r30, r16
    15ee:	80 83       	st	Z, r24
	for(k=0;k<NO_PASSWORD;k++)
	{
		R_password[k]=UART_R();
	}
// RECIEVING SECOND PASSWORD THROUGH UART
	for(k=0;k<NO_PASSWORD;k++)
    15f0:	00 91 86 01 	lds	r16, 0x0186
    15f4:	0f 5f       	subi	r16, 0xFF	; 255
    15f6:	00 93 86 01 	sts	0x0186, r16
    15fa:	05 30       	cpi	r16, 0x05	; 5
    15fc:	90 f3       	brcs	.-28     	; 0x15e2 <StepOne+0x5c>
	{
		R_password2[k]=UART_R();
	}
//COMPARING TWO PASSWORDS AND CHECK EQUALITY
	for(k=0;k<NO_PASSWORD;k++)
    15fe:	10 92 86 01 	sts	0x0186, r1
    1602:	40 e0       	ldi	r20, 0x00	; 0
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e0       	ldi	r19, 0x00	; 0
	{
		if(R_password[k]!=R_password2[k])
    1608:	f7 01       	movw	r30, r14
    160a:	e2 0f       	add	r30, r18
    160c:	f3 1f       	adc	r31, r19
    160e:	90 81       	ld	r25, Z
    1610:	f6 01       	movw	r30, r12
    1612:	e2 0f       	add	r30, r18
    1614:	f3 1f       	adc	r31, r19
    1616:	80 81       	ld	r24, Z
    1618:	98 17       	cp	r25, r24
    161a:	a1 f5       	brne	.+104    	; 0x1684 <StepOne+0xfe>
		{
			state=NOTEQUAL;
			UART_T(state);
			return state;
    161c:	42 2f       	mov	r20, r18
    161e:	4f 5f       	subi	r20, 0xFF	; 255
    1620:	2f 5f       	subi	r18, 0xFF	; 255
    1622:	3f 4f       	sbci	r19, 0xFF	; 255
	for(k=0;k<NO_PASSWORD;k++)
	{
		R_password2[k]=UART_R();
	}
//COMPARING TWO PASSWORDS AND CHECK EQUALITY
	for(k=0;k<NO_PASSWORD;k++)
    1624:	25 30       	cpi	r18, 0x05	; 5
    1626:	31 05       	cpc	r19, r1
    1628:	79 f7       	brne	.-34     	; 0x1608 <StepOne+0x82>
			state=NOTEQUAL;
			UART_T(state);
			return state;
		}
	}
	for(k=0;k<NO_PASSWORD;k++)
    162a:	10 92 86 01 	sts	0x0186, r1
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	00 e4       	ldi	r16, 0x40	; 64
    1632:	1c e9       	ldi	r17, 0x9C	; 156
		{
			EEPROM_writeByte((EEPROM_ADDRESS)+k,R_password[k]);
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	f7 01       	movw	r30, r14
    1638:	e8 0f       	add	r30, r24
    163a:	f9 1f       	adc	r31, r25
    163c:	60 81       	ld	r22, Z
    163e:	8f 5e       	subi	r24, 0xEF	; 239
    1640:	9c 4f       	sbci	r25, 0xFC	; 252
    1642:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <EEPROM_writeByte>
    1646:	c8 01       	movw	r24, r16
    1648:	01 97       	sbiw	r24, 0x01	; 1
    164a:	f1 f7       	brne	.-4      	; 0x1648 <StepOne+0xc2>
			state=NOTEQUAL;
			UART_T(state);
			return state;
		}
	}
	for(k=0;k<NO_PASSWORD;k++)
    164c:	80 91 86 01 	lds	r24, 0x0186
    1650:	8f 5f       	subi	r24, 0xFF	; 255
    1652:	80 93 86 01 	sts	0x0186, r24
    1656:	85 30       	cpi	r24, 0x05	; 5
    1658:	68 f3       	brcs	.-38     	; 0x1634 <StepOne+0xae>
		{
			EEPROM_writeByte((EEPROM_ADDRESS)+k,R_password[k]);
			_delay_ms(20);
		}
	state= EQUAL;
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	89 83       	std	Y+1, r24	; 0x01
	UART_T(state);
    165e:	89 81       	ldd	r24, Y+1	; 0x01
    1660:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <UART_T>
	return state;
    1664:	89 81       	ldd	r24, Y+1	; 0x01
}
    1666:	2b 96       	adiw	r28, 0x0b	; 11
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	f8 94       	cli
    166c:	de bf       	out	0x3e, r29	; 62
    166e:	0f be       	out	0x3f, r0	; 63
    1670:	cd bf       	out	0x3d, r28	; 61
    1672:	cf 91       	pop	r28
    1674:	df 91       	pop	r29
    1676:	1f 91       	pop	r17
    1678:	0f 91       	pop	r16
    167a:	ff 90       	pop	r15
    167c:	ef 90       	pop	r14
    167e:	df 90       	pop	r13
    1680:	cf 90       	pop	r12
    1682:	08 95       	ret
		R_password2[k]=UART_R();
	}
//COMPARING TWO PASSWORDS AND CHECK EQUALITY
	for(k=0;k<NO_PASSWORD;k++)
	{
		if(R_password[k]!=R_password2[k])
    1684:	40 93 86 01 	sts	0x0186, r20
		{
			state=NOTEQUAL;
    1688:	19 82       	std	Y+1, r1	; 0x01
			UART_T(state);
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <UART_T>
			return state;
    1690:	89 81       	ldd	r24, Y+1	; 0x01
    1692:	e9 cf       	rjmp	.-46     	; 0x1666 <StepOne+0xe0>

00001694 <ErrorMessage>:
	tickk=0;


}
void ErrorMessage(const Timer1_ConfigType *  ptr1)
{
    1694:	cf 93       	push	r28
    1696:	df 93       	push	r29
    1698:	ec 01       	movw	r28, r24

	while(UART_R()!=START);
    169a:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <UART_R>
    169e:	88 30       	cpi	r24, 0x08	; 8
    16a0:	e1 f7       	brne	.-8      	; 0x169a <ErrorMessage+0x6>
	TIMER1_INIT(ptr1);
    16a2:	ce 01       	movw	r24, r28
    16a4:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <TIMER1_INIT>

	BUZZER_ON();
    16a8:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <BUZZER_ON>
	while(tickk<=60){		LCD_moveCursor(0,0);		LCD_INT(tickk); LCD_STR("  ");}
    16ac:	80 91 7e 01 	lds	r24, 0x017E
    16b0:	90 91 7f 01 	lds	r25, 0x017F
    16b4:	a0 91 80 01 	lds	r26, 0x0180
    16b8:	b0 91 81 01 	lds	r27, 0x0181
    16bc:	cd 97       	sbiw	r24, 0x3d	; 61
    16be:	a1 05       	cpc	r26, r1
    16c0:	b1 05       	cpc	r27, r1
    16c2:	d0 f4       	brcc	.+52     	; 0x16f8 <ErrorMessage+0x64>
    16c4:	80 e0       	ldi	r24, 0x00	; 0
    16c6:	60 e0       	ldi	r22, 0x00	; 0
    16c8:	0e 94 22 0a 	call	0x1444	; 0x1444 <LCD_moveCursor>
    16cc:	80 91 7e 01 	lds	r24, 0x017E
    16d0:	90 91 7f 01 	lds	r25, 0x017F
    16d4:	0e 94 61 09 	call	0x12c2	; 0x12c2 <LCD_INT>
    16d8:	80 e6       	ldi	r24, 0x60	; 96
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	0e 94 52 09 	call	0x12a4	; 0x12a4 <LCD_STR>
    16e0:	80 91 7e 01 	lds	r24, 0x017E
    16e4:	90 91 7f 01 	lds	r25, 0x017F
    16e8:	a0 91 80 01 	lds	r26, 0x0180
    16ec:	b0 91 81 01 	lds	r27, 0x0181
    16f0:	cd 97       	sbiw	r24, 0x3d	; 61
    16f2:	a1 05       	cpc	r26, r1
    16f4:	b1 05       	cpc	r27, r1
    16f6:	30 f3       	brcs	.-52     	; 0x16c4 <ErrorMessage+0x30>
	LCD_CLEAR();
    16f8:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <LCD_CLEAR>

	//while(UART_R()!=START);

	BUZZER_OFF();
    16fc:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <BUZZER_OFF>
    TIMER1_DeINIT();
    1700:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <TIMER1_DeINIT>
	tickk=0;
    1704:	10 92 7e 01 	sts	0x017E, r1
    1708:	10 92 7f 01 	sts	0x017F, r1
    170c:	10 92 80 01 	sts	0x0180, r1
    1710:	10 92 81 01 	sts	0x0181, r1
	text=0;
    1714:	10 92 73 01 	sts	0x0173, r1
}
    1718:	df 91       	pop	r29
    171a:	cf 91       	pop	r28
    171c:	08 95       	ret

0000171e <StepThree>:
	return state;
}


static uint8 StepThree(void)
{
    171e:	ef 92       	push	r14
    1720:	ff 92       	push	r15
    1722:	0f 93       	push	r16
    1724:	1f 93       	push	r17
    1726:	df 93       	push	r29
    1728:	cf 93       	push	r28
    172a:	00 d0       	rcall	.+0      	; 0x172c <StepThree+0xe>
    172c:	00 d0       	rcall	.+0      	; 0x172e <StepThree+0x10>
    172e:	00 d0       	rcall	.+0      	; 0x1730 <StepThree+0x12>
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
	static uint8 counter=1;
	uint8 data=0;
    1734:	19 82       	std	Y+1, r1	; 0x01
	volatile  uint8 R_password[NO_PASSWORD];
	uint8 state=EQUAL;

	for(k=0;k<NO_PASSWORD;k++)
    1736:	10 92 86 01 	sts	0x0186, r1
    173a:	00 e0       	ldi	r16, 0x00	; 0
    173c:	22 e0       	ldi	r18, 0x02	; 2
    173e:	e2 2e       	mov	r14, r18
    1740:	f1 2c       	mov	r15, r1
    1742:	ec 0e       	add	r14, r28
    1744:	fd 1e       	adc	r15, r29
	{
		R_password[k]=UART_R();
    1746:	10 e0       	ldi	r17, 0x00	; 0
    1748:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <UART_R>
    174c:	0e 0d       	add	r16, r14
    174e:	1f 1d       	adc	r17, r15
    1750:	f8 01       	movw	r30, r16
    1752:	80 83       	st	Z, r24
	static uint8 counter=1;
	uint8 data=0;
	volatile  uint8 R_password[NO_PASSWORD];
	uint8 state=EQUAL;

	for(k=0;k<NO_PASSWORD;k++)
    1754:	00 91 86 01 	lds	r16, 0x0186
    1758:	0f 5f       	subi	r16, 0xFF	; 255
    175a:	00 93 86 01 	sts	0x0186, r16
    175e:	05 30       	cpi	r16, 0x05	; 5
    1760:	90 f3       	brcs	.-28     	; 0x1746 <StepThree+0x28>
	{
		R_password[k]=UART_R();
	}

	for(k=0;k<NO_PASSWORD;k++)
    1762:	10 92 86 01 	sts	0x0186, r1
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	8e 01       	movw	r16, r28
    176a:	0f 5f       	subi	r16, 0xFF	; 255
    176c:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		EEPROM_readByte(EEPROM_ADDRESS+k,&data);
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	8f 5e       	subi	r24, 0xEF	; 239
    1772:	9c 4f       	sbci	r25, 0xFC	; 252
    1774:	b8 01       	movw	r22, r16
    1776:	0e 94 9f 06 	call	0xd3e	; 0xd3e <EEPROM_readByte>
		if(R_password[k]!=data)
    177a:	20 91 86 01 	lds	r18, 0x0186
    177e:	f7 01       	movw	r30, r14
    1780:	e2 0f       	add	r30, r18
    1782:	f1 1d       	adc	r31, r1
    1784:	90 81       	ld	r25, Z
    1786:	89 81       	ldd	r24, Y+1	; 0x01
    1788:	98 17       	cp	r25, r24
    178a:	09 f0       	breq	.+2      	; 0x178e <StepThree+0x70>
    178c:	af c0       	rjmp	.+350    	; 0x18ec <StepThree+0x1ce>
	for(k=0;k<NO_PASSWORD;k++)
	{
		R_password[k]=UART_R();
	}

	for(k=0;k<NO_PASSWORD;k++)
    178e:	82 2f       	mov	r24, r18
    1790:	8f 5f       	subi	r24, 0xFF	; 255
    1792:	80 93 86 01 	sts	0x0186, r24
    1796:	85 30       	cpi	r24, 0x05	; 5
    1798:	50 f3       	brcs	.-44     	; 0x176e <StepThree+0x50>
		}
	}

	if (state==EQUAL)
	{
		UART_T(EQUAL);
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <UART_T>
		g_tick=0;

	}}
static void Door_LockUnclock(const Timer1_ConfigType *  ptr1)
{
	while(UART_R()!=START);
    17a0:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <UART_R>
    17a4:	88 30       	cpi	r24, 0x08	; 8
    17a6:	e1 f7       	brne	.-8      	; 0x17a0 <StepThree+0x82>
	TIMER1_INIT(ptr1);
    17a8:	8b e6       	ldi	r24, 0x6B	; 107
    17aa:	91 e0       	ldi	r25, 0x01	; 1
    17ac:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <TIMER1_INIT>
	DC_MOTOR(m_on_cw,50);
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	62 e3       	ldi	r22, 0x32	; 50
    17b4:	0e 94 6d 06 	call	0xcda	; 0xcda <DC_MOTOR>

	while(tickk<=15){		LCD_moveCursor(0,0);		LCD_INT(tickk); LCD_STR("  ");}
    17b8:	80 91 7e 01 	lds	r24, 0x017E
    17bc:	90 91 7f 01 	lds	r25, 0x017F
    17c0:	a0 91 80 01 	lds	r26, 0x0180
    17c4:	b0 91 81 01 	lds	r27, 0x0181
    17c8:	40 97       	sbiw	r24, 0x10	; 16
    17ca:	a1 05       	cpc	r26, r1
    17cc:	b1 05       	cpc	r27, r1
    17ce:	d0 f4       	brcc	.+52     	; 0x1804 <StepThree+0xe6>
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	60 e0       	ldi	r22, 0x00	; 0
    17d4:	0e 94 22 0a 	call	0x1444	; 0x1444 <LCD_moveCursor>
    17d8:	80 91 7e 01 	lds	r24, 0x017E
    17dc:	90 91 7f 01 	lds	r25, 0x017F
    17e0:	0e 94 61 09 	call	0x12c2	; 0x12c2 <LCD_INT>
    17e4:	80 e6       	ldi	r24, 0x60	; 96
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	0e 94 52 09 	call	0x12a4	; 0x12a4 <LCD_STR>
    17ec:	80 91 7e 01 	lds	r24, 0x017E
    17f0:	90 91 7f 01 	lds	r25, 0x017F
    17f4:	a0 91 80 01 	lds	r26, 0x0180
    17f8:	b0 91 81 01 	lds	r27, 0x0181
    17fc:	40 97       	sbiw	r24, 0x10	; 16
    17fe:	a1 05       	cpc	r26, r1
    1800:	b1 05       	cpc	r27, r1
    1802:	30 f3       	brcs	.-52     	; 0x17d0 <StepThree+0xb2>

	//while(UART_R()!=START);

	DC_MOTOR(m_off,0);
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	60 e0       	ldi	r22, 0x00	; 0
    1808:	0e 94 6d 06 	call	0xcda	; 0xcda <DC_MOTOR>

	while(tickk<=18){		LCD_moveCursor(0,0);		LCD_INT(tickk); LCD_STR("  ");}
    180c:	80 91 7e 01 	lds	r24, 0x017E
    1810:	90 91 7f 01 	lds	r25, 0x017F
    1814:	a0 91 80 01 	lds	r26, 0x0180
    1818:	b0 91 81 01 	lds	r27, 0x0181
    181c:	43 97       	sbiw	r24, 0x13	; 19
    181e:	a1 05       	cpc	r26, r1
    1820:	b1 05       	cpc	r27, r1
    1822:	d0 f4       	brcc	.+52     	; 0x1858 <StepThree+0x13a>
    1824:	80 e0       	ldi	r24, 0x00	; 0
    1826:	60 e0       	ldi	r22, 0x00	; 0
    1828:	0e 94 22 0a 	call	0x1444	; 0x1444 <LCD_moveCursor>
    182c:	80 91 7e 01 	lds	r24, 0x017E
    1830:	90 91 7f 01 	lds	r25, 0x017F
    1834:	0e 94 61 09 	call	0x12c2	; 0x12c2 <LCD_INT>
    1838:	80 e6       	ldi	r24, 0x60	; 96
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	0e 94 52 09 	call	0x12a4	; 0x12a4 <LCD_STR>
    1840:	80 91 7e 01 	lds	r24, 0x017E
    1844:	90 91 7f 01 	lds	r25, 0x017F
    1848:	a0 91 80 01 	lds	r26, 0x0180
    184c:	b0 91 81 01 	lds	r27, 0x0181
    1850:	43 97       	sbiw	r24, 0x13	; 19
    1852:	a1 05       	cpc	r26, r1
    1854:	b1 05       	cpc	r27, r1
    1856:	30 f3       	brcs	.-52     	; 0x1824 <StepThree+0x106>
	//while(UART_R()!=START);

	DC_MOTOR(m_on_acw,50);
    1858:	82 e0       	ldi	r24, 0x02	; 2
    185a:	62 e3       	ldi	r22, 0x32	; 50
    185c:	0e 94 6d 06 	call	0xcda	; 0xcda <DC_MOTOR>
	//while(UART_R()!=START);

	while(tickk<=33){		LCD_moveCursor(0,0);		LCD_INT(tickk); LCD_STR("  ");}
    1860:	80 91 7e 01 	lds	r24, 0x017E
    1864:	90 91 7f 01 	lds	r25, 0x017F
    1868:	a0 91 80 01 	lds	r26, 0x0180
    186c:	b0 91 81 01 	lds	r27, 0x0181
    1870:	82 97       	sbiw	r24, 0x22	; 34
    1872:	a1 05       	cpc	r26, r1
    1874:	b1 05       	cpc	r27, r1
    1876:	d0 f4       	brcc	.+52     	; 0x18ac <StepThree+0x18e>
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	60 e0       	ldi	r22, 0x00	; 0
    187c:	0e 94 22 0a 	call	0x1444	; 0x1444 <LCD_moveCursor>
    1880:	80 91 7e 01 	lds	r24, 0x017E
    1884:	90 91 7f 01 	lds	r25, 0x017F
    1888:	0e 94 61 09 	call	0x12c2	; 0x12c2 <LCD_INT>
    188c:	80 e6       	ldi	r24, 0x60	; 96
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	0e 94 52 09 	call	0x12a4	; 0x12a4 <LCD_STR>
    1894:	80 91 7e 01 	lds	r24, 0x017E
    1898:	90 91 7f 01 	lds	r25, 0x017F
    189c:	a0 91 80 01 	lds	r26, 0x0180
    18a0:	b0 91 81 01 	lds	r27, 0x0181
    18a4:	82 97       	sbiw	r24, 0x22	; 34
    18a6:	a1 05       	cpc	r26, r1
    18a8:	b1 05       	cpc	r27, r1
    18aa:	30 f3       	brcs	.-52     	; 0x1878 <StepThree+0x15a>

	DC_MOTOR(m_off,0);
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	60 e0       	ldi	r22, 0x00	; 0
    18b0:	0e 94 6d 06 	call	0xcda	; 0xcda <DC_MOTOR>
	LCD_CLEAR();
    18b4:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <LCD_CLEAR>
	TIMER1_DeINIT();
    18b8:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <TIMER1_DeINIT>
	tickk=0;
    18bc:	10 92 7e 01 	sts	0x017E, r1
    18c0:	10 92 7f 01 	sts	0x017F, r1
    18c4:	10 92 80 01 	sts	0x0180, r1
    18c8:	10 92 81 01 	sts	0x0181, r1

	if (state==EQUAL)
	{
		UART_T(EQUAL);
		Door_LockUnclock(&TIM2);
		counter=1;
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	80 93 71 01 	sts	0x0171, r24
			counter++;
			return NOTEQUAL;

		}
	}
}
    18d2:	26 96       	adiw	r28, 0x06	; 6
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	f8 94       	cli
    18d8:	de bf       	out	0x3e, r29	; 62
    18da:	0f be       	out	0x3f, r0	; 63
    18dc:	cd bf       	out	0x3d, r28	; 61
    18de:	cf 91       	pop	r28
    18e0:	df 91       	pop	r29
    18e2:	1f 91       	pop	r17
    18e4:	0f 91       	pop	r16
    18e6:	ff 90       	pop	r15
    18e8:	ef 90       	pop	r14
    18ea:	08 95       	ret
		return state;

	}
	else
	{
		UART_T(NOTEQUAL);
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <UART_T>
		if (counter ==MAX_WRONG_PASS)
    18f2:	80 91 71 01 	lds	r24, 0x0171
    18f6:	83 30       	cpi	r24, 0x03	; 3
    18f8:	59 f0       	breq	.+22     	; 0x1910 <StepThree+0x1f2>

			return ERROR_PASS;
		}
		else
		{
			while(UART_R()!=START);
    18fa:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <UART_R>
    18fe:	88 30       	cpi	r24, 0x08	; 8
    1900:	e1 f7       	brne	.-8      	; 0x18fa <StepThree+0x1dc>
			counter++;
    1902:	80 91 71 01 	lds	r24, 0x0171
    1906:	8f 5f       	subi	r24, 0xFF	; 255
    1908:	80 93 71 01 	sts	0x0171, r24
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	e1 cf       	rjmp	.-62     	; 0x18d2 <StepThree+0x1b4>
	else
	{
		UART_T(NOTEQUAL);
		if (counter ==MAX_WRONG_PASS)
		{
			ErrorMessage(&TIM2);
    1910:	8b e6       	ldi	r24, 0x6B	; 107
    1912:	91 e0       	ldi	r25, 0x01	; 1
    1914:	0e 94 4a 0b 	call	0x1694	; 0x1694 <ErrorMessage>
			counter=1;
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	80 93 71 01 	sts	0x0171, r24
    191e:	82 e0       	ldi	r24, 0x02	; 2
    1920:	d8 cf       	rjmp	.-80     	; 0x18d2 <StepThree+0x1b4>

00001922 <StepFour>:
		}
	}
}

static uint8 StepFour(void)
{
    1922:	ef 92       	push	r14
    1924:	ff 92       	push	r15
    1926:	0f 93       	push	r16
    1928:	1f 93       	push	r17
    192a:	df 93       	push	r29
    192c:	cf 93       	push	r28
    192e:	00 d0       	rcall	.+0      	; 0x1930 <StepFour+0xe>
    1930:	00 d0       	rcall	.+0      	; 0x1932 <StepFour+0x10>
    1932:	00 d0       	rcall	.+0      	; 0x1934 <StepFour+0x12>
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
	static uint8 counter=1;
	uint8 data=0;
    1938:	19 82       	std	Y+1, r1	; 0x01
	volatile  uint8 R_password[NO_PASSWORD];
	uint8 state=EQUAL;

	for(k=0;k<NO_PASSWORD;k++)
    193a:	10 92 86 01 	sts	0x0186, r1
    193e:	00 e0       	ldi	r16, 0x00	; 0
    1940:	32 e0       	ldi	r19, 0x02	; 2
    1942:	e3 2e       	mov	r14, r19
    1944:	f1 2c       	mov	r15, r1
    1946:	ec 0e       	add	r14, r28
    1948:	fd 1e       	adc	r15, r29
	{
		R_password[k]=UART_R();
    194a:	10 e0       	ldi	r17, 0x00	; 0
    194c:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <UART_R>
    1950:	0e 0d       	add	r16, r14
    1952:	1f 1d       	adc	r17, r15
    1954:	f8 01       	movw	r30, r16
    1956:	80 83       	st	Z, r24
	static uint8 counter=1;
	uint8 data=0;
	volatile  uint8 R_password[NO_PASSWORD];
	uint8 state=EQUAL;

	for(k=0;k<NO_PASSWORD;k++)
    1958:	00 91 86 01 	lds	r16, 0x0186
    195c:	0f 5f       	subi	r16, 0xFF	; 255
    195e:	00 93 86 01 	sts	0x0186, r16
    1962:	05 30       	cpi	r16, 0x05	; 5
    1964:	90 f3       	brcs	.-28     	; 0x194a <StepFour+0x28>
	{
		R_password[k]=UART_R();
	}

	for(k=0;k<NO_PASSWORD;k++)
    1966:	10 92 86 01 	sts	0x0186, r1
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	8e 01       	movw	r16, r28
    196e:	0f 5f       	subi	r16, 0xFF	; 255
    1970:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		EEPROM_readByte(EEPROM_ADDRESS+k,&data);
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	8f 5e       	subi	r24, 0xEF	; 239
    1976:	9c 4f       	sbci	r25, 0xFC	; 252
    1978:	b8 01       	movw	r22, r16
    197a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <EEPROM_readByte>
		if(R_password[k]!=data)
    197e:	20 91 86 01 	lds	r18, 0x0186
    1982:	f7 01       	movw	r30, r14
    1984:	e2 0f       	add	r30, r18
    1986:	f1 1d       	adc	r31, r1
    1988:	90 81       	ld	r25, Z
    198a:	89 81       	ldd	r24, Y+1	; 0x01
    198c:	98 17       	cp	r25, r24
    198e:	c9 f4       	brne	.+50     	; 0x19c2 <StepFour+0xa0>
	for(k=0;k<NO_PASSWORD;k++)
	{
		R_password[k]=UART_R();
	}

	for(k=0;k<NO_PASSWORD;k++)
    1990:	82 2f       	mov	r24, r18
    1992:	8f 5f       	subi	r24, 0xFF	; 255
    1994:	80 93 86 01 	sts	0x0186, r24
    1998:	85 30       	cpi	r24, 0x05	; 5
    199a:	58 f3       	brcs	.-42     	; 0x1972 <StepFour+0x50>
	}


	if (state==EQUAL)
	{
		UART_T(EQUAL);
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <UART_T>
		counter=1;
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	80 93 72 01 	sts	0x0172, r24
			counter++;
			return NOTEQUAL;
		}
	}

}
    19a8:	26 96       	adiw	r28, 0x06	; 6
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	f8 94       	cli
    19ae:	de bf       	out	0x3e, r29	; 62
    19b0:	0f be       	out	0x3f, r0	; 63
    19b2:	cd bf       	out	0x3d, r28	; 61
    19b4:	cf 91       	pop	r28
    19b6:	df 91       	pop	r29
    19b8:	1f 91       	pop	r17
    19ba:	0f 91       	pop	r16
    19bc:	ff 90       	pop	r15
    19be:	ef 90       	pop	r14
    19c0:	08 95       	ret
		return state;

	}
	else
	{
		UART_T(NOTEQUAL);
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <UART_T>
		if (counter ==MAX_WRONG_PASS)
    19c8:	80 91 72 01 	lds	r24, 0x0172
    19cc:	83 30       	cpi	r24, 0x03	; 3
    19ce:	59 f0       	breq	.+22     	; 0x19e6 <StepFour+0xc4>

			return ERROR_PASS;
		}
		else
		{
			while(UART_R()!=START);
    19d0:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <UART_R>
    19d4:	88 30       	cpi	r24, 0x08	; 8
    19d6:	e1 f7       	brne	.-8      	; 0x19d0 <StepFour+0xae>
			counter++;
    19d8:	80 91 72 01 	lds	r24, 0x0172
    19dc:	8f 5f       	subi	r24, 0xFF	; 255
    19de:	80 93 72 01 	sts	0x0172, r24
    19e2:	80 e0       	ldi	r24, 0x00	; 0
    19e4:	e1 cf       	rjmp	.-62     	; 0x19a8 <StepFour+0x86>
	else
	{
		UART_T(NOTEQUAL);
		if (counter ==MAX_WRONG_PASS)
		{
			ErrorMessage(&TIM2);
    19e6:	8b e6       	ldi	r24, 0x6B	; 107
    19e8:	91 e0       	ldi	r25, 0x01	; 1
    19ea:	0e 94 4a 0b 	call	0x1694	; 0x1694 <ErrorMessage>
			counter=1;
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	80 93 72 01 	sts	0x0172, r24
    19f4:	82 e0       	ldi	r24, 0x02	; 2
    19f6:	d8 cf       	rjmp	.-80     	; 0x19a8 <StepFour+0x86>

000019f8 <main>:
}
//###########################################################################################################################
//######################################## MAIN PROGRAM #####################################################################
//###########################################################################################################################
int main()
{
    19f8:	0f 93       	push	r16
    19fa:	1f 93       	push	r17
    19fc:	df 93       	push	r29
    19fe:	cf 93       	push	r28
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
    1a04:	2b 97       	sbiw	r28, 0x0b	; 11
    1a06:	0f b6       	in	r0, 0x3f	; 63
    1a08:	f8 94       	cli
    1a0a:	de bf       	out	0x3e, r29	; 62
    1a0c:	0f be       	out	0x3f, r0	; 63
    1a0e:	cd bf       	out	0x3d, r28	; 61
	LCD_INIT();
    1a10:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LCD_INIT>
	SREG |= (1<<7);
    1a14:	8f b7       	in	r24, 0x3f	; 63
    1a16:	80 68       	ori	r24, 0x80	; 128
    1a18:	8f bf       	out	0x3f, r24	; 63
	UART_ConfigType UART1_S = {data_8,even,one_bit,Baud};
    1a1a:	8e 01       	movw	r16, r28
    1a1c:	0b 5f       	subi	r16, 0xFB	; 251
    1a1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a20:	d8 01       	movw	r26, r16
    1a22:	e4 e7       	ldi	r30, 0x74	; 116
    1a24:	f1 e0       	ldi	r31, 0x01	; 1
    1a26:	87 e0       	ldi	r24, 0x07	; 7
    1a28:	01 90       	ld	r0, Z+
    1a2a:	0d 92       	st	X+, r0
    1a2c:	81 50       	subi	r24, 0x01	; 1
    1a2e:	e1 f7       	brne	.-8      	; 0x1a28 <main+0x30>
	Timer1_setCallBack(CallBackTimer);
    1a30:	8f e8       	ldi	r24, 0x8F	; 143
    1a32:	9a e0       	ldi	r25, 0x0A	; 10
    1a34:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <Timer1_setCallBack>
	//I2C_INIT(&I2C_C);
//############### LOCAL VARIABLES ##########################################################################
	uint8 start=1;
	volatile uint8 state;                      //RESPONSE FROM EACH STEP
//############# INIT OF EACH PERIPHRAL ###################################################################
	UART_INIT(&UART1_S);
    1a38:	c8 01       	movw	r24, r16
    1a3a:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <UART_INIT>
	TWI_init();
    1a3e:	0e 94 8b 08 	call	0x1116	; 0x1116 <TWI_init>
	DC_MOTOR_INIT();
    1a42:	0e 94 34 06 	call	0xc68	; 0xc68 <DC_MOTOR_INIT>
	BUZZER_INIT(PA,P0);
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	60 e0       	ldi	r22, 0x00	; 0
    1a4a:	0e 94 00 06 	call	0xc00	; 0xc00 <BUZZER_INIT>
	volatile uint8 Step;                     //Step Three /Four
	volatile uint8 St1;                      //Step One
//STEP_ONE  ##################################################################################################
	if(Start==FIRST_TIME_START)
	{
		St1=StepOne();
    1a4e:	0e 94 c3 0a 	call	0x1586	; 0x1586 <StepOne>
    1a52:	8c 83       	std	Y+4, r24	; 0x04
		while (St1==NOTEQUAL){St1=StepOne();}
    1a54:	8c 81       	ldd	r24, Y+4	; 0x04
    1a56:	88 23       	and	r24, r24
    1a58:	d1 f3       	breq	.-12     	; 0x1a4e <main+0x56>
	}
//WAITING RESPONSE FROM MC1 TO SELECT THE NEXT STEP ( STEP THREE OR STEP FOUR )
	state=UART_R();
    1a5a:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <UART_R>
    1a5e:	8a 83       	std	Y+2, r24	; 0x02
//#####################################################################################################
	while (state==FAULT_RESPONSE){state=UART_R();}
    1a60:	8a 81       	ldd	r24, Y+2	; 0x02
    1a62:	88 23       	and	r24, r24
    1a64:	d1 f3       	breq	.-12     	; 0x1a5a <main+0x62>
//STEP_THREE  ##################################################################################################
	if(state==STEP_THREE)
    1a66:	8a 81       	ldd	r24, Y+2	; 0x02
    1a68:	83 30       	cpi	r24, 0x03	; 3
    1a6a:	79 f0       	breq	.+30     	; 0x1a8a <main+0x92>
		while(Step==NOTEQUAL){Step=StepThree();}


	}
//STEP_FOUR   ##################################################################################################
	else if (state==STEP_FOUR)
    1a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6e:	84 30       	cpi	r24, 0x04	; 4
    1a70:	c9 f0       	breq	.+50     	; 0x1aa4 <main+0xac>
		Step= StepFour();
		while(Step==NOTEQUAL){Step=StepFour();}

	}

	return Step;
    1a72:	8b 81       	ldd	r24, Y+3	; 0x03
	BUZZER_INIT(PA,P0);

//############# MAIN LOOP ####################################################################################
	while(1)
	{
		state=Tasks(start);
    1a74:	89 83       	std	Y+1, r24	; 0x01
		if(state==1){start=1;}
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
    1a78:	81 30       	cpi	r24, 0x01	; 1
    1a7a:	49 f3       	breq	.-46     	; 0x1a4e <main+0x56>
	{
		St1=StepOne();
		while (St1==NOTEQUAL){St1=StepOne();}
	}
//WAITING RESPONSE FROM MC1 TO SELECT THE NEXT STEP ( STEP THREE OR STEP FOUR )
	state=UART_R();
    1a7c:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <UART_R>
    1a80:	8a 83       	std	Y+2, r24	; 0x02
//#####################################################################################################
	while (state==FAULT_RESPONSE){state=UART_R();}
    1a82:	8a 81       	ldd	r24, Y+2	; 0x02
    1a84:	88 23       	and	r24, r24
    1a86:	49 f3       	breq	.-46     	; 0x1a5a <main+0x62>
    1a88:	ee cf       	rjmp	.-36     	; 0x1a66 <main+0x6e>
//STEP_THREE  ##################################################################################################
	if(state==STEP_THREE)
	{
		Step= StepThree();
    1a8a:	0e 94 8f 0b 	call	0x171e	; 0x171e <StepThree>
    1a8e:	8b 83       	std	Y+3, r24	; 0x03
		while(Step==NOTEQUAL){Step=StepThree();}
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	88 23       	and	r24, r24
    1a94:	71 f7       	brne	.-36     	; 0x1a72 <main+0x7a>
//#####################################################################################################
	while (state==FAULT_RESPONSE){state=UART_R();}
//STEP_THREE  ##################################################################################################
	if(state==STEP_THREE)
	{
		Step= StepThree();
    1a96:	0e 94 8f 0b 	call	0x171e	; 0x171e <StepThree>
    1a9a:	8b 83       	std	Y+3, r24	; 0x03
		while(Step==NOTEQUAL){Step=StepThree();}
    1a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9e:	88 23       	and	r24, r24
    1aa0:	a1 f3       	breq	.-24     	; 0x1a8a <main+0x92>
    1aa2:	e7 cf       	rjmp	.-50     	; 0x1a72 <main+0x7a>

	}
//STEP_FOUR   ##################################################################################################
	else if (state==STEP_FOUR)
	{
		Step= StepFour();
    1aa4:	0e 94 91 0c 	call	0x1922	; 0x1922 <StepFour>
    1aa8:	8b 83       	std	Y+3, r24	; 0x03
		while(Step==NOTEQUAL){Step=StepFour();}
    1aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1aac:	88 23       	and	r24, r24
    1aae:	09 f7       	brne	.-62     	; 0x1a72 <main+0x7a>

	}
//STEP_FOUR   ##################################################################################################
	else if (state==STEP_FOUR)
	{
		Step= StepFour();
    1ab0:	0e 94 91 0c 	call	0x1922	; 0x1922 <StepFour>
    1ab4:	8b 83       	std	Y+3, r24	; 0x03
		while(Step==NOTEQUAL){Step=StepFour();}
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	88 23       	and	r24, r24
    1aba:	a1 f3       	breq	.-24     	; 0x1aa4 <main+0xac>
    1abc:	da cf       	rjmp	.-76     	; 0x1a72 <main+0x7a>

00001abe <__vector_9>:
#include<avr/io.h>
#include<avr/interrupt.h>
static    void (*g_callBackPtr)(void) = NULL_PTR;    //Pointer to [ void function (void) ]
//################ INTERRUPTS SERVICES #######################################
ISR(TIMER1_OVF_vect)
{
    1abe:	1f 92       	push	r1
    1ac0:	0f 92       	push	r0
    1ac2:	0f b6       	in	r0, 0x3f	; 63
    1ac4:	0f 92       	push	r0
    1ac6:	11 24       	eor	r1, r1
    1ac8:	2f 93       	push	r18
    1aca:	3f 93       	push	r19
    1acc:	4f 93       	push	r20
    1ace:	5f 93       	push	r21
    1ad0:	6f 93       	push	r22
    1ad2:	7f 93       	push	r23
    1ad4:	8f 93       	push	r24
    1ad6:	9f 93       	push	r25
    1ad8:	af 93       	push	r26
    1ada:	bf 93       	push	r27
    1adc:	ef 93       	push	r30
    1ade:	ff 93       	push	r31
	if(g_callBackPtr != NULL_PTR)
    1ae0:	e0 91 87 01 	lds	r30, 0x0187
    1ae4:	f0 91 88 01 	lds	r31, 0x0188
    1ae8:	30 97       	sbiw	r30, 0x00	; 0
    1aea:	09 f0       	breq	.+2      	; 0x1aee <__vector_9+0x30>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1aec:	09 95       	icall
	}
}
    1aee:	ff 91       	pop	r31
    1af0:	ef 91       	pop	r30
    1af2:	bf 91       	pop	r27
    1af4:	af 91       	pop	r26
    1af6:	9f 91       	pop	r25
    1af8:	8f 91       	pop	r24
    1afa:	7f 91       	pop	r23
    1afc:	6f 91       	pop	r22
    1afe:	5f 91       	pop	r21
    1b00:	4f 91       	pop	r20
    1b02:	3f 91       	pop	r19
    1b04:	2f 91       	pop	r18
    1b06:	0f 90       	pop	r0
    1b08:	0f be       	out	0x3f, r0	; 63
    1b0a:	0f 90       	pop	r0
    1b0c:	1f 90       	pop	r1
    1b0e:	18 95       	reti

00001b10 <__vector_7>:
ISR(TIMER1_COMPA_vect)
{
    1b10:	1f 92       	push	r1
    1b12:	0f 92       	push	r0
    1b14:	0f b6       	in	r0, 0x3f	; 63
    1b16:	0f 92       	push	r0
    1b18:	11 24       	eor	r1, r1
    1b1a:	2f 93       	push	r18
    1b1c:	3f 93       	push	r19
    1b1e:	4f 93       	push	r20
    1b20:	5f 93       	push	r21
    1b22:	6f 93       	push	r22
    1b24:	7f 93       	push	r23
    1b26:	8f 93       	push	r24
    1b28:	9f 93       	push	r25
    1b2a:	af 93       	push	r26
    1b2c:	bf 93       	push	r27
    1b2e:	ef 93       	push	r30
    1b30:	ff 93       	push	r31
	if(g_callBackPtr != NULL_PTR)
    1b32:	e0 91 87 01 	lds	r30, 0x0187
    1b36:	f0 91 88 01 	lds	r31, 0x0188
    1b3a:	30 97       	sbiw	r30, 0x00	; 0
    1b3c:	09 f0       	breq	.+2      	; 0x1b40 <__vector_7+0x30>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1b3e:	09 95       	icall
	}

}
    1b40:	ff 91       	pop	r31
    1b42:	ef 91       	pop	r30
    1b44:	bf 91       	pop	r27
    1b46:	af 91       	pop	r26
    1b48:	9f 91       	pop	r25
    1b4a:	8f 91       	pop	r24
    1b4c:	7f 91       	pop	r23
    1b4e:	6f 91       	pop	r22
    1b50:	5f 91       	pop	r21
    1b52:	4f 91       	pop	r20
    1b54:	3f 91       	pop	r19
    1b56:	2f 91       	pop	r18
    1b58:	0f 90       	pop	r0
    1b5a:	0f be       	out	0x3f, r0	; 63
    1b5c:	0f 90       	pop	r0
    1b5e:	1f 90       	pop	r1
    1b60:	18 95       	reti

00001b62 <TIMER1_INIT>:
//################  START TIMER1 ####################################################
void TIMER1_INIT(const Timer1_ConfigType * Config_Ptr)
{
    1b62:	fc 01       	movw	r30, r24
	TCCR1A = (1<<FOC1A);
	TCCR1A=(TCCR1A&0xFC)|(Config_Ptr->mode &0x03);
	TCCR1B=(TCCR1B&0xE7)|(Config_Ptr->mode &0x18);
	TCCR1B=(TCCR1B&0xF8)|(Config_Ptr->prescaler &0x07);*/

	TCCR1A=(1<<FOC1A)|(GET_BIT(Config_Ptr->mode,0)<<WGM10)|(GET_BIT(Config_Ptr->mode,1)<<WGM11);
    1b64:	45 81       	ldd	r20, Z+5	; 0x05
    1b66:	84 2f       	mov	r24, r20
    1b68:	83 70       	andi	r24, 0x03	; 3
    1b6a:	88 60       	ori	r24, 0x08	; 8
    1b6c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B=(GET_BIT(Config_Ptr->mode,2)<<WGM12)|(GET_BIT(Config_Ptr->mode,3)<<WGM13)|(Config_Ptr->prescaler);
    1b6e:	84 2f       	mov	r24, r20
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	9c 01       	movw	r18, r24
    1b74:	24 70       	andi	r18, 0x04	; 4
    1b76:	30 70       	andi	r19, 0x00	; 0
    1b78:	35 95       	asr	r19
    1b7a:	27 95       	ror	r18
    1b7c:	35 95       	asr	r19
    1b7e:	27 95       	ror	r18
    1b80:	22 0f       	add	r18, r18
    1b82:	33 1f       	adc	r19, r19
    1b84:	22 0f       	add	r18, r18
    1b86:	33 1f       	adc	r19, r19
    1b88:	22 0f       	add	r18, r18
    1b8a:	33 1f       	adc	r19, r19
    1b8c:	88 70       	andi	r24, 0x08	; 8
    1b8e:	90 70       	andi	r25, 0x00	; 0
    1b90:	95 95       	asr	r25
    1b92:	87 95       	ror	r24
    1b94:	95 95       	asr	r25
    1b96:	87 95       	ror	r24
    1b98:	95 95       	asr	r25
    1b9a:	87 95       	ror	r24
    1b9c:	82 95       	swap	r24
    1b9e:	92 95       	swap	r25
    1ba0:	90 7f       	andi	r25, 0xF0	; 240
    1ba2:	98 27       	eor	r25, r24
    1ba4:	80 7f       	andi	r24, 0xF0	; 240
    1ba6:	98 27       	eor	r25, r24
    1ba8:	28 2b       	or	r18, r24
    1baa:	84 81       	ldd	r24, Z+4	; 0x04
    1bac:	28 2b       	or	r18, r24
    1bae:	2e bd       	out	0x2e, r18	; 46
	TCNT1=(Config_Ptr->Initial_value);
    1bb0:	80 81       	ld	r24, Z
    1bb2:	91 81       	ldd	r25, Z+1	; 0x01
    1bb4:	9d bd       	out	0x2d, r25	; 45
    1bb6:	8c bd       	out	0x2c, r24	; 44
	if((Config_Ptr->mode)==CTC_mode){
    1bb8:	44 30       	cpi	r20, 0x04	; 4
    1bba:	21 f0       	breq	.+8      	; 0x1bc4 <TIMER1_INIT+0x62>
		OCR1A=(Config_Ptr->Compare_value);
		TIMSK|=(1<<OCIE1A);
	}
	else{
		TIMSK|=(1<<TOIE1);
    1bbc:	89 b7       	in	r24, 0x39	; 57
    1bbe:	84 60       	ori	r24, 0x04	; 4
    1bc0:	89 bf       	out	0x39, r24	; 57
    1bc2:	08 95       	ret

	TCCR1A=(1<<FOC1A)|(GET_BIT(Config_Ptr->mode,0)<<WGM10)|(GET_BIT(Config_Ptr->mode,1)<<WGM11);
	TCCR1B=(GET_BIT(Config_Ptr->mode,2)<<WGM12)|(GET_BIT(Config_Ptr->mode,3)<<WGM13)|(Config_Ptr->prescaler);
	TCNT1=(Config_Ptr->Initial_value);
	if((Config_Ptr->mode)==CTC_mode){
		OCR1A=(Config_Ptr->Compare_value);
    1bc4:	82 81       	ldd	r24, Z+2	; 0x02
    1bc6:	93 81       	ldd	r25, Z+3	; 0x03
    1bc8:	9b bd       	out	0x2b, r25	; 43
    1bca:	8a bd       	out	0x2a, r24	; 42
		TIMSK|=(1<<OCIE1A);
    1bcc:	89 b7       	in	r24, 0x39	; 57
    1bce:	80 61       	ori	r24, 0x10	; 16
    1bd0:	89 bf       	out	0x39, r24	; 57
    1bd2:	08 95       	ret

00001bd4 <TIMER1_DeINIT>:

}
//################  CLOSE THE TIMER1 ############################################
void TIMER1_DeINIT(void)
{
	TCCR1B|=StopCounter;
    1bd4:	8e b5       	in	r24, 0x2e	; 46
    1bd6:	8e bd       	out	0x2e, r24	; 46
	TCNT1=0;
    1bd8:	1d bc       	out	0x2d, r1	; 45
    1bda:	1c bc       	out	0x2c, r1	; 44
	TIMSK&=~(1<<OCIE1A)&~(1<<TOIE1);
    1bdc:	89 b7       	in	r24, 0x39	; 57
    1bde:	8b 7e       	andi	r24, 0xEB	; 235
    1be0:	89 bf       	out	0x39, r24	; 57
}
    1be2:	08 95       	ret

00001be4 <Timer1_setCallBack>:
//################################################################################
void Timer1_setCallBack(void(*a_ptr)(void))
{
	g_callBackPtr = a_ptr;
    1be4:	90 93 88 01 	sts	0x0188, r25
    1be8:	80 93 87 01 	sts	0x0187, r24
}
    1bec:	08 95       	ret

00001bee <UART_INIT>:
 *
 *
 *
 */
void UART_INIT(const UART_ConfigType * Config_Ptr)
{
    1bee:	fc 01       	movw	r30, r24
    	uint16 ubrrValue;

		/* U2X = 1 for double transmission speed */
		UCSRA = (1<<U2X);
    1bf0:	82 e0       	ldi	r24, 0x02	; 2
    1bf2:	8b b9       	out	0x0b, r24	; 11
		 * RXEN  = 1 Receiver Enable
		 * RXEN  = 1 Transmitter Enable
		 * UCSZ2 = 0 For 8-bit data mode
		 * RXB8 & TXB8 not used for 8-bit data mode
		 ***********************************************************************/
		UCSRB = (1<<RXEN) | (1<<TXEN);
    1bf4:	88 e1       	ldi	r24, 0x18	; 24
    1bf6:	8a b9       	out	0x0a, r24	; 10
		 * UPM1:0  = 00 Disable parity bit
		 * USBS    = 0 One stop bit
		 * UCSZ1:0 = 11 For 8-bit data mode
		 * UCPOL   = 0 Used with the Synchronous operation only
		 ***********************************************************************/
		UCSRC = (1<<URSEL) ;
    1bf8:	80 e8       	ldi	r24, 0x80	; 128
    1bfa:	80 bd       	out	0x20, r24	; 32
		UCSRC=(UCSRC&0xCF)|((  (Config_Ptr->parity  )<<UPM0 ) &0x30 );
    1bfc:	90 b5       	in	r25, 0x20	; 32
    1bfe:	81 81       	ldd	r24, Z+1	; 0x01
    1c00:	82 95       	swap	r24
    1c02:	80 73       	andi	r24, 0x30	; 48
    1c04:	9f 7c       	andi	r25, 0xCF	; 207
    1c06:	89 2b       	or	r24, r25
    1c08:	80 bd       	out	0x20, r24	; 32
		UCSRC=(UCSRC&0xF9)|((  (Config_Ptr->bit_data)<<UCSZ0) &0x06 );
    1c0a:	90 b5       	in	r25, 0x20	; 32
    1c0c:	80 81       	ld	r24, Z
    1c0e:	88 0f       	add	r24, r24
    1c10:	86 70       	andi	r24, 0x06	; 6
    1c12:	99 7f       	andi	r25, 0xF9	; 249
    1c14:	89 2b       	or	r24, r25
    1c16:	80 bd       	out	0x20, r24	; 32
		UCSRC=(UCSRC&0xF7)|((  (Config_Ptr->stop_bit)<<USBS ) &0x08 );
    1c18:	90 b5       	in	r25, 0x20	; 32
    1c1a:	82 81       	ldd	r24, Z+2	; 0x02
    1c1c:	88 0f       	add	r24, r24
    1c1e:	88 0f       	add	r24, r24
    1c20:	88 0f       	add	r24, r24
    1c22:	88 70       	andi	r24, 0x08	; 8
    1c24:	97 7f       	andi	r25, 0xF7	; 247
    1c26:	89 2b       	or	r24, r25
    1c28:	80 bd       	out	0x20, r24	; 32
		ubrrValue = (uint16)(((F_CPU / ((Config_Ptr->baudrate) * 8))) - 1);
    1c2a:	23 81       	ldd	r18, Z+3	; 0x03
    1c2c:	34 81       	ldd	r19, Z+4	; 0x04
    1c2e:	45 81       	ldd	r20, Z+5	; 0x05
    1c30:	56 81       	ldd	r21, Z+6	; 0x06
    1c32:	22 0f       	add	r18, r18
    1c34:	33 1f       	adc	r19, r19
    1c36:	44 1f       	adc	r20, r20
    1c38:	55 1f       	adc	r21, r21
    1c3a:	22 0f       	add	r18, r18
    1c3c:	33 1f       	adc	r19, r19
    1c3e:	44 1f       	adc	r20, r20
    1c40:	55 1f       	adc	r21, r21
    1c42:	22 0f       	add	r18, r18
    1c44:	33 1f       	adc	r19, r19
    1c46:	44 1f       	adc	r20, r20
    1c48:	55 1f       	adc	r21, r21
    1c4a:	60 e0       	ldi	r22, 0x00	; 0
    1c4c:	72 e1       	ldi	r23, 0x12	; 18
    1c4e:	8a e7       	ldi	r24, 0x7A	; 122
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__udivmodsi4>
    1c56:	21 50       	subi	r18, 0x01	; 1
    1c58:	30 40       	sbci	r19, 0x00	; 0
		/* Calculate the UBRR register value */
		//ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);

		/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/

		UBRRH = ubrrValue>>8;
    1c5a:	30 bd       	out	0x20, r19	; 32
		UBRRL = ubrrValue;
    1c5c:	29 b9       	out	0x09, r18	; 9



}
    1c5e:	08 95       	ret

00001c60 <UART_T>:
void UART_T(const uint8 data)
{
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1c60:	5d 9b       	sbis	0x0b, 5	; 11
    1c62:	fe cf       	rjmp	.-4      	; 0x1c60 <UART_T>
	UDR = data;
    1c64:	8c b9       	out	0x0c, r24	; 12
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    1c66:	08 95       	ret

00001c68 <UART_R>:
uint8 UART_R(void)
{
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1c68:	5f 9b       	sbis	0x0b, 7	; 11
    1c6a:	fe cf       	rjmp	.-4      	; 0x1c68 <UART_R>
    return UDR;
    1c6c:	8c b1       	in	r24, 0x0c	; 12
}
    1c6e:	08 95       	ret

00001c70 <UART_T_STR>:
void UART_T_STR(const uint8 *ptr)
{
    1c70:	fc 01       	movw	r30, r24
	while(*ptr != '\0')
    1c72:	80 81       	ld	r24, Z
    1c74:	88 23       	and	r24, r24
    1c76:	39 f0       	breq	.+14     	; 0x1c86 <UART_T_STR+0x16>


}
void UART_T(const uint8 data)
{
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1c78:	5d 9b       	sbis	0x0b, 5	; 11
    1c7a:	fe cf       	rjmp	.-4      	; 0x1c78 <UART_T_STR+0x8>
	UDR = data;
    1c7c:	8c b9       	out	0x0c, r24	; 12
void UART_T_STR(const uint8 *ptr)
{
	while(*ptr != '\0')
	{
		UART_T(*ptr);
		ptr++;
    1c7e:	31 96       	adiw	r30, 0x01	; 1
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    return UDR;
}
void UART_T_STR(const uint8 *ptr)
{
	while(*ptr != '\0')
    1c80:	80 81       	ld	r24, Z
    1c82:	88 23       	and	r24, r24
    1c84:	c9 f7       	brne	.-14     	; 0x1c78 <UART_T_STR+0x8>
    1c86:	08 95       	ret

00001c88 <UART_R_STR>:
		ptr++;
	}
}

void UART_R_STR(uint8 *ptr)
{
    1c88:	fc 01       	movw	r30, r24
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
uint8 UART_R(void)
{
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1c8a:	5f 9b       	sbis	0x0b, 7	; 11
    1c8c:	fe cf       	rjmp	.-4      	; 0x1c8a <UART_R_STR+0x2>
    return UDR;
    1c8e:	8c b1       	in	r24, 0x0c	; 12
	}
}

void UART_R_STR(uint8 *ptr)
{
	*ptr = UART_R();
    1c90:	80 83       	st	Z, r24
	while(*ptr != '#')
    1c92:	83 32       	cpi	r24, 0x23	; 35
    1c94:	39 f0       	breq	.+14     	; 0x1ca4 <UART_R_STR+0x1c>
	{
		ptr++;
    1c96:	31 96       	adiw	r30, 0x01	; 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
uint8 UART_R(void)
{
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1c98:	5f 9b       	sbis	0x0b, 7	; 11
    1c9a:	fe cf       	rjmp	.-4      	; 0x1c98 <UART_R_STR+0x10>
    return UDR;
    1c9c:	8c b1       	in	r24, 0x0c	; 12
	}
}

void UART_R_STR(uint8 *ptr)
{
	*ptr = UART_R();
    1c9e:	80 83       	st	Z, r24
	while(*ptr != '#')
    1ca0:	83 32       	cpi	r24, 0x23	; 35
    1ca2:	c9 f7       	brne	.-14     	; 0x1c96 <UART_R_STR+0xe>
	{
		ptr++;
		*ptr = UART_R();
	}
	*ptr = '\0';
    1ca4:	10 82       	st	Z, r1
}
    1ca6:	08 95       	ret

00001ca8 <__udivmodsi4>:
    1ca8:	a1 e2       	ldi	r26, 0x21	; 33
    1caa:	1a 2e       	mov	r1, r26
    1cac:	aa 1b       	sub	r26, r26
    1cae:	bb 1b       	sub	r27, r27
    1cb0:	fd 01       	movw	r30, r26
    1cb2:	0d c0       	rjmp	.+26     	; 0x1cce <__udivmodsi4_ep>

00001cb4 <__udivmodsi4_loop>:
    1cb4:	aa 1f       	adc	r26, r26
    1cb6:	bb 1f       	adc	r27, r27
    1cb8:	ee 1f       	adc	r30, r30
    1cba:	ff 1f       	adc	r31, r31
    1cbc:	a2 17       	cp	r26, r18
    1cbe:	b3 07       	cpc	r27, r19
    1cc0:	e4 07       	cpc	r30, r20
    1cc2:	f5 07       	cpc	r31, r21
    1cc4:	20 f0       	brcs	.+8      	; 0x1cce <__udivmodsi4_ep>
    1cc6:	a2 1b       	sub	r26, r18
    1cc8:	b3 0b       	sbc	r27, r19
    1cca:	e4 0b       	sbc	r30, r20
    1ccc:	f5 0b       	sbc	r31, r21

00001cce <__udivmodsi4_ep>:
    1cce:	66 1f       	adc	r22, r22
    1cd0:	77 1f       	adc	r23, r23
    1cd2:	88 1f       	adc	r24, r24
    1cd4:	99 1f       	adc	r25, r25
    1cd6:	1a 94       	dec	r1
    1cd8:	69 f7       	brne	.-38     	; 0x1cb4 <__udivmodsi4_loop>
    1cda:	60 95       	com	r22
    1cdc:	70 95       	com	r23
    1cde:	80 95       	com	r24
    1ce0:	90 95       	com	r25
    1ce2:	9b 01       	movw	r18, r22
    1ce4:	ac 01       	movw	r20, r24
    1ce6:	bd 01       	movw	r22, r26
    1ce8:	cf 01       	movw	r24, r30
    1cea:	08 95       	ret

00001cec <__prologue_saves__>:
    1cec:	2f 92       	push	r2
    1cee:	3f 92       	push	r3
    1cf0:	4f 92       	push	r4
    1cf2:	5f 92       	push	r5
    1cf4:	6f 92       	push	r6
    1cf6:	7f 92       	push	r7
    1cf8:	8f 92       	push	r8
    1cfa:	9f 92       	push	r9
    1cfc:	af 92       	push	r10
    1cfe:	bf 92       	push	r11
    1d00:	cf 92       	push	r12
    1d02:	df 92       	push	r13
    1d04:	ef 92       	push	r14
    1d06:	ff 92       	push	r15
    1d08:	0f 93       	push	r16
    1d0a:	1f 93       	push	r17
    1d0c:	cf 93       	push	r28
    1d0e:	df 93       	push	r29
    1d10:	cd b7       	in	r28, 0x3d	; 61
    1d12:	de b7       	in	r29, 0x3e	; 62
    1d14:	ca 1b       	sub	r28, r26
    1d16:	db 0b       	sbc	r29, r27
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	f8 94       	cli
    1d1c:	de bf       	out	0x3e, r29	; 62
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	cd bf       	out	0x3d, r28	; 61
    1d22:	09 94       	ijmp

00001d24 <__epilogue_restores__>:
    1d24:	2a 88       	ldd	r2, Y+18	; 0x12
    1d26:	39 88       	ldd	r3, Y+17	; 0x11
    1d28:	48 88       	ldd	r4, Y+16	; 0x10
    1d2a:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d2c:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d2e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d30:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d32:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d34:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d36:	b9 84       	ldd	r11, Y+9	; 0x09
    1d38:	c8 84       	ldd	r12, Y+8	; 0x08
    1d3a:	df 80       	ldd	r13, Y+7	; 0x07
    1d3c:	ee 80       	ldd	r14, Y+6	; 0x06
    1d3e:	fd 80       	ldd	r15, Y+5	; 0x05
    1d40:	0c 81       	ldd	r16, Y+4	; 0x04
    1d42:	1b 81       	ldd	r17, Y+3	; 0x03
    1d44:	aa 81       	ldd	r26, Y+2	; 0x02
    1d46:	b9 81       	ldd	r27, Y+1	; 0x01
    1d48:	ce 0f       	add	r28, r30
    1d4a:	d1 1d       	adc	r29, r1
    1d4c:	0f b6       	in	r0, 0x3f	; 63
    1d4e:	f8 94       	cli
    1d50:	de bf       	out	0x3e, r29	; 62
    1d52:	0f be       	out	0x3f, r0	; 63
    1d54:	cd bf       	out	0x3d, r28	; 61
    1d56:	ed 01       	movw	r28, r26
    1d58:	08 95       	ret

00001d5a <itoa>:
    1d5a:	fb 01       	movw	r30, r22
    1d5c:	9f 01       	movw	r18, r30
    1d5e:	e8 94       	clt
    1d60:	42 30       	cpi	r20, 0x02	; 2
    1d62:	c4 f0       	brlt	.+48     	; 0x1d94 <itoa+0x3a>
    1d64:	45 32       	cpi	r20, 0x25	; 37
    1d66:	b4 f4       	brge	.+44     	; 0x1d94 <itoa+0x3a>
    1d68:	4a 30       	cpi	r20, 0x0A	; 10
    1d6a:	29 f4       	brne	.+10     	; 0x1d76 <itoa+0x1c>
    1d6c:	97 fb       	bst	r25, 7
    1d6e:	1e f4       	brtc	.+6      	; 0x1d76 <itoa+0x1c>
    1d70:	90 95       	com	r25
    1d72:	81 95       	neg	r24
    1d74:	9f 4f       	sbci	r25, 0xFF	; 255
    1d76:	64 2f       	mov	r22, r20
    1d78:	77 27       	eor	r23, r23
    1d7a:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__udivmodhi4>
    1d7e:	80 5d       	subi	r24, 0xD0	; 208
    1d80:	8a 33       	cpi	r24, 0x3A	; 58
    1d82:	0c f0       	brlt	.+2      	; 0x1d86 <itoa+0x2c>
    1d84:	89 5d       	subi	r24, 0xD9	; 217
    1d86:	81 93       	st	Z+, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	00 97       	sbiw	r24, 0x00	; 0
    1d8c:	a1 f7       	brne	.-24     	; 0x1d76 <itoa+0x1c>
    1d8e:	16 f4       	brtc	.+4      	; 0x1d94 <itoa+0x3a>
    1d90:	5d e2       	ldi	r21, 0x2D	; 45
    1d92:	51 93       	st	Z+, r21
    1d94:	10 82       	st	Z, r1
    1d96:	c9 01       	movw	r24, r18
    1d98:	0c 94 ce 0e 	jmp	0x1d9c	; 0x1d9c <strrev>

00001d9c <strrev>:
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	fc 01       	movw	r30, r24
    1da0:	67 2f       	mov	r22, r23
    1da2:	71 91       	ld	r23, Z+
    1da4:	77 23       	and	r23, r23
    1da6:	e1 f7       	brne	.-8      	; 0x1da0 <strrev+0x4>
    1da8:	32 97       	sbiw	r30, 0x02	; 2
    1daa:	04 c0       	rjmp	.+8      	; 0x1db4 <strrev+0x18>
    1dac:	7c 91       	ld	r23, X
    1dae:	6d 93       	st	X+, r22
    1db0:	70 83       	st	Z, r23
    1db2:	62 91       	ld	r22, -Z
    1db4:	ae 17       	cp	r26, r30
    1db6:	bf 07       	cpc	r27, r31
    1db8:	c8 f3       	brcs	.-14     	; 0x1dac <strrev+0x10>
    1dba:	08 95       	ret

00001dbc <__udivmodhi4>:
    1dbc:	aa 1b       	sub	r26, r26
    1dbe:	bb 1b       	sub	r27, r27
    1dc0:	51 e1       	ldi	r21, 0x11	; 17
    1dc2:	07 c0       	rjmp	.+14     	; 0x1dd2 <__udivmodhi4_ep>

00001dc4 <__udivmodhi4_loop>:
    1dc4:	aa 1f       	adc	r26, r26
    1dc6:	bb 1f       	adc	r27, r27
    1dc8:	a6 17       	cp	r26, r22
    1dca:	b7 07       	cpc	r27, r23
    1dcc:	10 f0       	brcs	.+4      	; 0x1dd2 <__udivmodhi4_ep>
    1dce:	a6 1b       	sub	r26, r22
    1dd0:	b7 0b       	sbc	r27, r23

00001dd2 <__udivmodhi4_ep>:
    1dd2:	88 1f       	adc	r24, r24
    1dd4:	99 1f       	adc	r25, r25
    1dd6:	5a 95       	dec	r21
    1dd8:	a9 f7       	brne	.-22     	; 0x1dc4 <__udivmodhi4_loop>
    1dda:	80 95       	com	r24
    1ddc:	90 95       	com	r25
    1dde:	bc 01       	movw	r22, r24
    1de0:	cd 01       	movw	r24, r26
    1de2:	08 95       	ret

00001de4 <_exit>:
    1de4:	f8 94       	cli

00001de6 <__stop_program>:
    1de6:	ff cf       	rjmp	.-2      	; 0x1de6 <__stop_program>
